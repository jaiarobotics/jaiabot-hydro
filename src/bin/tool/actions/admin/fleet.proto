// Copyright 2024:
//   JaiaRobotics LLC
// File authors:
//   Toby Schneider <toby@gobysoft.org>
//
//
// This file is part of the JaiaBot Project Binaries
// ("The Jaia Binaries").
//
// The Jaia Binaries are free software: you can redistribute them and/or modify
// them under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// The Jaia Binaries are distributed in the hope that they will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the Jaia Binaries.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto2";
import "goby/middleware/protobuf/app_config.proto";
import "goby/protobuf/option_extensions.proto";
import "actions/net.proto";

package jaiabot.config.admin;

message FleetTool
{
    option (goby.msg).cfg.tool = {
        is_tool: true
        has_subtools: true
        has_help_action: true
    };

    optional goby.middleware.protobuf.AppConfig app = 1
        [(goby.field) = { cfg { action: DEVELOPER } }];

    enum Action
    {
        help = 0 [(goby.ev).cfg = {
            short_help_msg: "Print usage information",
            full_help_msg: "Usage: \"jaia admin ssh help [action]\""
        }];
        create = 1 [(goby.ev).cfg = {
            short_help_msg: "Create a new fleet config",
        }];
        validate = 2 [(goby.ev).cfg = {
            short_help_msg: "Validate a new fleet config",
        }];
    }
    optional Action action = 2 [
        default = help,
        (goby.field) = {
            description: "The action this tool should take [can omit --action if 1st parameter]",
            cfg { position: { enable: true }, cli_short: "A", action: HIDDEN }
        }
    ];
}

message Fleet
{
    required int32 fleet = 1;
    repeated int32 hubs = 2;
    repeated int32 bots = 3;

    message SSHKeys
    {
        repeated string permanent_authorized_keys = 1;
        message HubKey
        {
            required int32 id = 1;
            required string private_key = 2;
            required string public_key = 3;
        }
        repeated HubKey hub = 2;
    }
    required SSHKeys ssh = 4;

    message Debconf
    {
        enum DebconfType
        {
            SELECT = 0;
        }

        required string key = 1;
        optional DebconfType type = 2 [default = SELECT];
        required string value = 3;
    }
    repeated Debconf debconf = 5;
    required string wlan_password = 6;
    required bool service_vpn_enabled = 7;

    message DebconfOverride
    {
        enum NodeType
        {
            HUB = 0;
            BOT = 1;
        }

        required NodeType type = 1;
        required int32 id = 2;
        required Debconf debconf = 3;
    }
    repeated DebconfOverride debconf_override = 8;
}

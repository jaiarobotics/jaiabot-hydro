
JAIA_BIO-PAYLOAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006dc4  08006dc4  00007dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f24  08006f24  0000807c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f24  08006f24  00007f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f2c  08006f2c  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f2c  08006f2c  00007f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006f34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  2000007c  08006fb0  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08006fb0  00008634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b8c  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3c  00000000  00000000  0001fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00022778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c1  00000000  00000000  00023e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002636e  00000000  00000000  00024fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0aa  00000000  00000000  0004b33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb73f  00000000  00000000  000653e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000088  00000000  00000000  00150b28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066e0  00000000  00000000  00150bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000249  00000000  00000000  00157290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b80c 	b.w	8000270 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f006 fc28 	bl	8006ab4 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__aeabi_idiv0>:
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <deregister_tm_clones>:
 8000274:	4803      	ldr	r0, [pc, #12]	@ (8000284 <deregister_tm_clones+0x10>)
 8000276:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <deregister_tm_clones+0x14>)
 8000278:	4283      	cmp	r3, r0
 800027a:	d002      	beq.n	8000282 <deregister_tm_clones+0xe>
 800027c:	4b03      	ldr	r3, [pc, #12]	@ (800028c <deregister_tm_clones+0x18>)
 800027e:	b103      	cbz	r3, 8000282 <deregister_tm_clones+0xe>
 8000280:	4718      	bx	r3
 8000282:	4770      	bx	lr
 8000284:	2000007c 	.word	0x2000007c
 8000288:	2000007c 	.word	0x2000007c
 800028c:	00000000 	.word	0x00000000

08000290 <register_tm_clones>:
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <register_tm_clones+0x18>)
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <register_tm_clones+0x1c>)
 8000294:	1a1b      	subs	r3, r3, r0
 8000296:	0fd9      	lsrs	r1, r3, #31
 8000298:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 800029c:	1049      	asrs	r1, r1, #1
 800029e:	d002      	beq.n	80002a6 <register_tm_clones+0x16>
 80002a0:	4b03      	ldr	r3, [pc, #12]	@ (80002b0 <register_tm_clones+0x20>)
 80002a2:	b103      	cbz	r3, 80002a6 <register_tm_clones+0x16>
 80002a4:	4718      	bx	r3
 80002a6:	4770      	bx	lr
 80002a8:	2000007c 	.word	0x2000007c
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	00000000 	.word	0x00000000

080002b4 <__do_global_dtors_aux>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	4c06      	ldr	r4, [pc, #24]	@ (80002d0 <__do_global_dtors_aux+0x1c>)
 80002b8:	7823      	ldrb	r3, [r4, #0]
 80002ba:	b943      	cbnz	r3, 80002ce <__do_global_dtors_aux+0x1a>
 80002bc:	f7ff ffda 	bl	8000274 <deregister_tm_clones>
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <__do_global_dtors_aux+0x20>)
 80002c2:	b113      	cbz	r3, 80002ca <__do_global_dtors_aux+0x16>
 80002c4:	4804      	ldr	r0, [pc, #16]	@ (80002d8 <__do_global_dtors_aux+0x24>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	2301      	movs	r3, #1
 80002cc:	7023      	strb	r3, [r4, #0]
 80002ce:	bd10      	pop	{r4, pc}
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	00000000 	.word	0x00000000
 80002d8:	08006dac 	.word	0x08006dac

080002dc <frame_dummy>:
 80002dc:	b508      	push	{r3, lr}
 80002de:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <frame_dummy+0x18>)
 80002e0:	b11b      	cbz	r3, 80002ea <frame_dummy+0xe>
 80002e2:	4905      	ldr	r1, [pc, #20]	@ (80002f8 <frame_dummy+0x1c>)
 80002e4:	4805      	ldr	r0, [pc, #20]	@ (80002fc <frame_dummy+0x20>)
 80002e6:	f3af 8000 	nop.w
 80002ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002ee:	f7ff bfcf 	b.w	8000290 <register_tm_clones>
 80002f2:	bf00      	nop
 80002f4:	00000000 	.word	0x00000000
 80002f8:	20000080 	.word	0x20000080
 80002fc:	08006dac 	.word	0x08006dac

08000300 <EC_OEM_Initialize>:

/* 
 * INITIALIZE 
 */ 

HAL_StatusTypeDef EC_OEM_Initialize( EC_OEM *dev, I2C_HandleTypeDef *i2cHandle ) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	/* Set struct params */
	dev->i2cHandle	= i2cHandle;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	683a      	ldr	r2, [r7, #0]
 800030e:	601a      	str	r2, [r3, #0]
	dev->ec_mS	 	= 0.0f;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]

	/* Number of transaction errors to be returned at end of function */
	uint8_t errNum = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	/* Check device type */
	uint8_t regData;
	status = EC_OEM_ReadRegister( dev, EC_OEM_REG_DEV_TYPE, &regData );
 800031a:	f107 030d 	add.w	r3, r7, #13
 800031e:	461a      	mov	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f000 f894 	bl	8000450 <EC_OEM_ReadRegister>
 8000328:	4603      	mov	r3, r0
 800032a:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 800032c:	7bbb      	ldrb	r3, [r7, #14]
 800032e:	2b00      	cmp	r3, #0
 8000330:	bf14      	ite	ne
 8000332:	2301      	movne	r3, #1
 8000334:	2300      	moveq	r3, #0
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	7bfb      	ldrb	r3, [r7, #15]
 800033c:	4413      	add	r3, r2
 800033e:	73fb      	strb	r3, [r7, #15]

	if ( regData != EC_OEM_DEV_TYPE ) {
 8000340:	7b7b      	ldrb	r3, [r7, #13]
 8000342:	2b04      	cmp	r3, #4
 8000344:	d001      	beq.n	800034a <EC_OEM_Initialize+0x4a>
		return HAL_ERROR; 
 8000346:	2301      	movs	r3, #1
 8000348:	e00a      	b.n	8000360 <EC_OEM_Initialize+0x60>
	} else if ( status != HAL_OK ) {
 800034a:	7bbb      	ldrb	r3, [r7, #14]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <EC_OEM_Initialize+0x54>
		return status;
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	e005      	b.n	8000360 <EC_OEM_Initialize+0x60>
	}

	// Activate the EC chip to begin taking readings. Default of 1 reading every 640 ms.
	status = EC_OEM_Activate( dev );
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f000 f807 	bl	8000368 <EC_OEM_Activate>
 800035a:	4603      	mov	r3, r0
 800035c:	73bb      	strb	r3, [r7, #14]

	return status;
 800035e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000360:	4618      	mov	r0, r3
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <EC_OEM_Activate>:

/*
 * DATA ACQUISITION
 */

HAL_StatusTypeDef EC_OEM_Activate( EC_OEM *dev ) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uint8_t activate_command = 0x01;
 8000370:	2301      	movs	r3, #1
 8000372:	73fb      	strb	r3, [r7, #15]
	return EC_OEM_WriteRegister( dev, EC_OEM_REG_ACTIVE, &activate_command );
 8000374:	f107 030f 	add.w	r3, r7, #15
 8000378:	461a      	mov	r2, r3
 800037a:	2106      	movs	r1, #6
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f000 f882 	bl	8000486 <EC_OEM_WriteRegister>
 8000382:	4603      	mov	r3, r0
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <EC_OEM_GetDevType>:
HAL_StatusTypeDef EC_OEM_Hibernate( EC_OEM *dev ) {
	uint8_t hibernate_command = 0x00;
	return EC_OEM_WriteRegister( dev, EC_OEM_REG_ACTIVE, &hibernate_command );
}

HAL_StatusTypeDef EC_OEM_GetDevType( EC_OEM *dev ) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	uint8_t deviceType;
	HAL_StatusTypeDef status = EC_OEM_ReadRegister( dev, EC_OEM_REG_DEV_TYPE, &deviceType );
 8000394:	f107 030e 	add.w	r3, r7, #14
 8000398:	461a      	mov	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f000 f857 	bl	8000450 <EC_OEM_ReadRegister>
 80003a2:	4603      	mov	r3, r0
 80003a4:	73fb      	strb	r3, [r7, #15]
	dev->devType = deviceType;
 80003a6:	7bba      	ldrb	r2, [r7, #14]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	721a      	strb	r2, [r3, #8]

	return status;
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <EC_OEM_ReadEC>:

HAL_StatusTypeDef EC_OEM_ReadEC( EC_OEM *dev ) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	/* Read EC data from Atlas Scientific chip */	
	uint8_t regData[4];
	
	HAL_StatusTypeDef status = EC_OEM_ReadRegister( dev, EC_OEM_REG_EC_MSB, &regData[0] );
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	461a      	mov	r2, r3
 80003c6:	2118      	movs	r1, #24
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f841 	bl	8000450 <EC_OEM_ReadRegister>
 80003ce:	4603      	mov	r3, r0
 80003d0:	75fb      	strb	r3, [r7, #23]
	status = EC_OEM_ReadRegister( dev, EC_OEM_REG_EC_LOW_BYTE, &regData[1] );
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	3301      	adds	r3, #1
 80003d8:	461a      	mov	r2, r3
 80003da:	211a      	movs	r1, #26
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f837 	bl	8000450 <EC_OEM_ReadRegister>
 80003e2:	4603      	mov	r3, r0
 80003e4:	75fb      	strb	r3, [r7, #23]
	status = EC_OEM_ReadRegister( dev, EC_OEM_REG_EC_HIGH_BYTE, &regData[2] );
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	3302      	adds	r3, #2
 80003ec:	461a      	mov	r2, r3
 80003ee:	2119      	movs	r1, #25
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f000 f82d 	bl	8000450 <EC_OEM_ReadRegister>
 80003f6:	4603      	mov	r3, r0
 80003f8:	75fb      	strb	r3, [r7, #23]
	status = EC_OEM_ReadRegister( dev, EC_OEM_REG_EC_LSB, &regData[3] );
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	3303      	adds	r3, #3
 8000400:	461a      	mov	r2, r3
 8000402:	211b      	movs	r1, #27
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f000 f823 	bl	8000450 <EC_OEM_ReadRegister>
 800040a:	4603      	mov	r3, r0
 800040c:	75fb      	strb	r3, [r7, #23]

	/* Convert bytes to conductivity value */
	uint32_t ecRaw = (regData[0] << 24) | (regData[1] << 16) | (regData[2] << 8) | regData[3];
 800040e:	7b3b      	ldrb	r3, [r7, #12]
 8000410:	061a      	lsls	r2, r3, #24
 8000412:	7b7b      	ldrb	r3, [r7, #13]
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	431a      	orrs	r2, r3
 8000418:	7bbb      	ldrb	r3, [r7, #14]
 800041a:	021b      	lsls	r3, r3, #8
 800041c:	4313      	orrs	r3, r2
 800041e:	7bfa      	ldrb	r2, [r7, #15]
 8000420:	4313      	orrs	r3, r2
 8000422:	613b      	str	r3, [r7, #16]
	//float ecRaw = 0;
	dev->ec_mS = (float)ecRaw / 100.0f;
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	ee07 3a90 	vmov	s15, r3
 800042a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800042e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800044c <EC_OEM_ReadEC+0x94>
 8000432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800043a:	ee17 2a90 	vmov	r2, s15
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	605a      	str	r2, [r3, #4]

	//HAL_StatusTypeDef status = HAL_OK;
	return status;
 8000442:	7dfb      	ldrb	r3, [r7, #23]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	42c80000 	.word	0x42c80000

08000450 <EC_OEM_ReadRegister>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef EC_OEM_ReadRegister( EC_OEM *dev, uint8_t reg, uint8_t *data ) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af04      	add	r7, sp, #16
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	460b      	mov	r3, r1
 800045a:	607a      	str	r2, [r7, #4]
 800045c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev->i2cHandle, EC_OEM_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6818      	ldr	r0, [r3, #0]
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	b29a      	uxth	r2, r3
 8000466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800046a:	9302      	str	r3, [sp, #8]
 800046c:	2301      	movs	r3, #1
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2301      	movs	r3, #1
 8000476:	21c8      	movs	r1, #200	@ 0xc8
 8000478:	f002 fe00 	bl	800307c <HAL_I2C_Mem_Read>
 800047c:	4603      	mov	r3, r0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <EC_OEM_WriteRegister>:

HAL_StatusTypeDef EC_OEM_ReadRegisters( EC_OEM *dev, uint8_t reg, uint8_t *data, uint8_t len ) {
	return HAL_I2C_Mem_Read( dev->i2cHandle, EC_OEM_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef EC_OEM_WriteRegister( EC_OEM *dev, uint8_t reg, uint8_t *data ) {
 8000486:	b580      	push	{r7, lr}
 8000488:	b088      	sub	sp, #32
 800048a:	af04      	add	r7, sp, #16
 800048c:	60f8      	str	r0, [r7, #12]
 800048e:	460b      	mov	r3, r1
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev->i2cHandle, EC_OEM_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	6818      	ldr	r0, [r3, #0]
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	b29a      	uxth	r2, r3
 800049c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004a0:	9302      	str	r3, [sp, #8]
 80004a2:	2301      	movs	r3, #1
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	2301      	movs	r3, #1
 80004ac:	21c8      	movs	r1, #200	@ 0xc8
 80004ae:	f002 fc81 	bl	8002db4 <HAL_I2C_Mem_Write>
 80004b2:	4603      	mov	r3, r0
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <I2C_Scan>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Loop through memory addresses to find addresses with I2C devices on them
void I2C_Scan(void) {
 80004bc:	b5b0      	push	{r4, r5, r7, lr}
 80004be:	b094      	sub	sp, #80	@ 0x50
 80004c0:	af00      	add	r7, sp, #0
  uint8_t Buffer[25] = {0};
 80004c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	761a      	strb	r2, [r3, #24]
  uint8_t Space[] = " - ";
 80004d6:	4b31      	ldr	r3, [pc, #196]	@ (800059c <I2C_Scan+0xe0>)
 80004d8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 80004da:	4b31      	ldr	r3, [pc, #196]	@ (80005a0 <I2C_Scan+0xe4>)
 80004dc:	f107 0414 	add.w	r4, r7, #20
 80004e0:	461d      	mov	r5, r3
 80004e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ea:	c403      	stmia	r4!, {r0, r1}
 80004ec:	8022      	strh	r2, [r4, #0]
  uint8_t EndMSG[] = "\r\n\r\n Done! \r\n\r\n";
 80004ee:	4b2d      	ldr	r3, [pc, #180]	@ (80005a4 <I2C_Scan+0xe8>)
 80004f0:	1d3c      	adds	r4, r7, #4
 80004f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t i = 0, ret;
 80004f8:	2300      	movs	r3, #0
 80004fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 80004fe:	f107 0114 	add.w	r1, r7, #20
 8000502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000506:	221a      	movs	r2, #26
 8000508:	4827      	ldr	r0, [pc, #156]	@ (80005a8 <I2C_Scan+0xec>)
 800050a:	f005 f92d 	bl	8005768 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 800050e:	2301      	movs	r3, #1
 8000510:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000514:	e032      	b.n	800057c <I2C_Scan+0xc0>
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8000516:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800051a:	b29b      	uxth	r3, r3
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	b299      	uxth	r1, r3
 8000520:	2305      	movs	r3, #5
 8000522:	2203      	movs	r2, #3
 8000524:	4821      	ldr	r0, [pc, #132]	@ (80005ac <I2C_Scan+0xf0>)
 8000526:	f002 fec3 	bl	80032b0 <HAL_I2C_IsDeviceReady>
 800052a:	4603      	mov	r3, r0
 800052c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
      if (ret != HAL_OK) /* No ACK Received At That Address */
 8000530:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000534:	2b00      	cmp	r3, #0
 8000536:	d008      	beq.n	800054a <I2C_Scan+0x8e>
      {
        HAL_UART_Transmit(&huart2, Space, sizeof(Space), HAL_MAX_DELAY);
 8000538:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800053c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000540:	2204      	movs	r2, #4
 8000542:	4819      	ldr	r0, [pc, #100]	@ (80005a8 <I2C_Scan+0xec>)
 8000544:	f005 f910 	bl	8005768 <HAL_UART_Transmit>
 8000548:	e013      	b.n	8000572 <I2C_Scan+0xb6>
      } else if (ret == HAL_OK) {
 800054a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10f      	bne.n	8000572 <I2C_Scan+0xb6>
        sprintf(Buffer, "0x%X", i);
 8000552:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000556:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800055a:	4915      	ldr	r1, [pc, #84]	@ (80005b0 <I2C_Scan+0xf4>)
 800055c:	4618      	mov	r0, r3
 800055e:	f005 fe03 	bl	8006168 <siprintf>
        HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8000562:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800056a:	2219      	movs	r2, #25
 800056c:	480e      	ldr	r0, [pc, #56]	@ (80005a8 <I2C_Scan+0xec>)
 800056e:	f005 f8fb 	bl	8005768 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 8000572:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000576:	3301      	adds	r3, #1
 8000578:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800057c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000580:	2b00      	cmp	r3, #0
 8000582:	dac8      	bge.n	8000516 <I2C_Scan+0x5a>
      }
  }
  HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800058a:	2210      	movs	r2, #16
 800058c:	4806      	ldr	r0, [pc, #24]	@ (80005a8 <I2C_Scan+0xec>)
 800058e:	f005 f8eb 	bl	8005768 <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

  return;
 8000592:	bf00      	nop
}
 8000594:	3750      	adds	r7, #80	@ 0x50
 8000596:	46bd      	mov	sp, r7
 8000598:	bdb0      	pop	{r4, r5, r7, pc}
 800059a:	bf00      	nop
 800059c:	00202d20 	.word	0x00202d20
 80005a0:	08006dcc 	.word	0x08006dcc
 80005a4:	08006de8 	.word	0x08006de8
 80005a8:	20000308 	.word	0x20000308
 80005ac:	20000150 	.word	0x20000150
 80005b0:	08006dc4 	.word	0x08006dc4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 f984 	bl	80018c6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f8db 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fc27 	bl	8000e14 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c6:	f000 f93b 	bl	8000840 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005ca:	f000 f99f 	bl	800090c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005ce:	f000 f9dd 	bl	800098c <MX_I2C2_Init>
  MX_I2C3_Init();
 80005d2:	f000 fa1b 	bl	8000a0c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80005d6:	f000 fa59 	bl	8000a8c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005da:	f000 fa85 	bl	8000ae8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005de:	f000 fab3 	bl	8000b48 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005e2:	f000 fae1 	bl	8000ba8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005e6:	f000 fb1d 	bl	8000c24 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005ea:	f000 fb75 	bl	8000cd8 <MX_TIM2_Init>
  MX_TIM16_Init();
 80005ee:	f000 fbc7 	bl	8000d80 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  //RebootIntoDFU();

  // Turn on Atlas Sensors
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); // pH
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f002 fb0d 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET); // DO
 80005fe:	2201      	movs	r2, #1
 8000600:	2104      	movs	r1, #4
 8000602:	4851      	ldr	r0, [pc, #324]	@ (8000748 <main+0x194>)
 8000604:	f002 fb08 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET); // EC
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060e:	484e      	ldr	r0, [pc, #312]	@ (8000748 <main+0x194>)
 8000610:	f002 fb02 	bl	8002c18 <HAL_GPIO_WritePin>

  I2C_Scan();
 8000614:	f7ff ff52 	bl	80004bc <I2C_Scan>

  HAL_StatusTypeDef init_status = EC_OEM_Initialize( &acc, &hi2c2 );
 8000618:	494c      	ldr	r1, [pc, #304]	@ (800074c <main+0x198>)
 800061a:	484d      	ldr	r0, [pc, #308]	@ (8000750 <main+0x19c>)
 800061c:	f7ff fe70 	bl	8000300 <EC_OEM_Initialize>
 8000620:	4603      	mov	r3, r0
 8000622:	71fb      	strb	r3, [r7, #7]
  if (init_status != HAL_OK) {
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d011      	beq.n	800064e <main+0x9a>
    sprintf(tx_buff, "Init Err.: 0x%02X\r\n", init_status);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	461a      	mov	r2, r3
 800062e:	4949      	ldr	r1, [pc, #292]	@ (8000754 <main+0x1a0>)
 8000630:	4849      	ldr	r0, [pc, #292]	@ (8000758 <main+0x1a4>)
 8000632:	f005 fd99 	bl	8006168 <siprintf>
    HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8000636:	4848      	ldr	r0, [pc, #288]	@ (8000758 <main+0x1a4>)
 8000638:	f7ff fdaa 	bl	8000190 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000644:	4944      	ldr	r1, [pc, #272]	@ (8000758 <main+0x1a4>)
 8000646:	4845      	ldr	r0, [pc, #276]	@ (800075c <main+0x1a8>)
 8000648:	f005 f88e 	bl	8005768 <HAL_UART_Transmit>
 800064c:	e010      	b.n	8000670 <main+0xbc>
  } else {
    sprintf(tx_buff, "Init good.: 0x%02X\r\n", init_status);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	461a      	mov	r2, r3
 8000652:	4943      	ldr	r1, [pc, #268]	@ (8000760 <main+0x1ac>)
 8000654:	4840      	ldr	r0, [pc, #256]	@ (8000758 <main+0x1a4>)
 8000656:	f005 fd87 	bl	8006168 <siprintf>
    HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);  
 800065a:	483f      	ldr	r0, [pc, #252]	@ (8000758 <main+0x1a4>)
 800065c:	f7ff fd98 	bl	8000190 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000668:	493b      	ldr	r1, [pc, #236]	@ (8000758 <main+0x1a4>)
 800066a:	483c      	ldr	r0, [pc, #240]	@ (800075c <main+0x1a8>)
 800066c:	f005 f87c 	bl	8005768 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    HAL_Delay(1000);  // Pause for 1 sec (1000 ms)
 8000670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000674:	f001 f99c 	bl	80019b0 <HAL_Delay>

    /* LEDs */
    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 8000678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800067c:	4839      	ldr	r0, [pc, #228]	@ (8000764 <main+0x1b0>)
 800067e:	f002 fae3 	bl	8002c48 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
 8000682:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000686:	4837      	ldr	r0, [pc, #220]	@ (8000764 <main+0x1b0>)
 8000688:	f002 fade 	bl	8002c48 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 800068c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000690:	4834      	ldr	r0, [pc, #208]	@ (8000764 <main+0x1b0>)
 8000692:	f002 fad9 	bl	8002c48 <HAL_GPIO_TogglePin>

    HAL_StatusTypeDef devType_status = EC_OEM_GetDevType( &acc );
 8000696:	482e      	ldr	r0, [pc, #184]	@ (8000750 <main+0x19c>)
 8000698:	f7ff fe78 	bl	800038c <EC_OEM_GetDevType>
 800069c:	4603      	mov	r3, r0
 800069e:	71bb      	strb	r3, [r7, #6]
    if (devType_status != HAL_OK) {
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d011      	beq.n	80006ca <main+0x116>
      sprintf(tx_buff, "DevType Err.: 0x%02X\r\n", devType_status);
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	461a      	mov	r2, r3
 80006aa:	492f      	ldr	r1, [pc, #188]	@ (8000768 <main+0x1b4>)
 80006ac:	482a      	ldr	r0, [pc, #168]	@ (8000758 <main+0x1a4>)
 80006ae:	f005 fd5b 	bl	8006168 <siprintf>
      HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 80006b2:	4829      	ldr	r0, [pc, #164]	@ (8000758 <main+0x1a4>)
 80006b4:	f7ff fd6c 	bl	8000190 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c0:	4925      	ldr	r1, [pc, #148]	@ (8000758 <main+0x1a4>)
 80006c2:	4826      	ldr	r0, [pc, #152]	@ (800075c <main+0x1a8>)
 80006c4:	f005 f850 	bl	8005768 <HAL_UART_Transmit>
 80006c8:	e011      	b.n	80006ee <main+0x13a>
    } else {
      sprintf(tx_buff, "DevType good.: 0x%02X\r\n", acc.devType);
 80006ca:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <main+0x19c>)
 80006cc:	7a1b      	ldrb	r3, [r3, #8]
 80006ce:	461a      	mov	r2, r3
 80006d0:	4926      	ldr	r1, [pc, #152]	@ (800076c <main+0x1b8>)
 80006d2:	4821      	ldr	r0, [pc, #132]	@ (8000758 <main+0x1a4>)
 80006d4:	f005 fd48 	bl	8006168 <siprintf>
      HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);  
 80006d8:	481f      	ldr	r0, [pc, #124]	@ (8000758 <main+0x1a4>)
 80006da:	f7ff fd59 	bl	8000190 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006e6:	491c      	ldr	r1, [pc, #112]	@ (8000758 <main+0x1a4>)
 80006e8:	481c      	ldr	r0, [pc, #112]	@ (800075c <main+0x1a8>)
 80006ea:	f005 f83d 	bl	8005768 <HAL_UART_Transmit>
    }

    HAL_StatusTypeDef ec_read_status = EC_OEM_ReadEC( &acc );
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <main+0x19c>)
 80006f0:	f7ff fe62 	bl	80003b8 <EC_OEM_ReadEC>
 80006f4:	4603      	mov	r3, r0
 80006f6:	717b      	strb	r3, [r7, #5]
    if (ec_read_status != HAL_OK) {
 80006f8:	797b      	ldrb	r3, [r7, #5]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d011      	beq.n	8000722 <main+0x16e>
      sprintf(tx_buff, "Read Err.: 0x%02X\r\n\r\n", ec_read_status);
 80006fe:	797b      	ldrb	r3, [r7, #5]
 8000700:	461a      	mov	r2, r3
 8000702:	491b      	ldr	r1, [pc, #108]	@ (8000770 <main+0x1bc>)
 8000704:	4814      	ldr	r0, [pc, #80]	@ (8000758 <main+0x1a4>)
 8000706:	f005 fd2f 	bl	8006168 <siprintf>
      HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 800070a:	4813      	ldr	r0, [pc, #76]	@ (8000758 <main+0x1a4>)
 800070c:	f7ff fd40 	bl	8000190 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000718:	490f      	ldr	r1, [pc, #60]	@ (8000758 <main+0x1a4>)
 800071a:	4810      	ldr	r0, [pc, #64]	@ (800075c <main+0x1a8>)
 800071c:	f005 f824 	bl	8005768 <HAL_UART_Transmit>
 8000720:	e7a6      	b.n	8000670 <main+0xbc>
    } else {
      sprintf(tx_buff, "READ OKAY: %d\r\n\r\n", acc.ec_mS);
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <main+0x19c>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	461a      	mov	r2, r3
 8000728:	4912      	ldr	r1, [pc, #72]	@ (8000774 <main+0x1c0>)
 800072a:	480b      	ldr	r0, [pc, #44]	@ (8000758 <main+0x1a4>)
 800072c:	f005 fd1c 	bl	8006168 <siprintf>
      HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8000730:	4809      	ldr	r0, [pc, #36]	@ (8000758 <main+0x1a4>)
 8000732:	f7ff fd2d 	bl	8000190 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800073e:	4906      	ldr	r1, [pc, #24]	@ (8000758 <main+0x1a4>)
 8000740:	4806      	ldr	r0, [pc, #24]	@ (800075c <main+0x1a8>)
 8000742:	f005 f811 	bl	8005768 <HAL_UART_Transmit>
  {
 8000746:	e793      	b.n	8000670 <main+0xbc>
 8000748:	48000400 	.word	0x48000400
 800074c:	20000150 	.word	0x20000150
 8000750:	200004d8 	.word	0x200004d8
 8000754:	08006df8 	.word	0x08006df8
 8000758:	20000000 	.word	0x20000000
 800075c:	20000308 	.word	0x20000308
 8000760:	08006e0c 	.word	0x08006e0c
 8000764:	48000800 	.word	0x48000800
 8000768:	08006e24 	.word	0x08006e24
 800076c:	08006e3c 	.word	0x08006e3c
 8000770:	08006e54 	.word	0x08006e54
 8000774:	08006e6c 	.word	0x08006e6c

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b096      	sub	sp, #88	@ 0x58
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2244      	movs	r2, #68	@ 0x44
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 fd10 	bl	80061ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800079e:	f003 f9eb 	bl	8003b78 <HAL_PWREx_ControlVoltageScaling>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a8:	f000 fc14 	bl	8000fd4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ac:	f003 f9c6 	bl	8003b3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007b0:	4b22      	ldr	r3, [pc, #136]	@ (800083c <SystemClock_Config+0xc4>)
 80007b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007b6:	4a21      	ldr	r2, [pc, #132]	@ (800083c <SystemClock_Config+0xc4>)
 80007b8:	f023 0318 	bic.w	r3, r3, #24
 80007bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007c0:	231c      	movs	r3, #28
 80007c2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d4:	2360      	movs	r3, #96	@ 0x60
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007dc:	2301      	movs	r3, #1
 80007de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007e4:	2328      	movs	r3, #40	@ 0x28
 80007e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 fa13 	bl	8003c24 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000804:	f000 fbe6 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2303      	movs	r3, #3
 800080e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	2104      	movs	r1, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fe13 	bl	800444c <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800082c:	f000 fbd2 	bl	8000fd4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000830:	f004 fa7a 	bl	8004d28 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000834:	bf00      	nop
 8000836:	3758      	adds	r7, #88	@ 0x58
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000

08000840 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000856:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <MX_ADC1_Init+0xbc>)
 8000858:	4a29      	ldr	r2, [pc, #164]	@ (8000900 <MX_ADC1_Init+0xc0>)
 800085a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800085c:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <MX_ADC1_Init+0xbc>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000862:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <MX_ADC1_Init+0xbc>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000868:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <MX_ADC1_Init+0xbc>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086e:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <MX_ADC1_Init+0xbc>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <MX_ADC1_Init+0xbc>)
 8000876:	2204      	movs	r2, #4
 8000878:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087a:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <MX_ADC1_Init+0xbc>)
 800087c:	2200      	movs	r2, #0
 800087e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <MX_ADC1_Init+0xbc>)
 8000882:	2200      	movs	r2, #0
 8000884:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_ADC1_Init+0xbc>)
 8000888:	2201      	movs	r2, #1
 800088a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_ADC1_Init+0xbc>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_ADC1_Init+0xbc>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_ADC1_Init+0xbc>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <MX_ADC1_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_ADC1_Init+0xbc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_ADC1_Init+0xbc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	4811      	ldr	r0, [pc, #68]	@ (80008fc <MX_ADC1_Init+0xbc>)
 80008b8:	f001 fa2a 	bl	8001d10 <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80008c2:	f000 fb87 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_ADC1_Init+0xc4>)
 80008c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ca:	2306      	movs	r3, #6
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_ADC1_Init+0xc8>)
 80008d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d6:	2304      	movs	r3, #4
 80008d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <MX_ADC1_Init+0xbc>)
 80008e4:	f001 fb56 	bl	8001f94 <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ee:	f000 fb71 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000098 	.word	0x20000098
 8000900:	50040000 	.word	0x50040000
 8000904:	08600004 	.word	0x08600004
 8000908:	407f0000 	.word	0x407f0000

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <MX_I2C1_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <MX_I2C1_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	@ (8000980 <MX_I2C1_Init+0x74>)
 8000948:	f002 f998 	bl	8002c7c <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 fb3f 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <MX_I2C1_Init+0x74>)
 800095a:	f003 f857 	bl	8003a0c <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 fb36 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_I2C1_Init+0x74>)
 800096c:	f003 f899 	bl	8003aa2 <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 fb2d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000fc 	.word	0x200000fc
 8000984:	40005400 	.word	0x40005400
 8000988:	10d19ce4 	.word	0x10d19ce4

0800098c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000990:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_I2C2_Init+0x74>)
 8000992:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <MX_I2C2_Init+0x78>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000996:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_I2C2_Init+0x74>)
 8000998:	4a1b      	ldr	r2, [pc, #108]	@ (8000a08 <MX_I2C2_Init+0x7c>)
 800099a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800099c:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_I2C2_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009c6:	480e      	ldr	r0, [pc, #56]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009c8:	f002 f958 	bl	8002c7c <HAL_I2C_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009d2:	f000 faff 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009da:	f003 f817 	bl	8003a0c <HAL_I2CEx_ConfigAnalogFilter>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009e4:	f000 faf6 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_I2C2_Init+0x74>)
 80009ec:	f003 f859 	bl	8003aa2 <HAL_I2CEx_ConfigDigitalFilter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 faed 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000150 	.word	0x20000150
 8000a04:	40005800 	.word	0x40005800
 8000a08:	10d19ce4 	.word	0x10d19ce4

08000a0c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <MX_I2C3_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a18:	4a1b      	ldr	r2, [pc, #108]	@ (8000a88 <MX_I2C3_Init+0x7c>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a46:	480e      	ldr	r0, [pc, #56]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a48:	f002 f918 	bl	8002c7c <HAL_I2C_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a52:	f000 fabf 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4809      	ldr	r0, [pc, #36]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a5a:	f002 ffd7 	bl	8003a0c <HAL_I2CEx_ConfigAnalogFilter>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a64:	f000 fab6 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_I2C3_Init+0x74>)
 8000a6c:	f003 f819 	bl	8003aa2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 faad 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001a4 	.word	0x200001a4
 8000a84:	40005c00 	.word	0x40005c00
 8000a88:	10d19ce4 	.word	0x10d19ce4

08000a8c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000a92:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <MX_LPUART1_UART_Init+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000a98:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <MX_LPUART1_UART_Init+0x58>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aa2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abc:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	@ (8000adc <MX_LPUART1_UART_Init+0x50>)
 8000aca:	f004 fdff 	bl	80056cc <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f000 fa7e 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001f8 	.word	0x200001f8
 8000ae0:	40008000 	.word	0x40008000
 8000ae4:	00033324 	.word	0x00033324

08000ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000aee:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <MX_USART1_UART_Init+0x5c>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af2:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b2c:	f004 fdce 	bl	80056cc <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 fa4d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000280 	.word	0x20000280
 8000b44:	40013800 	.word	0x40013800

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ba4 <MX_USART2_UART_Init+0x5c>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USART2_UART_Init+0x58>)
 8000b8c:	f004 fd9e 	bl	80056cc <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b96:	f000 fa1d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000308 	.word	0x20000308
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <MX_SPI1_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bc2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bf6:	2207      	movs	r2, #7
 8000bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_SPI1_Init+0x74>)
 8000c08:	f004 f990 	bl	8004f2c <HAL_SPI_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 f9df 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000390 	.word	0x20000390
 8000c20:	40013000 	.word	0x40013000

08000c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c42:	4b23      	ldr	r3, [pc, #140]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c44:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <MX_TIM1_Init+0xb0>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c6e:	4818      	ldr	r0, [pc, #96]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c70:	f004 fa56 	bl	8005120 <HAL_TIM_IC_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c7a:	f000 f9ab 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480f      	ldr	r0, [pc, #60]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000c92:	f004 fcb5 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 f99a 	bl	8000fd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <MX_TIM1_Init+0xac>)
 8000cb8:	f004 fa89 	bl	80051ce <HAL_TIM_IC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000cc2:	f000 f987 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200003f4 	.word	0x200003f4
 8000cd4:	40012c00 	.word	0x40012c00

08000cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000cf8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d1e:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000d20:	f004 f9fe 	bl	8005120 <HAL_TIM_IC_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d2a:	f000 f953 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480f      	ldr	r0, [pc, #60]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000d3e:	f004 fc5f 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d48:	f000 f944 	bl	8000fd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d50:	2301      	movs	r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <MX_TIM2_Init+0xa4>)
 8000d64:	f004 fa33 	bl	80051ce <HAL_TIM_IC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d6e:	f000 f931 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000440 	.word	0x20000440

08000d80 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000d94:	4a1e      	ldr	r2, [pc, #120]	@ (8000e10 <MX_TIM16_Init+0x90>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000d98:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000daa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dbe:	4813      	ldr	r0, [pc, #76]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000dc0:	f004 f957 	bl	8005072 <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8000dca:	f000 f903 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000dce:	480f      	ldr	r0, [pc, #60]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000dd0:	f004 f9a6 	bl	8005120 <HAL_TIM_IC_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000dda:	f000 f8fb 	bl	8000fd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000de2:	2301      	movs	r3, #1
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_TIM16_Init+0x8c>)
 8000df6:	f004 f9ea 	bl	80051ce <HAL_TIM_IC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000e00:	f000 f8e8 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000048c 	.word	0x2000048c
 8000e10:	40014400 	.word	0x40014400

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	4b66      	ldr	r3, [pc, #408]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	4a65      	ldr	r2, [pc, #404]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e36:	4b63      	ldr	r3, [pc, #396]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	4b60      	ldr	r3, [pc, #384]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	4a5f      	ldr	r2, [pc, #380]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	4a59      	ldr	r2, [pc, #356]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e66:	4b57      	ldr	r3, [pc, #348]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b54      	ldr	r3, [pc, #336]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	4a53      	ldr	r2, [pc, #332]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7e:	4b51      	ldr	r3, [pc, #324]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc4 <MX_GPIO_Init+0x1b0>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PDIS_PH_EN_GPIO_Port, PDIS_PH_EN_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eaa:	f001 feb5 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PDIS_DO_EN_Pin|PDIS_EC_EN_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f241 0104 	movw	r1, #4100	@ 0x1004
 8000eb4:	4844      	ldr	r0, [pc, #272]	@ (8000fc8 <MX_GPIO_Init+0x1b4>)
 8000eb6:	f001 feaf 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000ec0:	4842      	ldr	r0, [pc, #264]	@ (8000fcc <MX_GPIO_Init+0x1b8>)
 8000ec2:	f001 fea9 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : THERMISTOR_Pin */
  GPIO_InitStruct.Pin = THERMISTOR_Pin;
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(THERMISTOR_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	483c      	ldr	r0, [pc, #240]	@ (8000fcc <MX_GPIO_Init+0x1b8>)
 8000eda:	f001 fd23 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDIS_PH_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_PH_EN_Pin;
 8000ede:	2320      	movs	r3, #32
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PDIS_PH_EN_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef8:	f001 fd14 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC2_Pin */
  GPIO_InitStruct.Pin = OC2_Pin;
 8000efc:	2320      	movs	r3, #32
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC2_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482e      	ldr	r0, [pc, #184]	@ (8000fcc <MX_GPIO_Init+0x1b8>)
 8000f12:	f001 fd07 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : SC1_Pin OC1_Pin WC_EN_Pin */
  GPIO_InitStruct.Pin = SC1_Pin|OC1_Pin|WC_EN_Pin;
 8000f16:	f242 0303 	movw	r3, #8195	@ 0x2003
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4826      	ldr	r0, [pc, #152]	@ (8000fc8 <MX_GPIO_Init+0x1b4>)
 8000f2e:	f001 fcf9 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDIS_DO_EN_Pin PDIS_EC_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_DO_EN_Pin|PDIS_EC_EN_Pin;
 8000f32:	f241 0304 	movw	r3, #4100	@ 0x1004
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	481f      	ldr	r0, [pc, #124]	@ (8000fc8 <MX_GPIO_Init+0x1b4>)
 8000f4c:	f001 fcea 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS232_INV_Pin */
  GPIO_InitStruct.Pin = RS232_INV_Pin;
 8000f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS232_INV_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <MX_GPIO_Init+0x1b8>)
 8000f66:	f001 fcdd 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000f6a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4812      	ldr	r0, [pc, #72]	@ (8000fcc <MX_GPIO_Init+0x1b8>)
 8000f84:	f001 fcce 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : SC2_Pin */
  GPIO_InitStruct.Pin = SC2_Pin;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC2_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_GPIO_Init+0x1bc>)
 8000f9c:	f001 fcc2 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 8000fa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <MX_GPIO_Init+0x1b4>)
 8000fb8:	f001 fcb4 	bl	8002924 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	@ 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000c00 	.word	0x48000c00

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_MspInit+0x44>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fea:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <HAL_MspInit+0x44>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_MspInit+0x44>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x44>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_MspInit+0x44>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	6593      	str	r3, [r2, #88]	@ 0x58
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_MspInit+0x44>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	@ 0x88
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2260      	movs	r2, #96	@ 0x60
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f005 f8af 	bl	80061ac <memset>
  if(hadc->Instance==ADC1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a31      	ldr	r2, [pc, #196]	@ (8001118 <HAL_ADC_MspInit+0xf0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d15b      	bne.n	8001110 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001058:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800105c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800105e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001062:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800106c:	2318      	movs	r3, #24
 800106e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001070:	2307      	movs	r3, #7
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800107c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001080:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fc04 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001092:	f7ff ff9f 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	4a20      	ldr	r2, [pc, #128]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 800109c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	4a1a      	ldr	r2, [pc, #104]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	4a14      	ldr	r2, [pc, #80]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_ADC_MspInit+0xf4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_P_IN_Pin|ADC1_N_IN_Pin|GPIO_PIN_4;
 80010de:	2316      	movs	r3, #22
 80010e0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010e2:	230b      	movs	r3, #11
 80010e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <HAL_ADC_MspInit+0xf8>)
 80010f2:	f001 fc17 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010f6:	2310      	movs	r3, #16
 80010f8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010fa:	230b      	movs	r3, #11
 80010fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110c:	f001 fc0a 	bl	8002924 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001110:	bf00      	nop
 8001112:	3788      	adds	r7, #136	@ 0x88
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	50040000 	.word	0x50040000
 800111c:	40021000 	.word	0x40021000
 8001120:	48000800 	.word	0x48000800

08001124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0a6      	sub	sp, #152	@ 0x98
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001140:	2260      	movs	r2, #96	@ 0x60
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f005 f831 	bl	80061ac <memset>
  if(hi2c->Instance==I2C1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a73      	ldr	r2, [pc, #460]	@ (800131c <HAL_I2C_MspInit+0x1f8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d13b      	bne.n	80011cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001154:	2340      	movs	r3, #64	@ 0x40
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001158:	2300      	movs	r3, #0
 800115a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fb97 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800116c:	f7ff ff32 	bl	8000fd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b6b      	ldr	r3, [pc, #428]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	4a6a      	ldr	r2, [pc, #424]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117c:	4b68      	ldr	r3, [pc, #416]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	623b      	str	r3, [r7, #32]
 8001186:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001188:	23c0      	movs	r3, #192	@ 0xc0
 800118a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118e:	2312      	movs	r3, #18
 8001190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a0:	2304      	movs	r3, #4
 80011a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011aa:	4619      	mov	r1, r3
 80011ac:	485d      	ldr	r0, [pc, #372]	@ (8001324 <HAL_I2C_MspInit+0x200>)
 80011ae:	f001 fbb9 	bl	8002924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 80011b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011be:	4b58      	ldr	r3, [pc, #352]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011ca:	e0a3      	b.n	8001314 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a55      	ldr	r2, [pc, #340]	@ (8001328 <HAL_I2C_MspInit+0x204>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d13c      	bne.n	8001250 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011da:	2300      	movs	r3, #0
 80011dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fb56 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80011ee:	f7ff fef1 	bl	8000fd4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b48      	ldr	r3, [pc, #288]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800120a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800120e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001212:	2312      	movs	r3, #18
 8001214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001224:	2304      	movs	r3, #4
 8001226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800122e:	4619      	mov	r1, r3
 8001230:	483c      	ldr	r0, [pc, #240]	@ (8001324 <HAL_I2C_MspInit+0x200>)
 8001232:	f001 fb77 	bl	8002924 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001236:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	4a39      	ldr	r2, [pc, #228]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001240:	6593      	str	r3, [r2, #88]	@ 0x58
 8001242:	4b37      	ldr	r3, [pc, #220]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
}
 800124e:	e061      	b.n	8001314 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C3)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a35      	ldr	r2, [pc, #212]	@ (800132c <HAL_I2C_MspInit+0x208>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d15c      	bne.n	8001314 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800125a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001260:	2300      	movs	r3, #0
 8001262:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fb13 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8001274:	f7ff feae 	bl	8000fd4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001278:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a28      	ldr	r2, [pc, #160]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a22      	ldr	r2, [pc, #136]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012c0:	2304      	movs	r3, #4
 80012c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80012ca:	4619      	mov	r1, r3
 80012cc:	4818      	ldr	r0, [pc, #96]	@ (8001330 <HAL_I2C_MspInit+0x20c>)
 80012ce:	f001 fb29 	bl	8002924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012d2:	2310      	movs	r3, #16
 80012d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d8:	2312      	movs	r3, #18
 80012da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012ea:	2304      	movs	r3, #4
 80012ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80012f4:	4619      	mov	r1, r3
 80012f6:	480b      	ldr	r0, [pc, #44]	@ (8001324 <HAL_I2C_MspInit+0x200>)
 80012f8:	f001 fb14 	bl	8002924 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 8001302:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001306:	6593      	str	r3, [r2, #88]	@ 0x58
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <HAL_I2C_MspInit+0x1fc>)
 800130a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
}
 8001314:	bf00      	nop
 8001316:	3798      	adds	r7, #152	@ 0x98
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40005400 	.word	0x40005400
 8001320:	40021000 	.word	0x40021000
 8001324:	48000400 	.word	0x48000400
 8001328:	40005800 	.word	0x40005800
 800132c:	40005c00 	.word	0x40005c00
 8001330:	48000800 	.word	0x48000800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0a6      	sub	sp, #152	@ 0x98
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001350:	2260      	movs	r2, #96	@ 0x60
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f004 ff29 	bl	80061ac <memset>
  if(huart->Instance==LPUART1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a80      	ldr	r2, [pc, #512]	@ (8001560 <HAL_UART_MspInit+0x22c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d15e      	bne.n	8001422 <HAL_UART_MspInit+0xee>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001364:	2320      	movs	r3, #32
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001368:	2300      	movs	r3, #0
 800136a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fa8f 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800137c:	f7ff fe2a 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001380:	4b78      	ldr	r3, [pc, #480]	@ (8001564 <HAL_UART_MspInit+0x230>)
 8001382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001384:	4a77      	ldr	r2, [pc, #476]	@ (8001564 <HAL_UART_MspInit+0x230>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800138c:	4b75      	ldr	r3, [pc, #468]	@ (8001564 <HAL_UART_MspInit+0x230>)
 800138e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b72      	ldr	r3, [pc, #456]	@ (8001564 <HAL_UART_MspInit+0x230>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a71      	ldr	r2, [pc, #452]	@ (8001564 <HAL_UART_MspInit+0x230>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013bc:	4b69      	ldr	r3, [pc, #420]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c8:	2308      	movs	r3, #8
 80013ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013e0:	2308      	movs	r3, #8
 80013e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f0:	f001 fa98 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800140e:	2308      	movs	r3, #8
 8001410:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001418:	4619      	mov	r1, r3
 800141a:	4853      	ldr	r0, [pc, #332]	@ (8001568 <HAL_UART_MspInit+0x234>)
 800141c:	f001 fa82 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001420:	e09a      	b.n	8001558 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a51      	ldr	r2, [pc, #324]	@ (800156c <HAL_UART_MspInit+0x238>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d13d      	bne.n	80014a8 <HAL_UART_MspInit+0x174>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800142c:	2301      	movs	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001430:	2300      	movs	r3, #0
 8001432:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fa2b 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8001444:	f7ff fdc6 	bl	8000fd4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001448:	4b46      	ldr	r3, [pc, #280]	@ (8001564 <HAL_UART_MspInit+0x230>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144c:	4a45      	ldr	r2, [pc, #276]	@ (8001564 <HAL_UART_MspInit+0x230>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001452:	6613      	str	r3, [r2, #96]	@ 0x60
 8001454:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <HAL_UART_MspInit+0x230>)
 8001456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <HAL_UART_MspInit+0x230>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	4a3f      	ldr	r2, [pc, #252]	@ (8001564 <HAL_UART_MspInit+0x230>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146c:	4b3d      	ldr	r3, [pc, #244]	@ (8001564 <HAL_UART_MspInit+0x230>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001478:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800147c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001492:	2307      	movs	r3, #7
 8001494:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a2:	f001 fa3f 	bl	8002924 <HAL_GPIO_Init>
}
 80014a6:	e057      	b.n	8001558 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a30      	ldr	r2, [pc, #192]	@ (8001570 <HAL_UART_MspInit+0x23c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d152      	bne.n	8001558 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 f9e8 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80014ca:	f7ff fd83 	bl	8000fd4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ce:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014da:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <HAL_UART_MspInit+0x230>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fe:	2304      	movs	r3, #4
 8001500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001516:	2307      	movs	r3, #7
 8001518:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001526:	f001 f9fd 	bl	8002924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800152a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800152e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001544:	2303      	movs	r3, #3
 8001546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001554:	f001 f9e6 	bl	8002924 <HAL_GPIO_Init>
}
 8001558:	bf00      	nop
 800155a:	3798      	adds	r7, #152	@ 0x98
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40008000 	.word	0x40008000
 8001564:	40021000 	.word	0x40021000
 8001568:	48000400 	.word	0x48000400
 800156c:	40013800 	.word	0x40013800
 8001570:	40004400 	.word	0x40004400

08001574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <HAL_SPI_MspInit+0x7c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d128      	bne.n	80015e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <HAL_SPI_MspInit+0x80>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	4a16      	ldr	r2, [pc, #88]	@ (80015f4 <HAL_SPI_MspInit+0x80>)
 800159c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_SPI_MspInit+0x80>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_SPI_MspInit+0x80>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <HAL_SPI_MspInit+0x80>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_SPI_MspInit+0x80>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80015c6:	23c2      	movs	r3, #194	@ 0xc2
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d6:	2305      	movs	r3, #5
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e4:	f001 f99e 	bl	8002924 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	@ 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40013000 	.word	0x40013000
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	@ 0x30
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2f      	ldr	r2, [pc, #188]	@ (80016d4 <HAL_TIM_IC_MspInit+0xdc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12a      	bne.n	8001670 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161a:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	4a2e      	ldr	r2, [pc, #184]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001620:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001624:	6613      	str	r3, [r2, #96]	@ 0x60
 8001626:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a28      	ldr	r2, [pc, #160]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800164a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800165c:	2301      	movs	r3, #1
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f001 f95b 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800166e:	e02d      	b.n	80016cc <HAL_TIM_IC_MspInit+0xd4>
  else if(htim_ic->Instance==TIM2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001678:	d128      	bne.n	80016cc <HAL_TIM_IC_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	4a16      	ldr	r2, [pc, #88]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6593      	str	r3, [r2, #88]	@ 0x58
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a10      	ldr	r2, [pc, #64]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <HAL_TIM_IC_MspInit+0xe0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ba:	2301      	movs	r3, #1
 80016bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c8:	f001 f92c 	bl	8002924 <HAL_GPIO_Init>
}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	@ 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40012c00 	.word	0x40012c00
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM16)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <HAL_TIM_Base_MspInit+0x7c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d128      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_TIM_Base_MspInit+0x80>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	4a16      	ldr	r2, [pc, #88]	@ (800175c <HAL_TIM_Base_MspInit+0x80>)
 8001704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001708:	6613      	str	r3, [r2, #96]	@ 0x60
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_TIM_Base_MspInit+0x80>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_TIM_Base_MspInit+0x80>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	4a10      	ldr	r2, [pc, #64]	@ (800175c <HAL_TIM_Base_MspInit+0x80>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_TIM_Base_MspInit+0x80>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800172e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001740:	230e      	movs	r3, #14
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <HAL_TIM_Base_MspInit+0x84>)
 800174c:	f001 f8ea 	bl	8002924 <HAL_GPIO_Init>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40014400 	.word	0x40014400
 800175c:	40021000 	.word	0x40021000
 8001760:	48000400 	.word	0x48000400

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <NMI_Handler+0x4>

0800176c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <MemManage_Handler+0x4>

0800177c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <UsageFault_Handler+0x4>

0800178c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ba:	f000 f8d9 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f004 fce2 	bl	80061bc <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20010000 	.word	0x20010000
 8001824:	00000400 	.word	0x00000400
 8001828:	200004e4 	.word	0x200004e4
 800182c:	20000638 	.word	0x20000638

08001830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
/* begin check for flag */

  ldr r0, =0x20000000
 8001854:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
  ldr r1, =0xFFFFFFFF
 8001858:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  ldr r2, [r0, #0]
 800185c:	6802      	ldr	r2, [r0, #0]
  str r0, [r0, #0]
 800185e:	6000      	str	r0, [r0, #0]
  cmp r2, r1
 8001860:	428a      	cmp	r2, r1
  beq Reboot_Loader
 8001862:	d008      	beq.n	8001876 <Reboot_Loader>

/* end check for flag */

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001864:	f7ff ffe4 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	f8df d03c 	ldr.w	sp, [pc, #60]	@ 80018a8 <LoopForever+0x4>
  ldr r0, =_sdata
 800186c:	480f      	ldr	r0, [pc, #60]	@ (80018ac <LoopForever+0x8>)
  ldr r1, =_edata
 800186e:	4910      	ldr	r1, [pc, #64]	@ (80018b0 <LoopForever+0xc>)
  ldr r2, =_sidata
 8001870:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <LoopForever+0x10>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e007      	b.n	8001886 <LoopCopyDataInit>

08001876 <Reboot_Loader>:

/* begin jump to DFU */
Reboot_Loader:
  ldr r0, =0x1fff0000
 8001876:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <LoopForever+0x14>)
  ldr sp, [r0, #0]
 8001878:	f8d0 d000 	ldr.w	sp, [r0]
  ldr r0, [r0, #4]
 800187c:	6840      	ldr	r0, [r0, #4]
  bx r0
 800187e:	4700      	bx	r0

08001880 <CopyDataInit>:
/* end jump to DFU */

CopyDataInit:
  ldr r4, [r2, r3]
 8001880:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001882:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001884:	3304      	adds	r3, #4

08001886 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001886:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001888:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188a:	d3f9      	bcc.n	8001880 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188c:	4a0b      	ldr	r2, [pc, #44]	@ (80018bc <LoopForever+0x18>)
  ldr r4, =_ebss
 800188e:	4c0c      	ldr	r4, [pc, #48]	@ (80018c0 <LoopForever+0x1c>)
  movs r3, #0
 8001890:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001892:	e001      	b.n	8001898 <LoopFillZerobss>

08001894 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001894:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001896:	3204      	adds	r2, #4

08001898 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001898:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189a:	d3fb      	bcc.n	8001894 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189c:	f004 fc94 	bl	80061c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a0:	f7fe fe88 	bl	80005b4 <main>

080018a4 <LoopForever>:

LoopForever:
    b LoopForever
 80018a4:	e7fe      	b.n	80018a4 <LoopForever>
 80018a6:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Set stack pointer */
 80018a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018b4:	08006f34 	.word	0x08006f34
  ldr r0, =0x1fff0000
 80018b8:	1fff0000 	.word	0x1fff0000
  ldr r2, =_sbss
 80018bc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80018c0:	20000634 	.word	0x20000634

080018c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_IRQHandler>

080018c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 fff3 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 f80e 	bl	80018f8 <HAL_InitTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e001      	b.n	80018ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e8:	f7ff fb7a 	bl	8000fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001904:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <HAL_InitTick+0x6c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d023      	beq.n	8001954 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_InitTick+0x70>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_InitTick+0x6c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fff1 	bl	800290a <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10f      	bne.n	800194e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d809      	bhi.n	8001948 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800193c:	f000 ffc9 	bl	80028d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_InitTick+0x74>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e007      	b.n	8001958 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e004      	b.n	8001958 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e001      	b.n	8001958 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000028 	.word	0x20000028
 8001968:	20000020 	.word	0x20000020
 800196c:	20000024 	.word	0x20000024

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000028 	.word	0x20000028
 8001994:	200004e8 	.word	0x200004e8

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200004e8 	.word	0x200004e8

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff ffee 	bl	8001998 <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019ca:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_Delay+0x44>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffde 	bl	8001998 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000028 	.word	0x20000028

080019f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	609a      	str	r2, [r3, #8]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3360      	adds	r3, #96	@ 0x60
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <LL_ADC_SetOffset+0x44>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	03fff000 	.word	0x03fff000

08001aa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3360      	adds	r3, #96	@ 0x60
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3360      	adds	r3, #96	@ 0x60
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001afe:	bf00      	nop
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b087      	sub	sp, #28
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3330      	adds	r3, #48	@ 0x30
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	4413      	add	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	211f      	movs	r1, #31
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0e9b      	lsrs	r3, r3, #26
 8001b42:	f003 011f 	and.w	r1, r3, #31
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b087      	sub	sp, #28
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3314      	adds	r3, #20
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	0e5b      	lsrs	r3, r3, #25
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	0d1b      	lsrs	r3, r3, #20
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	2107      	movs	r1, #7
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	0d1b      	lsrs	r3, r3, #20
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bac:	bf00      	nop
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0318 	and.w	r3, r3, #24
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bdc:	40d9      	lsrs	r1, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	400b      	ands	r3, r1
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	431a      	orrs	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	0007ffff 	.word	0x0007ffff

08001c00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6093      	str	r3, [r2, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c38:	d101      	bne.n	8001c3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c88:	d101      	bne.n	8001c8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <LL_ADC_IsEnabled+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_ADC_IsEnabled+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d101      	bne.n	8001cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d101      	bne.n	8001d00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e126      	b.n	8001f78 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff f975 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff67 	bl	8001c24 <LL_ADC_IsDeepPowerDownEnabled>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff4d 	bl	8001c00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff82 	bl	8001c74 <LL_ADC_IsInternalRegulatorEnabled>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d115      	bne.n	8001da2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff66 	bl	8001c4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d80:	4b7f      	ldr	r3, [pc, #508]	@ (8001f80 <HAL_ADC_Init+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	4a7f      	ldr	r2, [pc, #508]	@ (8001f84 <HAL_ADC_Init+0x274>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d94:	e002      	b.n	8001d9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f9      	bne.n	8001d96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff64 	bl	8001c74 <LL_ADC_IsInternalRegulatorEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10d      	bne.n	8001dce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff75 	bl	8001cc2 <LL_ADC_REG_IsConversionOngoing>
 8001dd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 80bf 	bne.w	8001f66 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 80bb 	bne.w	8001f66 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001df8:	f043 0202 	orr.w	r2, r3, #2
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff49 	bl	8001c9c <LL_ADC_IsEnabled>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10b      	bne.n	8001e28 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e10:	485d      	ldr	r0, [pc, #372]	@ (8001f88 <HAL_ADC_Init+0x278>)
 8001e12:	f7ff ff43 	bl	8001c9c <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4619      	mov	r1, r3
 8001e22:	485a      	ldr	r0, [pc, #360]	@ (8001f8c <HAL_ADC_Init+0x27c>)
 8001e24:	f7ff fde8 	bl	80019f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e5b      	ldrb	r3, [r3, #25]
 8001e2c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e32:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e38:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e3e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e46:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d106      	bne.n	8001e64 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	045b      	lsls	r3, r3, #17
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e78:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	4b42      	ldr	r3, [pc, #264]	@ (8001f90 <HAL_ADC_Init+0x280>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	69b9      	ldr	r1, [r7, #24]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff25 	bl	8001ce8 <LL_ADC_INJ_IsConversionOngoing>
 8001e9e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d13d      	bne.n	8001f22 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d13a      	bne.n	8001f22 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eb0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eb8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ec8:	f023 0302 	bic.w	r3, r3, #2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	69b9      	ldr	r1, [r7, #24]
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d118      	bne.n	8001f12 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001eea:	f023 0304 	bic.w	r3, r3, #4
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001efc:	4311      	orrs	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f02:	430a      	orrs	r2, r1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	e007      	b.n	8001f22 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10c      	bne.n	8001f44 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	f023 010f 	bic.w	r1, r3, #15
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f42:	e007      	b.n	8001f54 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 020f 	bic.w	r2, r2, #15
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f58:	f023 0303 	bic.w	r3, r3, #3
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f64:	e007      	b.n	8001f76 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6a:	f043 0210 	orr.w	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000020 	.word	0x20000020
 8001f84:	053e2d63 	.word	0x053e2d63
 8001f88:	50040000 	.word	0x50040000
 8001f8c:	50040300 	.word	0x50040300
 8001f90:	fff0c007 	.word	0xfff0c007

08001f94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b0b6      	sub	sp, #216	@ 0xd8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x22>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e3bb      	b.n	800272e <HAL_ADC_ConfigChannel+0x79a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fe7d 	bl	8001cc2 <LL_ADC_REG_IsConversionOngoing>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 83a0 	bne.w	8002710 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d824      	bhi.n	800202a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	3b02      	subs	r3, #2
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d81b      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x8e>
 8001fea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <HAL_ADC_ConfigChannel+0x5c>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002009 	.word	0x08002009
 8001ff8:	08002011 	.word	0x08002011
 8001ffc:	08002019 	.word	0x08002019
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002000:	230c      	movs	r3, #12
 8002002:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002006:	e010      	b.n	800202a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002008:	2312      	movs	r3, #18
 800200a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800200e:	e00c      	b.n	800202a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002010:	2318      	movs	r3, #24
 8002012:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002016:	e008      	b.n	800202a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800201c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002020:	e003      	b.n	800202a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002022:	2306      	movs	r3, #6
 8002024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002028:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002038:	f7ff fd67 	bl	8001b0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fe3e 	bl	8001cc2 <LL_ADC_REG_IsConversionOngoing>
 8002046:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fe4a 	bl	8001ce8 <LL_ADC_INJ_IsConversionOngoing>
 8002054:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 81a4 	bne.w	80023aa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 819f 	bne.w	80023aa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	461a      	mov	r2, r3
 800207a:	f7ff fd72 	bl	8001b62 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d00a      	beq.n	80020b6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6919      	ldr	r1, [r3, #16]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020b0:	f7ff fcd6 	bl	8001a60 <LL_ADC_SetOffset>
 80020b4:	e179      	b.n	80023aa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fcf3 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10a      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x14e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fce8 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	0e9b      	lsrs	r3, r3, #26
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	e01e      	b.n	8002120 <HAL_ADC_ConfigChannel+0x18c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fcdd 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002104:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e004      	b.n	800211e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002114:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1a4>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e9b      	lsrs	r3, r3, #26
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	e018      	b.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800214c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e004      	b.n	800216a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800216a:	429a      	cmp	r2, r3
 800216c:	d106      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fcac 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fc90 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x214>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2101      	movs	r1, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fc85 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 021f 	and.w	r2, r3, #31
 80021a6:	e01e      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x252>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2101      	movs	r1, #1
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fc7a 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80021c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80021ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80021d6:	2320      	movs	r3, #32
 80021d8:	e004      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80021da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x26a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	0e9b      	lsrs	r3, r3, #26
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	e018      	b.n	8002230 <HAL_ADC_ConfigChannel+0x29c>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002212:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002216:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800221a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e004      	b.n	8002230 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002226:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002230:	429a      	cmp	r2, r3
 8002232:	d106      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fc49 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2102      	movs	r1, #2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc2d 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10a      	bne.n	800226e <HAL_ADC_ConfigChannel+0x2da>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2102      	movs	r1, #2
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fc22 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	0e9b      	lsrs	r3, r3, #26
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	e01e      	b.n	80022ac <HAL_ADC_ConfigChannel+0x318>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2102      	movs	r1, #2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fc17 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800228c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002290:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800229c:	2320      	movs	r3, #32
 800229e:	e004      	b.n	80022aa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x330>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	e014      	b.n	80022ee <HAL_ADC_ConfigChannel+0x35a>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80022d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80022d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80022e0:	2320      	movs	r3, #32
 80022e2:	e004      	b.n	80022ee <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80022e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d106      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2102      	movs	r1, #2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fbea 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2103      	movs	r1, #3
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fbce 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_ADC_ConfigChannel+0x398>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2103      	movs	r1, #3
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fbc3 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	f003 021f 	and.w	r2, r3, #31
 800232a:	e017      	b.n	800235c <HAL_ADC_ConfigChannel+0x3c8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2103      	movs	r1, #3
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fbb8 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002346:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e003      	b.n	800235a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x3e0>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	e011      	b.n	8002398 <HAL_ADC_ConfigChannel+0x404>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002384:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002386:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800238c:	2320      	movs	r3, #32
 800238e:	e003      	b.n	8002398 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2103      	movs	r1, #3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fb95 	bl	8001ad4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fc74 	bl	8001c9c <LL_ADC_IsEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 8140 	bne.w	800263c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f7ff fbf5 	bl	8001bb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a8f      	ldr	r2, [pc, #572]	@ (8002610 <HAL_ADC_ConfigChannel+0x67c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	f040 8131 	bne.w	800263c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x46e>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2b09      	cmp	r3, #9
 80023f8:	bf94      	ite	ls
 80023fa:	2301      	movls	r3, #1
 80023fc:	2300      	movhi	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e019      	b.n	8002436 <HAL_ADC_ConfigChannel+0x4a2>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002412:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e003      	b.n	8002426 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800241e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2b09      	cmp	r3, #9
 800242e:	bf94      	ite	ls
 8002430:	2301      	movls	r3, #1
 8002432:	2300      	movhi	r3, #0
 8002434:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002436:	2b00      	cmp	r3, #0
 8002438:	d079      	beq.n	800252e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x4c2>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	3301      	adds	r3, #1
 800244e:	069b      	lsls	r3, r3, #26
 8002450:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002454:	e015      	b.n	8002482 <HAL_ADC_ConfigChannel+0x4ee>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002466:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800246e:	2320      	movs	r3, #32
 8002470:	e003      	b.n	800247a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3301      	adds	r3, #1
 800247c:	069b      	lsls	r3, r3, #26
 800247e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x50e>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	3301      	adds	r3, #1
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	e017      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x53e>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e003      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	ea42 0103 	orr.w	r1, r2, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x564>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 021f 	and.w	r2, r3, #31
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	051b      	lsls	r3, r3, #20
 80024f6:	e018      	b.n	800252a <HAL_ADC_ConfigChannel+0x596>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800250a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e003      	b.n	800251c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	3301      	adds	r3, #1
 800251e:	f003 021f 	and.w	r2, r3, #31
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252a:	430b      	orrs	r3, r1
 800252c:	e081      	b.n	8002632 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d107      	bne.n	800254a <HAL_ADC_ConfigChannel+0x5b6>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	3301      	adds	r3, #1
 8002542:	069b      	lsls	r3, r3, #26
 8002544:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002548:	e015      	b.n	8002576 <HAL_ADC_ConfigChannel+0x5e2>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800255c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e003      	b.n	800256e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3301      	adds	r3, #1
 8002570:	069b      	lsls	r3, r3, #26
 8002572:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x602>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	3301      	adds	r3, #1
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	e017      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x632>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	61bb      	str	r3, [r7, #24]
  return result;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e003      	b.n	80025ba <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	ea42 0103 	orr.w	r1, r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10d      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x65e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 021f 	and.w	r2, r3, #31
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	3b1e      	subs	r3, #30
 80025ea:	051b      	lsls	r3, r3, #20
 80025ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025f0:	e01e      	b.n	8002630 <HAL_ADC_ConfigChannel+0x69c>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	60fb      	str	r3, [r7, #12]
  return result;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d104      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800260a:	2320      	movs	r3, #32
 800260c:	e006      	b.n	800261c <HAL_ADC_ConfigChannel+0x688>
 800260e:	bf00      	nop
 8002610:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	3b1e      	subs	r3, #30
 800262a:	051b      	lsls	r3, r3, #20
 800262c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002630:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002636:	4619      	mov	r1, r3
 8002638:	f7ff fa93 	bl	8001b62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <HAL_ADC_ConfigChannel+0x7a4>)
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d06c      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002648:	483c      	ldr	r0, [pc, #240]	@ (800273c <HAL_ADC_ConfigChannel+0x7a8>)
 800264a:	f7ff f9fb 	bl	8001a44 <LL_ADC_GetCommonPathInternalCh>
 800264e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3a      	ldr	r2, [pc, #232]	@ (8002740 <HAL_ADC_ConfigChannel+0x7ac>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d127      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800265c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d121      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a35      	ldr	r2, [pc, #212]	@ (8002744 <HAL_ADC_ConfigChannel+0x7b0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d157      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002676:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800267a:	4619      	mov	r1, r3
 800267c:	482f      	ldr	r0, [pc, #188]	@ (800273c <HAL_ADC_ConfigChannel+0x7a8>)
 800267e:	f7ff f9ce 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002682:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <HAL_ADC_ConfigChannel+0x7b4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	4a30      	ldr	r2, [pc, #192]	@ (800274c <HAL_ADC_ConfigChannel+0x7b8>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	099b      	lsrs	r3, r3, #6
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800269c:	e002      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f9      	bne.n	800269e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026aa:	e03a      	b.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a27      	ldr	r2, [pc, #156]	@ (8002750 <HAL_ADC_ConfigChannel+0x7bc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d113      	bne.n	80026de <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002744 <HAL_ADC_ConfigChannel+0x7b0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d12a      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d4:	4619      	mov	r1, r3
 80026d6:	4819      	ldr	r0, [pc, #100]	@ (800273c <HAL_ADC_ConfigChannel+0x7a8>)
 80026d8:	f7ff f9a1 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026dc:	e021      	b.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <HAL_ADC_ConfigChannel+0x7c0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d11c      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d116      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a12      	ldr	r2, [pc, #72]	@ (8002744 <HAL_ADC_ConfigChannel+0x7b0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d111      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002702:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002706:	4619      	mov	r1, r3
 8002708:	480c      	ldr	r0, [pc, #48]	@ (800273c <HAL_ADC_ConfigChannel+0x7a8>)
 800270a:	f7ff f988 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
 800270e:	e008      	b.n	8002722 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	f043 0220 	orr.w	r2, r3, #32
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800272a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800272e:	4618      	mov	r0, r3
 8002730:	37d8      	adds	r7, #216	@ 0xd8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	80080000 	.word	0x80080000
 800273c:	50040300 	.word	0x50040300
 8002740:	c7520000 	.word	0xc7520000
 8002744:	50040000 	.word	0x50040000
 8002748:	20000020 	.word	0x20000020
 800274c:	053e2d63 	.word	0x053e2d63
 8002750:	cb840000 	.word	0xcb840000
 8002754:	80000001 	.word	0x80000001

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	@ (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	@ (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002888:	d301      	bcc.n	800288e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <SysTick_Config+0x40>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002896:	210f      	movs	r1, #15
 8002898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800289c:	f7ff ff8e 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <SysTick_Config+0x40>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <SysTick_Config+0x40>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff47 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028e4:	f7ff ff5c 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 80028e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff8e 	bl	8002810 <NVIC_EncodePriority>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff5d 	bl	80027bc <__NVIC_SetPriority>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffb0 	bl	8002878 <SysTick_Config>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002932:	e154      	b.n	8002bde <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8146 	beq.w	8002bd8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d005      	beq.n	8002964 <HAL_GPIO_Init+0x40>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d130      	bne.n	80029c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800299a:	2201      	movs	r2, #1
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 0201 	and.w	r2, r3, #1
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d017      	beq.n	8002a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2203      	movs	r2, #3
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d123      	bne.n	8002a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	08da      	lsrs	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3208      	adds	r2, #8
 8002a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	6939      	ldr	r1, [r7, #16]
 8002a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0203 	and.w	r2, r3, #3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80a0 	beq.w	8002bd8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a98:	4b58      	ldr	r3, [pc, #352]	@ (8002bfc <HAL_GPIO_Init+0x2d8>)
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9c:	4a57      	ldr	r2, [pc, #348]	@ (8002bfc <HAL_GPIO_Init+0x2d8>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aa4:	4b55      	ldr	r3, [pc, #340]	@ (8002bfc <HAL_GPIO_Init+0x2d8>)
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab0:	4a53      	ldr	r2, [pc, #332]	@ (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ada:	d019      	beq.n	8002b10 <HAL_GPIO_Init+0x1ec>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a49      	ldr	r2, [pc, #292]	@ (8002c04 <HAL_GPIO_Init+0x2e0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_GPIO_Init+0x1e8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a48      	ldr	r2, [pc, #288]	@ (8002c08 <HAL_GPIO_Init+0x2e4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00d      	beq.n	8002b08 <HAL_GPIO_Init+0x1e4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a47      	ldr	r2, [pc, #284]	@ (8002c0c <HAL_GPIO_Init+0x2e8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <HAL_GPIO_Init+0x1e0>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a46      	ldr	r2, [pc, #280]	@ (8002c10 <HAL_GPIO_Init+0x2ec>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_GPIO_Init+0x1dc>
 8002afc:	2304      	movs	r3, #4
 8002afe:	e008      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b00:	2307      	movs	r3, #7
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b04:	2303      	movs	r3, #3
 8002b06:	e004      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b10:	2300      	movs	r3, #0
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b22:	4937      	ldr	r1, [pc, #220]	@ (8002c00 <HAL_GPIO_Init+0x2dc>)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b30:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b54:	4a2f      	ldr	r2, [pc, #188]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b7e:	4a25      	ldr	r2, [pc, #148]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b84:	4b23      	ldr	r3, [pc, #140]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bae:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bd2:	4a10      	ldr	r2, [pc, #64]	@ (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f aea3 	bne.w	8002934 <HAL_GPIO_Init+0x10>
  }
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010000 	.word	0x40010000
 8002c04:	48000400 	.word	0x48000400
 8002c08:	48000800 	.word	0x48000800
 8002c0c:	48000c00 	.word	0x48000c00
 8002c10:	48001000 	.word	0x48001000
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c34:	e002      	b.n	8002c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	43d9      	mvns	r1, r3
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	400b      	ands	r3, r1
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e08d      	b.n	8002daa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fa3e 	bl	8001124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	@ 0x24
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ccc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e006      	b.n	8002d04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d108      	bne.n	8002d1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	e007      	b.n	8002d2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b0b2      	sub	sp, #200	@ 0xc8
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	817b      	strh	r3, [r7, #10]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	813b      	strh	r3, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  UART_HandleTypeDef huart2;

  char tx_buff[32] = "Test!\r\n\ "; 
 8002dce:	4aa7      	ldr	r2, [pc, #668]	@ (800306c <HAL_I2C_Mem_Write+0x2b8>)
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dd6:	c303      	stmia	r3!, {r0, r1}
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	f107 031d 	add.w	r3, r7, #29
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	f8c3 2013 	str.w	r2, [r3, #19]
  
  huart2.Instance = USART2;
 8002dee:	4ba0      	ldr	r3, [pc, #640]	@ (8003070 <HAL_I2C_Mem_Write+0x2bc>)
 8002df0:	637b      	str	r3, [r7, #52]	@ 0x34
  huart2.Init.BaudRate = 115200;
 8002df2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	647b      	str	r3, [r7, #68]	@ 0x44
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e04:	230c      	movs	r3, #12
 8002e06:	64bb      	str	r3, [r7, #72]	@ 0x48
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	653b      	str	r3, [r7, #80]	@ 0x50
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	657b      	str	r3, [r7, #84]	@ 0x54
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e14:	2300      	movs	r3, #0
 8002e16:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	f040 811e 	bne.w	8003062 <HAL_I2C_Mem_Write+0x2ae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_I2C_Mem_Write+0x82>
 8002e2e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d11c      	bne.n	8002e70 <HAL_I2C_Mem_Write+0xbc>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44

      sprintf(tx_buff, "%c\r\n", hi2c->ErrorCode);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	498b      	ldr	r1, [pc, #556]	@ (8003074 <HAL_I2C_Mem_Write+0x2c0>)
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 f98d 	bl	8006168 <siprintf>
      HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd f99c 	bl	8000190 <strlen>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	f107 0114 	add.w	r1, r7, #20
 8002e60:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e68:	f002 fc7e 	bl	8005768 <HAL_UART_Transmit>
      
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0f9      	b.n	8003064 <HAL_I2C_Mem_Write+0x2b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Mem_Write+0xca>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0f2      	b.n	8003064 <HAL_I2C_Mem_Write+0x2b0>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e86:	f7fe fd87 	bl	8001998 <HAL_GetTick>
 8002e8a:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	2319      	movs	r3, #25
 8002e96:	2201      	movs	r2, #1
 8002e98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fbbf 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Write+0xf8>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0db      	b.n	8003064 <HAL_I2C_Mem_Write+0x2b0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2221      	movs	r2, #33	@ 0x21
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2240      	movs	r2, #64	@ 0x40
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8002ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed8:	88f8      	ldrh	r0, [r7, #6]
 8002eda:	893a      	ldrh	r2, [r7, #8]
 8002edc:	8979      	ldrh	r1, [r7, #10]
 8002ede:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	4603      	mov	r3, r0
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 facb 	bl	8003488 <I2C_RequestMemoryWrite>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_I2C_Mem_Write+0x150>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0af      	b.n	8003064 <HAL_I2C_Mem_Write+0x2b0>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2bff      	cmp	r3, #255	@ 0xff
 8002f0c:	d90e      	bls.n	8002f2c <HAL_I2C_Mem_Write+0x178>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	22ff      	movs	r2, #255	@ 0xff
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fd3f 	bl	80039a8 <I2C_TransferConfig>
 8002f2a:	e00f      	b.n	8002f4c <HAL_I2C_Mem_Write+0x198>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fd2e 	bl	80039a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002f50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fbbc 	bl	80036d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Mem_Write+0x1b0>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e07f      	b.n	8003064 <HAL_I2C_Mem_Write+0x2b0>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d036      	beq.n	800300c <HAL_I2C_Mem_Write+0x258>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d132      	bne.n	800300c <HAL_I2C_Mem_Write+0x258>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2180      	movs	r1, #128	@ 0x80
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fb33 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0x210>
        {
          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e04f      	b.n	8003064 <HAL_I2C_Mem_Write+0x2b0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2bff      	cmp	r3, #255	@ 0xff
 8002fcc:	d90e      	bls.n	8002fec <HAL_I2C_Mem_Write+0x238>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	22ff      	movs	r2, #255	@ 0xff
 8002fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	8979      	ldrh	r1, [r7, #10]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fcdf 	bl	80039a8 <I2C_TransferConfig>
 8002fea:	e00f      	b.n	800300c <HAL_I2C_Mem_Write+0x258>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	8979      	ldrh	r1, [r7, #10]
 8002ffe:	2300      	movs	r3, #0
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fcce 	bl	80039a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d19a      	bne.n	8002f4c <HAL_I2C_Mem_Write+0x198>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003016:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800301a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fb9e 	bl	8003760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Mem_Write+0x27a>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01a      	b.n	8003064 <HAL_I2C_Mem_Write+0x2b0>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2220      	movs	r2, #32
 8003034:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <HAL_I2C_Mem_Write+0x2c4>)
 8003042:	400b      	ands	r3, r1
 8003044:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_I2C_Mem_Write+0x2b0>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	37c0      	adds	r7, #192	@ 0xc0
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	08006e88 	.word	0x08006e88
 8003070:	40004400 	.word	0x40004400
 8003074:	08006e80 	.word	0x08006e80
 8003078:	fe00e800 	.word	0xfe00e800

0800307c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	817b      	strh	r3, [r7, #10]
 800308e:	460b      	mov	r3, r1
 8003090:	813b      	strh	r3, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	f040 80fd 	bne.w	800329e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x34>
 80030aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0f1      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_I2C_Mem_Read+0x4e>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e0ea      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030d2:	f7fe fc61 	bl	8001998 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2319      	movs	r3, #25
 80030de:	2201      	movs	r2, #1
 80030e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fa9b 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d5      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2222      	movs	r2, #34	@ 0x22
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2240      	movs	r2, #64	@ 0x40
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003114:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800311c:	88f8      	ldrh	r0, [r7, #6]
 800311e:	893a      	ldrh	r2, [r7, #8]
 8003120:	8979      	ldrh	r1, [r7, #10]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4603      	mov	r3, r0
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f9ff 	bl	8003530 <I2C_RequestMemoryRead>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0ad      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2bff      	cmp	r3, #255	@ 0xff
 800314c:	d90e      	bls.n	800316c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	b2da      	uxtb	r2, r3
 800315a:	8979      	ldrh	r1, [r7, #10]
 800315c:	4b52      	ldr	r3, [pc, #328]	@ (80032a8 <HAL_I2C_Mem_Read+0x22c>)
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fc1f 	bl	80039a8 <I2C_TransferConfig>
 800316a:	e00f      	b.n	800318c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317a:	b2da      	uxtb	r2, r3
 800317c:	8979      	ldrh	r1, [r7, #10]
 800317e:	4b4a      	ldr	r3, [pc, #296]	@ (80032a8 <HAL_I2C_Mem_Read+0x22c>)
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fc0e 	bl	80039a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003192:	2200      	movs	r2, #0
 8003194:	2104      	movs	r1, #4
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fa42 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07c      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d034      	beq.n	800324c <HAL_I2C_Mem_Read+0x1d0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d130      	bne.n	800324c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fa13 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e04d      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2bff      	cmp	r3, #255	@ 0xff
 800320c:	d90e      	bls.n	800322c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	b2da      	uxtb	r2, r3
 800321a:	8979      	ldrh	r1, [r7, #10]
 800321c:	2300      	movs	r3, #0
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fbbf 	bl	80039a8 <I2C_TransferConfig>
 800322a:	e00f      	b.n	800324c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323a:	b2da      	uxtb	r2, r3
 800323c:	8979      	ldrh	r1, [r7, #10]
 800323e:	2300      	movs	r3, #0
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fbae 	bl	80039a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d19a      	bne.n	800318c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa80 	bl	8003760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e01a      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2220      	movs	r2, #32
 8003270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_I2C_Mem_Read+0x230>)
 800327e:	400b      	ands	r3, r1
 8003280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	80002400 	.word	0x80002400
 80032ac:	fe00e800 	.word	0xfe00e800

080032b0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	f040 80d6 	bne.w	800347e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e0:	d101      	bne.n	80032e6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0cc      	b.n	8003480 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2C_IsDeviceReady+0x44>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0c5      	b.n	8003480 <HAL_I2C_IsDeviceReady+0x1d0>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2224      	movs	r2, #36	@ 0x24
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_I2C_IsDeviceReady+0x72>
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003318:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800331c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003320:	e006      	b.n	8003330 <HAL_I2C_IsDeviceReady+0x80>
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003328:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800332c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003336:	f7fe fb2f 	bl	8001998 <HAL_GetTick>
 800333a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b10      	cmp	r3, #16
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003368:	e034      	b.n	80033d4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003370:	d01a      	beq.n	80033a8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7fe fb11 	bl	8001998 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <HAL_I2C_IsDeviceReady+0xd8>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10f      	bne.n	80033a8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e06b      	b.n	8003480 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_I2C_IsDeviceReady+0x130>
 80033da:	7fbb      	ldrb	r3, [r7, #30]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0c4      	beq.n	800336a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d01a      	beq.n	8003424 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2120      	movs	r1, #32
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f911 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e03b      	b.n	8003480 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2220      	movs	r2, #32
 800340e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e02d      	b.n	8003480 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	2120      	movs	r1, #32
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f8f6 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e020      	b.n	8003480 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2210      	movs	r2, #16
 8003444:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2220      	movs	r2, #32
 800344c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3301      	adds	r3, #1
 8003452:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	f63f af56 	bhi.w	800330a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800347e:	2302      	movs	r3, #2
  }
}
 8003480:	4618      	mov	r0, r3
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	460b      	mov	r3, r1
 800349c:	813b      	strh	r3, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	8979      	ldrh	r1, [r7, #10]
 80034a8:	4b20      	ldr	r3, [pc, #128]	@ (800352c <I2C_RequestMemoryWrite+0xa4>)
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fa79 	bl	80039a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	69b9      	ldr	r1, [r7, #24]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f909 	bl	80036d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e02c      	b.n	8003524 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034d0:	893b      	ldrh	r3, [r7, #8]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80034da:	e015      	b.n	8003508 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034dc:	893b      	ldrh	r3, [r7, #8]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f8ef 	bl	80036d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e012      	b.n	8003524 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034fe:	893b      	ldrh	r3, [r7, #8]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2200      	movs	r2, #0
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f884 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	80002000 	.word	0x80002000

08003530 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	460b      	mov	r3, r1
 8003544:	813b      	strh	r3, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	8979      	ldrh	r1, [r7, #10]
 8003550:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <I2C_RequestMemoryRead+0xa4>)
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2300      	movs	r3, #0
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fa26 	bl	80039a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f8b6 	bl	80036d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e02c      	b.n	80035ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d105      	bne.n	8003582 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003580:	e015      	b.n	80035ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003582:	893b      	ldrh	r3, [r7, #8]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	b29b      	uxth	r3, r3
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	69b9      	ldr	r1, [r7, #24]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f89c 	bl	80036d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e012      	b.n	80035ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035a4:	893b      	ldrh	r3, [r7, #8]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2200      	movs	r2, #0
 80035b6:	2140      	movs	r1, #64	@ 0x40
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f831 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	80002000 	.word	0x80002000

080035d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d103      	bne.n	80035f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d007      	beq.n	8003614 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	619a      	str	r2, [r3, #24]
  }
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003630:	e03b      	b.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f8d6 	bl	80037e8 <I2C_IsErrorOccurred>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e041      	b.n	80036ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800364c:	d02d      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe f9a3 	bl	8001998 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x44>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d122      	bne.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d113      	bne.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e00f      	b.n	80036ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4013      	ands	r3, r2
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	bf0c      	ite	eq
 80036ba:	2301      	moveq	r3, #1
 80036bc:	2300      	movne	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d0b4      	beq.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036de:	e033      	b.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f87f 	bl	80037e8 <I2C_IsErrorOccurred>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e031      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036fa:	d025      	beq.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fc:	f7fe f94c 	bl	8001998 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11a      	bne.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b02      	cmp	r3, #2
 800371e:	d013      	beq.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e007      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d1c4      	bne.n	80036e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	e02f      	b.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f838 	bl	80037e8 <I2C_IsErrorOccurred>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02d      	b.n	80037de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7fe f909 	bl	8001998 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11a      	bne.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d013      	beq.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d1c8      	bne.n	800376e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	@ 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d068      	beq.n	80038e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2210      	movs	r2, #16
 800381a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800381c:	e049      	b.n	80038b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003824:	d045      	beq.n	80038b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe f8b7 	bl	8001998 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_IsErrorOccurred+0x54>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d13a      	bne.n	80038b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003846:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800384e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800385a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385e:	d121      	bne.n	80038a4 <I2C_IsErrorOccurred+0xbc>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003866:	d01d      	beq.n	80038a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b20      	cmp	r3, #32
 800386c:	d01a      	beq.n	80038a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800387c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800387e:	f7fe f88b 	bl	8001998 <HAL_GetTick>
 8003882:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003884:	e00e      	b.n	80038a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003886:	f7fe f887 	bl	8001998 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b19      	cmp	r3, #25
 8003892:	d907      	bls.n	80038a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f043 0320 	orr.w	r3, r3, #32
 800389a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038a2:	e006      	b.n	80038b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d1e9      	bne.n	8003886 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d003      	beq.n	80038c8 <I2C_IsErrorOccurred+0xe0>
 80038c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0aa      	beq.n	800381e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d103      	bne.n	80038d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2220      	movs	r2, #32
 80038d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	f043 0304 	orr.w	r3, r3, #4
 80038de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003908:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800394c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01c      	beq.n	8003996 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff fe3b 	bl	80035d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <I2C_IsErrorOccurred+0x1bc>)
 800396e:	400b      	ands	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	431a      	orrs	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800399a:	4618      	mov	r0, r3
 800399c:	3728      	adds	r7, #40	@ 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	fe00e800 	.word	0xfe00e800

080039a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	4613      	mov	r3, r2
 80039b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039c0:	7a7b      	ldrb	r3, [r7, #9]
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	0d5b      	lsrs	r3, r3, #21
 80039e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039e6:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <I2C_TransferConfig+0x60>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	43db      	mvns	r3, r3
 80039ec:	ea02 0103 	and.w	r1, r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	03ff63ff 	.word	0x03ff63ff

08003a0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d138      	bne.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e032      	b.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	@ 0x24
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d139      	bne.n	8003b2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e033      	b.n	8003b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2224      	movs	r2, #36	@ 0x24
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003af4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b40:	4b05      	ldr	r3, [pc, #20]	@ (8003b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40007000 	.word	0x40007000

08003b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b60:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40007000 	.word	0x40007000

08003b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b86:	d130      	bne.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b88:	4b23      	ldr	r3, [pc, #140]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b94:	d038      	beq.n	8003c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b96:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ba0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2232      	movs	r2, #50	@ 0x32
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0c9b      	lsrs	r3, r3, #18
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bbc:	e002      	b.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc4:	4b14      	ldr	r3, [pc, #80]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd0:	d102      	bne.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f2      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be4:	d110      	bne.n	8003c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e00f      	b.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf6:	d007      	beq.n	8003c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bf8:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c00:	4a05      	ldr	r2, [pc, #20]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	20000020 	.word	0x20000020
 8003c20:	431bde83 	.word	0x431bde83

08003c24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f000 bc02 	b.w	800443c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c38:	4b96      	ldr	r3, [pc, #600]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c42:	4b94      	ldr	r3, [pc, #592]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80e4 	beq.w	8003e22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4c>
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	f040 808b 	bne.w	8003d7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	f040 8087 	bne.w	8003d7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c70:	4b88      	ldr	r3, [pc, #544]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_OscConfig+0x64>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e3d9      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1a      	ldr	r2, [r3, #32]
 8003c8c:	4b81      	ldr	r3, [pc, #516]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x7e>
 8003c98:	4b7e      	ldr	r3, [pc, #504]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca0:	e005      	b.n	8003cae <HAL_RCC_OscConfig+0x8a>
 8003ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d223      	bcs.n	8003cfa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fd8c 	bl	80047d4 <RCC_SetFlashLatencyFromMSIRange>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e3ba      	b.n	800443c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc6:	4b73      	ldr	r3, [pc, #460]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a72      	ldr	r2, [pc, #456]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b70      	ldr	r3, [pc, #448]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	496d      	ldr	r1, [pc, #436]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce4:	4b6b      	ldr	r3, [pc, #428]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	4968      	ldr	r1, [pc, #416]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
 8003cf8:	e025      	b.n	8003d46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cfa:	4b66      	ldr	r3, [pc, #408]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a65      	ldr	r2, [pc, #404]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d00:	f043 0308 	orr.w	r3, r3, #8
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b63      	ldr	r3, [pc, #396]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	4960      	ldr	r1, [pc, #384]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d18:	4b5e      	ldr	r3, [pc, #376]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	495b      	ldr	r1, [pc, #364]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fd4c 	bl	80047d4 <RCC_SetFlashLatencyFromMSIRange>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e37a      	b.n	800443c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d46:	f000 fc81 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4b51      	ldr	r3, [pc, #324]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	4950      	ldr	r1, [pc, #320]	@ (8003e98 <HAL_RCC_OscConfig+0x274>)
 8003d58:	5ccb      	ldrb	r3, [r1, r3]
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a4e      	ldr	r2, [pc, #312]	@ (8003e9c <HAL_RCC_OscConfig+0x278>)
 8003d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d66:	4b4e      	ldr	r3, [pc, #312]	@ (8003ea0 <HAL_RCC_OscConfig+0x27c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fdc4 	bl	80018f8 <HAL_InitTick>
 8003d70:	4603      	mov	r3, r0
 8003d72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d052      	beq.n	8003e20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	e35e      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d032      	beq.n	8003dec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d86:	4b43      	ldr	r3, [pc, #268]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a42      	ldr	r2, [pc, #264]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d92:	f7fd fe01 	bl	8001998 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d9a:	f7fd fdfd 	bl	8001998 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e347      	b.n	800443c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dac:	4b39      	ldr	r3, [pc, #228]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003db8:	4b36      	ldr	r3, [pc, #216]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a35      	ldr	r2, [pc, #212]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	f043 0308 	orr.w	r3, r3, #8
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4b33      	ldr	r3, [pc, #204]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4930      	ldr	r1, [pc, #192]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	492b      	ldr	r1, [pc, #172]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
 8003dea:	e01a      	b.n	8003e22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dec:	4b29      	ldr	r3, [pc, #164]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a28      	ldr	r2, [pc, #160]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003df8:	f7fd fdce 	bl	8001998 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e00:	f7fd fdca 	bl	8001998 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e314      	b.n	800443c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e12:	4b20      	ldr	r3, [pc, #128]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x1dc>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d073      	beq.n	8003f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_OscConfig+0x21c>
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d10e      	bne.n	8003e58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	4b14      	ldr	r3, [pc, #80]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d063      	beq.n	8003f14 <HAL_RCC_OscConfig+0x2f0>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d15f      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e2f1      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e60:	d106      	bne.n	8003e70 <HAL_RCC_OscConfig+0x24c>
 8003e62:	4b0c      	ldr	r3, [pc, #48]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a0b      	ldr	r2, [pc, #44]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e025      	b.n	8003ebc <HAL_RCC_OscConfig+0x298>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e78:	d114      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x280>
 8003e7a:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a05      	ldr	r2, [pc, #20]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b03      	ldr	r3, [pc, #12]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a02      	ldr	r2, [pc, #8]	@ (8003e94 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e013      	b.n	8003ebc <HAL_RCC_OscConfig+0x298>
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08006ea8 	.word	0x08006ea8
 8003e9c:	20000020 	.word	0x20000020
 8003ea0:	20000024 	.word	0x20000024
 8003ea4:	4ba0      	ldr	r3, [pc, #640]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a9f      	ldr	r2, [pc, #636]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b9d      	ldr	r3, [pc, #628]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a9c      	ldr	r2, [pc, #624]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fd68 	bl	8001998 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fd fd64 	bl	8001998 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	@ 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e2ae      	b.n	800443c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	4b92      	ldr	r3, [pc, #584]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x2a8>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd fd54 	bl	8001998 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fd50 	bl	8001998 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	@ 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e29a      	b.n	800443c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f06:	4b88      	ldr	r3, [pc, #544]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x2d0>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d060      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_OscConfig+0x310>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d119      	bne.n	8003f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d116      	bne.n	8003f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	4b7c      	ldr	r3, [pc, #496]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_OscConfig+0x328>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e277      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b76      	ldr	r3, [pc, #472]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	4973      	ldr	r1, [pc, #460]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f60:	e040      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d023      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fd fd0f 	bl	8001998 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fd fd0b 	bl	8001998 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e255      	b.n	800443c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f90:	4b65      	ldr	r3, [pc, #404]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b62      	ldr	r3, [pc, #392]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	495f      	ldr	r1, [pc, #380]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
 8003fb0:	e018      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a5c      	ldr	r2, [pc, #368]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fd fceb 	bl	8001998 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc6:	f7fd fce7 	bl	8001998 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e231      	b.n	800443c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd8:	4b53      	ldr	r3, [pc, #332]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03c      	beq.n	800406a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01c      	beq.n	8004032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fd fcc6 	bl	8001998 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004010:	f7fd fcc2 	bl	8001998 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e20c      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004022:	4b41      	ldr	r3, [pc, #260]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ef      	beq.n	8004010 <HAL_RCC_OscConfig+0x3ec>
 8004030:	e01b      	b.n	800406a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004032:	4b3d      	ldr	r3, [pc, #244]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8004034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004038:	4a3b      	ldr	r2, [pc, #236]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004042:	f7fd fca9 	bl	8001998 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404a:	f7fd fca5 	bl	8001998 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1ef      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800405c:	4b32      	ldr	r3, [pc, #200]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ef      	bne.n	800404a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80a6 	beq.w	80041c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800407c:	4b2a      	ldr	r3, [pc, #168]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10d      	bne.n	80040a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004088:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408c:	4a26      	ldr	r2, [pc, #152]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004092:	6593      	str	r3, [r2, #88]	@ 0x58
 8004094:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a0:	2301      	movs	r3, #1
 80040a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a4:	4b21      	ldr	r3, [pc, #132]	@ (800412c <HAL_RCC_OscConfig+0x508>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d118      	bne.n	80040e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b0:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <HAL_RCC_OscConfig+0x508>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <HAL_RCC_OscConfig+0x508>)
 80040b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040bc:	f7fd fc6c 	bl	8001998 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c4:	f7fd fc68 	bl	8001998 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1b2      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d6:	4b15      	ldr	r3, [pc, #84]	@ (800412c <HAL_RCC_OscConfig+0x508>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d108      	bne.n	80040fc <HAL_RCC_OscConfig+0x4d8>
 80040ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040fa:	e029      	b.n	8004150 <HAL_RCC_OscConfig+0x52c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b05      	cmp	r3, #5
 8004102:	d115      	bne.n	8004130 <HAL_RCC_OscConfig+0x50c>
 8004104:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410a:	4a07      	ldr	r2, [pc, #28]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411a:	4a03      	ldr	r2, [pc, #12]	@ (8004128 <HAL_RCC_OscConfig+0x504>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004124:	e014      	b.n	8004150 <HAL_RCC_OscConfig+0x52c>
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
 8004130:	4b9a      	ldr	r3, [pc, #616]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004136:	4a99      	ldr	r2, [pc, #612]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004140:	4b96      	ldr	r3, [pc, #600]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004146:	4a95      	ldr	r2, [pc, #596]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d016      	beq.n	8004186 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd fc1e 	bl	8001998 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd fc1a 	bl	8001998 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e162      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004176:	4b89      	ldr	r3, [pc, #548]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ed      	beq.n	8004160 <HAL_RCC_OscConfig+0x53c>
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7fd fc07 	bl	8001998 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fd fc03 	bl	8001998 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e14b      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a4:	4b7d      	ldr	r3, [pc, #500]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ed      	bne.n	800418e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b2:	7ffb      	ldrb	r3, [r7, #31]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b78      	ldr	r3, [pc, #480]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041bc:	4a77      	ldr	r2, [pc, #476]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d03c      	beq.n	800424a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01c      	beq.n	8004212 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041d8:	4b70      	ldr	r3, [pc, #448]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 80041da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041de:	4a6f      	ldr	r2, [pc, #444]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fd fbd6 	bl	8001998 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041f0:	f7fd fbd2 	bl	8001998 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e11c      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004202:	4b66      	ldr	r3, [pc, #408]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ef      	beq.n	80041f0 <HAL_RCC_OscConfig+0x5cc>
 8004210:	e01b      	b.n	800424a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004212:	4b62      	ldr	r3, [pc, #392]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004218:	4a60      	ldr	r2, [pc, #384]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fd fbb9 	bl	8001998 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800422a:	f7fd fbb5 	bl	8001998 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0ff      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800423c:	4b57      	ldr	r3, [pc, #348]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 800423e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ef      	bne.n	800422a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80f3 	beq.w	800443a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004258:	2b02      	cmp	r3, #2
 800425a:	f040 80c9 	bne.w	80043f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800425e:	4b4f      	ldr	r3, [pc, #316]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0203 	and.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	429a      	cmp	r2, r3
 8004270:	d12c      	bne.n	80042cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	3b01      	subs	r3, #1
 800427e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d123      	bne.n	80042cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d11b      	bne.n	80042cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d113      	bne.n	80042cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	3b01      	subs	r3, #1
 80042b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d109      	bne.n	80042cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	3b01      	subs	r3, #1
 80042c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d06b      	beq.n	80043a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d062      	beq.n	8004398 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042d2:	4b32      	ldr	r3, [pc, #200]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e0ac      	b.n	800443c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042e2:	4b2e      	ldr	r3, [pc, #184]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2d      	ldr	r2, [pc, #180]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 80042e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ee:	f7fd fb53 	bl	8001998 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd fb4f 	bl	8001998 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e099      	b.n	800443c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	4b24      	ldr	r3, [pc, #144]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004314:	4b21      	ldr	r3, [pc, #132]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	4b21      	ldr	r3, [pc, #132]	@ (80043a0 <HAL_RCC_OscConfig+0x77c>)
 800431a:	4013      	ands	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004324:	3a01      	subs	r2, #1
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800432e:	0212      	lsls	r2, r2, #8
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004336:	0852      	lsrs	r2, r2, #1
 8004338:	3a01      	subs	r2, #1
 800433a:	0552      	lsls	r2, r2, #21
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004342:	0852      	lsrs	r2, r2, #1
 8004344:	3a01      	subs	r2, #1
 8004346:	0652      	lsls	r2, r2, #25
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800434e:	06d2      	lsls	r2, r2, #27
 8004350:	430a      	orrs	r2, r1
 8004352:	4912      	ldr	r1, [pc, #72]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004358:	4b10      	ldr	r3, [pc, #64]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0f      	ldr	r2, [pc, #60]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004364:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a0c      	ldr	r2, [pc, #48]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 800436a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800436e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004370:	f7fd fb12 	bl	8001998 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd fb0e 	bl	8001998 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e058      	b.n	800443c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	4b04      	ldr	r3, [pc, #16]	@ (800439c <HAL_RCC_OscConfig+0x778>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004396:	e050      	b.n	800443a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e04f      	b.n	800443c <HAL_RCC_OscConfig+0x818>
 800439c:	40021000 	.word	0x40021000
 80043a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a4:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d144      	bne.n	800443a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043b0:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a23      	ldr	r2, [pc, #140]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043bc:	4b21      	ldr	r3, [pc, #132]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a20      	ldr	r2, [pc, #128]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043c8:	f7fd fae6 	bl	8001998 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fd fae2 	bl	8001998 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e02c      	b.n	800443c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	4b18      	ldr	r3, [pc, #96]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x7ac>
 80043ee:	e024      	b.n	800443a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d01f      	beq.n	8004436 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b13      	ldr	r3, [pc, #76]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a12      	ldr	r2, [pc, #72]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 80043fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fd fac9 	bl	8001998 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440a:	f7fd fac5 	bl	8001998 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e00f      	b.n	800443c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004428:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4905      	ldr	r1, [pc, #20]	@ (8004444 <HAL_RCC_OscConfig+0x820>)
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_OscConfig+0x824>)
 8004430:	4013      	ands	r3, r2
 8004432:	60cb      	str	r3, [r1, #12]
 8004434:	e001      	b.n	800443a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	feeefffc 	.word	0xfeeefffc

0800444c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0e7      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b75      	ldr	r3, [pc, #468]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d910      	bls.n	8004490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b72      	ldr	r3, [pc, #456]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4970      	ldr	r1, [pc, #448]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b6e      	ldr	r3, [pc, #440]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0cf      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d010      	beq.n	80044be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b66      	ldr	r3, [pc, #408]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d908      	bls.n	80044be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b63      	ldr	r3, [pc, #396]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4960      	ldr	r1, [pc, #384]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04c      	beq.n	8004564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	4b5a      	ldr	r3, [pc, #360]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d121      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0a6      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ea:	4b54      	ldr	r3, [pc, #336]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e09a      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004502:	4b4e      	ldr	r3, [pc, #312]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e08e      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004512:	4b4a      	ldr	r3, [pc, #296]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e086      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b46      	ldr	r3, [pc, #280]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4943      	ldr	r1, [pc, #268]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd fa30 	bl	8001998 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fd fa2c 	bl	8001998 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e06e      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b3a      	ldr	r3, [pc, #232]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	4b31      	ldr	r3, [pc, #196]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800457c:	429a      	cmp	r2, r3
 800457e:	d208      	bcs.n	8004592 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b2e      	ldr	r3, [pc, #184]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	492b      	ldr	r1, [pc, #172]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004592:	4b29      	ldr	r3, [pc, #164]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d210      	bcs.n	80045c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a0:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 0207 	bic.w	r2, r3, #7
 80045a8:	4923      	ldr	r1, [pc, #140]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b0:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e036      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ce:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4918      	ldr	r1, [pc, #96]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ec:	4b13      	ldr	r3, [pc, #76]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4910      	ldr	r1, [pc, #64]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004600:	f000 f824 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	490b      	ldr	r1, [pc, #44]	@ (8004640 <HAL_RCC_ClockConfig+0x1f4>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	4a09      	ldr	r2, [pc, #36]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800461e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_RCC_ClockConfig+0x1fc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd f967 	bl	80018f8 <HAL_InitTick>
 800462a:	4603      	mov	r3, r0
 800462c:	72fb      	strb	r3, [r7, #11]

  return status;
 800462e:	7afb      	ldrb	r3, [r7, #11]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40022000 	.word	0x40022000
 800463c:	40021000 	.word	0x40021000
 8004640:	08006ea8 	.word	0x08006ea8
 8004644:	20000020 	.word	0x20000020
 8004648:	20000024 	.word	0x20000024

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	@ 0x24
 8004650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465a:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004664:	4b3b      	ldr	r3, [pc, #236]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d121      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d11e      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004680:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800468c:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e005      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800469c:	4b2d      	ldr	r3, [pc, #180]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c4:	4b25      	ldr	r3, [pc, #148]	@ (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e004      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d0:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d134      	bne.n	8004744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046da:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0xac>
 80046f0:	e005      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046f2:	4b1a      	ldr	r3, [pc, #104]	@ (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046f4:	617b      	str	r3, [r7, #20]
      break;
 80046f6:	e005      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046f8:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046fa:	617b      	str	r3, [r7, #20]
      break;
 80046fc:	e002      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	617b      	str	r3, [r7, #20]
      break;
 8004702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004704:	4b13      	ldr	r3, [pc, #76]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	3301      	adds	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	fb03 f202 	mul.w	r2, r3, r2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800472a:	4b0a      	ldr	r3, [pc, #40]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	0e5b      	lsrs	r3, r3, #25
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	3301      	adds	r3, #1
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004744:	69bb      	ldr	r3, [r7, #24]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	@ 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	08006ec0 	.word	0x08006ec0
 800475c:	00f42400 	.word	0x00f42400
 8004760:	017d7840 	.word	0x017d7840

08004764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <HAL_RCC_GetHCLKFreq+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000020 	.word	0x20000020

0800477c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004780:	f7ff fff0 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	@ (80047a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	08006eb8 	.word	0x08006eb8

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047ac:	f7ff ffda 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0adb      	lsrs	r3, r3, #11
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4904      	ldr	r1, [pc, #16]	@ (80047d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	08006eb8 	.word	0x08006eb8

080047d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047e0:	4b2a      	ldr	r3, [pc, #168]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047ec:	f7ff f9b6 	bl	8003b5c <HAL_PWREx_GetVoltageRange>
 80047f0:	6178      	str	r0, [r7, #20]
 80047f2:	e014      	b.n	800481e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f8:	4a24      	ldr	r2, [pc, #144]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004800:	4b22      	ldr	r3, [pc, #136]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800480c:	f7ff f9a6 	bl	8003b5c <HAL_PWREx_GetVoltageRange>
 8004810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004812:	4b1e      	ldr	r3, [pc, #120]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004824:	d10b      	bne.n	800483e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b80      	cmp	r3, #128	@ 0x80
 800482a:	d919      	bls.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004830:	d902      	bls.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004832:	2302      	movs	r3, #2
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	e013      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004838:	2301      	movs	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e010      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b80      	cmp	r3, #128	@ 0x80
 8004842:	d902      	bls.n	800484a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004844:	2303      	movs	r3, #3
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	e00a      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b80      	cmp	r3, #128	@ 0x80
 800484e:	d102      	bne.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004850:	2302      	movs	r3, #2
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e004      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b70      	cmp	r3, #112	@ 0x70
 800485a:	d101      	bne.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800485c:	2301      	movs	r3, #1
 800485e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 0207 	bic.w	r2, r3, #7
 8004868:	4909      	ldr	r1, [pc, #36]	@ (8004890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004870:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	429a      	cmp	r2, r3
 800487c:	d001      	beq.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	40022000 	.word	0x40022000

08004894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800489c:	2300      	movs	r3, #0
 800489e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048a0:	2300      	movs	r3, #0
 80048a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d031      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048b8:	d01a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80048ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048be:	d814      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c8:	d10f      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80048ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048d6:	e00c      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fa32 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	74fb      	strb	r3, [r7, #19]
      break;
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80048f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f8:	4b51      	ldr	r3, [pc, #324]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	494e      	ldr	r1, [pc, #312]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	7cfb      	ldrb	r3, [r7, #19]
 8004912:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 809e 	beq.w	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004926:	4b46      	ldr	r3, [pc, #280]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00d      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	4b40      	ldr	r3, [pc, #256]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	4a3f      	ldr	r2, [pc, #252]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004946:	6593      	str	r3, [r2, #88]	@ 0x58
 8004948:	4b3d      	ldr	r3, [pc, #244]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004954:	2301      	movs	r3, #1
 8004956:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004958:	4b3a      	ldr	r3, [pc, #232]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a39      	ldr	r2, [pc, #228]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004964:	f7fd f818 	bl	8001998 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800496a:	e009      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496c:	f7fd f814 	bl	8001998 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	74fb      	strb	r3, [r7, #19]
        break;
 800497e:	e005      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004980:	4b30      	ldr	r3, [pc, #192]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ef      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d15a      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004992:	4b2b      	ldr	r3, [pc, #172]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01e      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d019      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049ae:	4b24      	ldr	r3, [pc, #144]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ba:	4b21      	ldr	r3, [pc, #132]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049da:	4a19      	ldr	r2, [pc, #100]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d016      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fc ffd4 	bl	8001998 <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f2:	e00b      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fc ffd0 	bl	8001998 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d902      	bls.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	74fb      	strb	r3, [r7, #19]
            break;
 8004a0a:	e006      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0ec      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a20:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2e:	4904      	ldr	r1, [pc, #16]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a36:	e009      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
 8004a3c:	e006      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a48:	7cfb      	ldrb	r3, [r7, #19]
 8004a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a4c:	7c7b      	ldrb	r3, [r7, #17]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d105      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a52:	4b8d      	ldr	r3, [pc, #564]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a56:	4a8c      	ldr	r2, [pc, #560]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6a:	4b87      	ldr	r3, [pc, #540]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	f023 0203 	bic.w	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4983      	ldr	r1, [pc, #524]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	f023 020c 	bic.w	r2, r3, #12
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	497b      	ldr	r1, [pc, #492]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aae:	4b76      	ldr	r3, [pc, #472]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	4972      	ldr	r1, [pc, #456]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	496a      	ldr	r1, [pc, #424]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004af2:	4b65      	ldr	r3, [pc, #404]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b00:	4961      	ldr	r1, [pc, #388]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b14:	4b5c      	ldr	r3, [pc, #368]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	4959      	ldr	r1, [pc, #356]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b36:	4b54      	ldr	r3, [pc, #336]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b44:	4950      	ldr	r1, [pc, #320]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b58:	4b4b      	ldr	r3, [pc, #300]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b66:	4948      	ldr	r1, [pc, #288]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b7a:	4b43      	ldr	r3, [pc, #268]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	493f      	ldr	r1, [pc, #252]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d028      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004baa:	4937      	ldr	r1, [pc, #220]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bba:	d106      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbc:	4b32      	ldr	r3, [pc, #200]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a31      	ldr	r2, [pc, #196]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	60d3      	str	r3, [r2, #12]
 8004bc8:	e011      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bd2:	d10c      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2101      	movs	r1, #1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f8b4 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
 8004bec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d028      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bfa:	4b23      	ldr	r3, [pc, #140]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c08:	491f      	ldr	r1, [pc, #124]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c18:	d106      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c24:	60d3      	str	r3, [r2, #12]
 8004c26:	e011      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	2101      	movs	r1, #1
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f885 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02b      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c66:	4908      	ldr	r1, [pc, #32]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c76:	d109      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a02      	ldr	r2, [pc, #8]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c82:	60d3      	str	r3, [r2, #12]
 8004c84:	e014      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f853 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01c      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cbc:	4b19      	ldr	r3, [pc, #100]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cca:	4916      	ldr	r1, [pc, #88]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f830 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d02:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d08:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d10:	4904      	ldr	r1, [pc, #16]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d18:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000

08004d28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a04      	ldr	r2, [pc, #16]	@ (8004d44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	6013      	str	r3, [r2, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000

08004d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d56:	4b74      	ldr	r3, [pc, #464]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d018      	beq.n	8004d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d62:	4b71      	ldr	r3, [pc, #452]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0203 	and.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d10d      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
       ||
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d7a:	4b6b      	ldr	r3, [pc, #428]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	091b      	lsrs	r3, r3, #4
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
       ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d047      	beq.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
 8004d92:	e044      	b.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d018      	beq.n	8004dce <RCCEx_PLLSAI1_Config+0x86>
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d825      	bhi.n	8004dec <RCCEx_PLLSAI1_Config+0xa4>
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d002      	beq.n	8004daa <RCCEx_PLLSAI1_Config+0x62>
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d009      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x74>
 8004da8:	e020      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004daa:	4b5f      	ldr	r3, [pc, #380]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d11d      	bne.n	8004df2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dba:	e01a      	b.n	8004df2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d116      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dcc:	e013      	b.n	8004df6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dce:	4b56      	ldr	r3, [pc, #344]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dda:	4b53      	ldr	r3, [pc, #332]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dea:	e006      	b.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      break;
 8004df0:	e004      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df2:	bf00      	nop
 8004df4:	e002      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e02:	4b49      	ldr	r3, [pc, #292]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	430b      	orrs	r3, r1
 8004e18:	4943      	ldr	r1, [pc, #268]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d17c      	bne.n	8004f1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e24:	4b40      	ldr	r3, [pc, #256]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a3f      	ldr	r2, [pc, #252]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e30:	f7fc fdb2 	bl	8001998 <HAL_GetTick>
 8004e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e36:	e009      	b.n	8004e4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e38:	f7fc fdae 	bl	8001998 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d902      	bls.n	8004e4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	73fb      	strb	r3, [r7, #15]
        break;
 8004e4a:	e005      	b.n	8004e58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e4c:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ef      	bne.n	8004e38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d15f      	bne.n	8004f1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d110      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e64:	4b30      	ldr	r3, [pc, #192]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004e6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6892      	ldr	r2, [r2, #8]
 8004e74:	0211      	lsls	r1, r2, #8
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68d2      	ldr	r2, [r2, #12]
 8004e7a:	06d2      	lsls	r2, r2, #27
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	492a      	ldr	r1, [pc, #168]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]
 8004e84:	e027      	b.n	8004ed6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d112      	bne.n	8004eb2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e8c:	4b26      	ldr	r3, [pc, #152]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6892      	ldr	r2, [r2, #8]
 8004e9c:	0211      	lsls	r1, r2, #8
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6912      	ldr	r2, [r2, #16]
 8004ea2:	0852      	lsrs	r2, r2, #1
 8004ea4:	3a01      	subs	r2, #1
 8004ea6:	0552      	lsls	r2, r2, #21
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	491f      	ldr	r1, [pc, #124]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	610b      	str	r3, [r1, #16]
 8004eb0:	e011      	b.n	8004ed6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004eba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6892      	ldr	r2, [r2, #8]
 8004ec2:	0211      	lsls	r1, r2, #8
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6952      	ldr	r2, [r2, #20]
 8004ec8:	0852      	lsrs	r2, r2, #1
 8004eca:	3a01      	subs	r2, #1
 8004ecc:	0652      	lsls	r2, r2, #25
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	4915      	ldr	r1, [pc, #84]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ed6:	4b14      	ldr	r3, [pc, #80]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a13      	ldr	r2, [pc, #76]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004edc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ee0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee2:	f7fc fd59 	bl	8001998 <HAL_GetTick>
 8004ee6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ee8:	e009      	b.n	8004efe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eea:	f7fc fd55 	bl	8001998 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d902      	bls.n	8004efe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	73fb      	strb	r3, [r7, #15]
          break;
 8004efc:	e005      	b.n	8004f0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004efe:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0ef      	beq.n	8004eea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f10:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	4903      	ldr	r1, [pc, #12]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000

08004f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e095      	b.n	800506a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f4e:	d009      	beq.n	8004f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	61da      	str	r2, [r3, #28]
 8004f56:	e005      	b.n	8004f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc faf8 	bl	8001574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fa4:	d902      	bls.n	8004fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e002      	b.n	8004fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004fba:	d007      	beq.n	8004fcc <HAL_SPI_Init+0xa0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fc4:	d002      	beq.n	8004fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500e:	ea42 0103 	orr.w	r1, r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	f003 0204 	and.w	r2, r3, #4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005048:	ea42 0103 	orr.w	r1, r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e049      	b.n	8005118 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fc fb1f 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 f929 	bl	8005308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e049      	b.n	80051c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc fa56 	bl	80015f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 f8d2 	bl	8005308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b086      	sub	sp, #24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_TIM_IC_ConfigChannel+0x1e>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e088      	b.n	80052fe <HAL_TIM_IC_ConfigChannel+0x130>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d11b      	bne.n	8005232 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800520a:	f000 f8ed 	bl	80053e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 020c 	bic.w	r2, r2, #12
 800521c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6999      	ldr	r1, [r3, #24]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	619a      	str	r2, [r3, #24]
 8005230:	e060      	b.n	80052f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11c      	bne.n	8005272 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005248:	f000 f924 	bl	8005494 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800525a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	619a      	str	r2, [r3, #24]
 8005270:	e040      	b.n	80052f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005288:	f000 f941 	bl	800550e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 020c 	bic.w	r2, r2, #12
 800529a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69d9      	ldr	r1, [r3, #28]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	61da      	str	r2, [r3, #28]
 80052ae:	e021      	b.n	80052f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b0c      	cmp	r3, #12
 80052b4:	d11c      	bne.n	80052f0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80052c6:	f000 f95e 	bl	8005586 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80052d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69d9      	ldr	r1, [r3, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	021a      	lsls	r2, r3, #8
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	61da      	str	r2, [r3, #28]
 80052ee:	e001      	b.n	80052f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a30      	ldr	r2, [pc, #192]	@ (80053dc <TIM_Base_SetConfig+0xd4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0x20>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005326:	d108      	bne.n	800533a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a27      	ldr	r2, [pc, #156]	@ (80053dc <TIM_Base_SetConfig+0xd4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0x52>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0x52>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a24      	ldr	r2, [pc, #144]	@ (80053e0 <TIM_Base_SetConfig+0xd8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0x52>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a23      	ldr	r2, [pc, #140]	@ (80053e4 <TIM_Base_SetConfig+0xdc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d108      	bne.n	800536c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a12      	ldr	r2, [pc, #72]	@ (80053dc <TIM_Base_SetConfig+0xd4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_Base_SetConfig+0xa0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a11      	ldr	r2, [pc, #68]	@ (80053e0 <TIM_Base_SetConfig+0xd8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_Base_SetConfig+0xa0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a10      	ldr	r2, [pc, #64]	@ (80053e4 <TIM_Base_SetConfig+0xdc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d103      	bne.n	80053b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d105      	bne.n	80053ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]
  }
}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400

080053e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f023 0201 	bic.w	r2, r3, #1
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a1e      	ldr	r2, [pc, #120]	@ (800548c <TIM_TI1_SetConfig+0xa4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <TIM_TI1_SetConfig+0x3e>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541c:	d003      	beq.n	8005426 <TIM_TI1_SetConfig+0x3e>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a1b      	ldr	r2, [pc, #108]	@ (8005490 <TIM_TI1_SetConfig+0xa8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <TIM_TI1_SetConfig+0x42>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <TIM_TI1_SetConfig+0x44>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e003      	b.n	800544a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	b2db      	uxtb	r3, r3
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f023 030a 	bic.w	r3, r3, #10
 8005464:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f003 030a 	and.w	r3, r3, #10
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40014000 	.word	0x40014000

08005494 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f023 0210 	bic.w	r2, r3, #16
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	031b      	lsls	r3, r3, #12
 80054d8:	b29b      	uxth	r3, r3
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800550e:	b480      	push	{r7}
 8005510:	b087      	sub	sp, #28
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	b2db      	uxtb	r3, r3
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800555e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	031b      	lsls	r3, r3, #12
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80055d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	031b      	lsls	r3, r3, #12
 80055de:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	621a      	str	r2, [r3, #32]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e04f      	b.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a21      	ldr	r2, [pc, #132]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005648:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a14      	ldr	r2, [pc, #80]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d009      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005680:	d004      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a10      	ldr	r2, [pc, #64]	@ (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d10c      	bne.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005692:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40014000 	.word	0x40014000

080056cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e040      	b.n	8005760 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb fe20 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	@ 0x24
 80056f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fb0c 	bl	8005d30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f8af 	bl	800587c <UART_SetConfig>
 800571e:	4603      	mov	r3, r0
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e01b      	b.n	8005760 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fb8b 	bl	8005e74 <UART_CheckIdleState>
 800575e:	4603      	mov	r3, r0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	@ 0x28
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800577c:	2b20      	cmp	r3, #32
 800577e:	d177      	bne.n	8005870 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_UART_Transmit+0x24>
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e070      	b.n	8005872 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2221      	movs	r2, #33	@ 0x21
 800579c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579e:	f7fc f8fb 	bl	8001998 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057bc:	d108      	bne.n	80057d0 <HAL_UART_Transmit+0x68>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e003      	b.n	80057d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d8:	e02f      	b.n	800583a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	@ 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fbed 	bl	8005fc4 <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e03b      	b.n	8005872 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10b      	bne.n	8005818 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	881a      	ldrh	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580c:	b292      	uxth	r2, r2
 800580e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	3302      	adds	r3, #2
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e007      	b.n	8005828 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3301      	adds	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1c9      	bne.n	80057da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	2140      	movs	r1, #64	@ 0x40
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fbb7 	bl	8005fc4 <UART_WaitOnFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e005      	b.n	8005872 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800587c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005880:	b08a      	sub	sp, #40	@ 0x28
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	431a      	orrs	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b9e      	ldr	r3, [pc, #632]	@ (8005b24 <UART_SetConfig+0x2a8>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a93      	ldr	r2, [pc, #588]	@ (8005b28 <UART_SetConfig+0x2ac>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e4:	4313      	orrs	r3, r2
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a8a      	ldr	r2, [pc, #552]	@ (8005b2c <UART_SetConfig+0x2b0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d126      	bne.n	8005954 <UART_SetConfig+0xd8>
 8005906:	4b8a      	ldr	r3, [pc, #552]	@ (8005b30 <UART_SetConfig+0x2b4>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	2b03      	cmp	r3, #3
 8005912:	d81b      	bhi.n	800594c <UART_SetConfig+0xd0>
 8005914:	a201      	add	r2, pc, #4	@ (adr r2, 800591c <UART_SetConfig+0xa0>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	0800592d 	.word	0x0800592d
 8005920:	0800593d 	.word	0x0800593d
 8005924:	08005935 	.word	0x08005935
 8005928:	08005945 	.word	0x08005945
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005932:	e0ab      	b.n	8005a8c <UART_SetConfig+0x210>
 8005934:	2302      	movs	r3, #2
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593a:	e0a7      	b.n	8005a8c <UART_SetConfig+0x210>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005942:	e0a3      	b.n	8005a8c <UART_SetConfig+0x210>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594a:	e09f      	b.n	8005a8c <UART_SetConfig+0x210>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005952:	e09b      	b.n	8005a8c <UART_SetConfig+0x210>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a76      	ldr	r2, [pc, #472]	@ (8005b34 <UART_SetConfig+0x2b8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d138      	bne.n	80059d0 <UART_SetConfig+0x154>
 800595e:	4b74      	ldr	r3, [pc, #464]	@ (8005b30 <UART_SetConfig+0x2b4>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	2b0c      	cmp	r3, #12
 800596a:	d82d      	bhi.n	80059c8 <UART_SetConfig+0x14c>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <UART_SetConfig+0xf8>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	080059a9 	.word	0x080059a9
 8005978:	080059c9 	.word	0x080059c9
 800597c:	080059c9 	.word	0x080059c9
 8005980:	080059c9 	.word	0x080059c9
 8005984:	080059b9 	.word	0x080059b9
 8005988:	080059c9 	.word	0x080059c9
 800598c:	080059c9 	.word	0x080059c9
 8005990:	080059c9 	.word	0x080059c9
 8005994:	080059b1 	.word	0x080059b1
 8005998:	080059c9 	.word	0x080059c9
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ae:	e06d      	b.n	8005a8c <UART_SetConfig+0x210>
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b6:	e069      	b.n	8005a8c <UART_SetConfig+0x210>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059be:	e065      	b.n	8005a8c <UART_SetConfig+0x210>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c6:	e061      	b.n	8005a8c <UART_SetConfig+0x210>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ce:	e05d      	b.n	8005a8c <UART_SetConfig+0x210>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a58      	ldr	r2, [pc, #352]	@ (8005b38 <UART_SetConfig+0x2bc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d125      	bne.n	8005a26 <UART_SetConfig+0x1aa>
 80059da:	4b55      	ldr	r3, [pc, #340]	@ (8005b30 <UART_SetConfig+0x2b4>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059e4:	2b30      	cmp	r3, #48	@ 0x30
 80059e6:	d016      	beq.n	8005a16 <UART_SetConfig+0x19a>
 80059e8:	2b30      	cmp	r3, #48	@ 0x30
 80059ea:	d818      	bhi.n	8005a1e <UART_SetConfig+0x1a2>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d00a      	beq.n	8005a06 <UART_SetConfig+0x18a>
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d814      	bhi.n	8005a1e <UART_SetConfig+0x1a2>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <UART_SetConfig+0x182>
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d008      	beq.n	8005a0e <UART_SetConfig+0x192>
 80059fc:	e00f      	b.n	8005a1e <UART_SetConfig+0x1a2>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a04:	e042      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a06:	2302      	movs	r3, #2
 8005a08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0c:	e03e      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a0e:	2304      	movs	r3, #4
 8005a10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a14:	e03a      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a16:	2308      	movs	r3, #8
 8005a18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a1c:	e036      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a1e:	2310      	movs	r3, #16
 8005a20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a24:	e032      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b28 <UART_SetConfig+0x2ac>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d12a      	bne.n	8005a86 <UART_SetConfig+0x20a>
 8005a30:	4b3f      	ldr	r3, [pc, #252]	@ (8005b30 <UART_SetConfig+0x2b4>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a36:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a3e:	d01a      	beq.n	8005a76 <UART_SetConfig+0x1fa>
 8005a40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a44:	d81b      	bhi.n	8005a7e <UART_SetConfig+0x202>
 8005a46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a4a:	d00c      	beq.n	8005a66 <UART_SetConfig+0x1ea>
 8005a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a50:	d815      	bhi.n	8005a7e <UART_SetConfig+0x202>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <UART_SetConfig+0x1e2>
 8005a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5a:	d008      	beq.n	8005a6e <UART_SetConfig+0x1f2>
 8005a5c:	e00f      	b.n	8005a7e <UART_SetConfig+0x202>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a64:	e012      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a66:	2302      	movs	r3, #2
 8005a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6c:	e00e      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a6e:	2304      	movs	r3, #4
 8005a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a74:	e00a      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a76:	2308      	movs	r3, #8
 8005a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7c:	e006      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a7e:	2310      	movs	r3, #16
 8005a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a84:	e002      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a86:	2310      	movs	r3, #16
 8005a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a25      	ldr	r2, [pc, #148]	@ (8005b28 <UART_SetConfig+0x2ac>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	f040 808a 	bne.w	8005bac <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d824      	bhi.n	8005aea <UART_SetConfig+0x26e>
 8005aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <UART_SetConfig+0x22c>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005adb 	.word	0x08005adb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005aeb 	.word	0x08005aeb
 8005ac4:	08005aeb 	.word	0x08005aeb
 8005ac8:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fe fe56 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8005ad0:	61f8      	str	r0, [r7, #28]
        break;
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <UART_SetConfig+0x2c0>)
 8005ad6:	61fb      	str	r3, [r7, #28]
        break;
 8005ad8:	e00d      	b.n	8005af6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fe fdb7 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8005ade:	61f8      	str	r0, [r7, #28]
        break;
 8005ae0:	e009      	b.n	8005af6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ae6:	61fb      	str	r3, [r7, #28]
        break;
 8005ae8:	e005      	b.n	8005af6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8109 	beq.w	8005d10 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d305      	bcc.n	8005b1a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d912      	bls.n	8005b40 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b20:	e0f6      	b.n	8005d10 <UART_SetConfig+0x494>
 8005b22:	bf00      	nop
 8005b24:	efff69f3 	.word	0xefff69f3
 8005b28:	40008000 	.word	0x40008000
 8005b2c:	40013800 	.word	0x40013800
 8005b30:	40021000 	.word	0x40021000
 8005b34:	40004400 	.word	0x40004400
 8005b38:	40004800 	.word	0x40004800
 8005b3c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	2200      	movs	r2, #0
 8005b44:	461c      	mov	r4, r3
 8005b46:	4615      	mov	r5, r2
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	022b      	lsls	r3, r5, #8
 8005b52:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b56:	0222      	lsls	r2, r4, #8
 8005b58:	68f9      	ldr	r1, [r7, #12]
 8005b5a:	6849      	ldr	r1, [r1, #4]
 8005b5c:	0849      	lsrs	r1, r1, #1
 8005b5e:	2000      	movs	r0, #0
 8005b60:	4688      	mov	r8, r1
 8005b62:	4681      	mov	r9, r0
 8005b64:	eb12 0a08 	adds.w	sl, r2, r8
 8005b68:	eb43 0b09 	adc.w	fp, r3, r9
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	f7fa fb5f 	bl	8000240 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4613      	mov	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b90:	d308      	bcc.n	8005ba4 <UART_SetConfig+0x328>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b98:	d204      	bcs.n	8005ba4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	e0b5      	b.n	8005d10 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005baa:	e0b1      	b.n	8005d10 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb4:	d15d      	bne.n	8005c72 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d827      	bhi.n	8005c0e <UART_SetConfig+0x392>
 8005bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <UART_SetConfig+0x348>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fe fdc8 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8005bec:	61f8      	str	r0, [r7, #28]
        break;
 8005bee:	e014      	b.n	8005c1a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fe fdda 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	61f8      	str	r0, [r7, #28]
        break;
 8005bf6:	e010      	b.n	8005c1a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8005d2c <UART_SetConfig+0x4b0>)
 8005bfa:	61fb      	str	r3, [r7, #28]
        break;
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe fd25 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8005c02:	61f8      	str	r0, [r7, #28]
        break;
 8005c04:	e009      	b.n	8005c1a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c0a:	61fb      	str	r3, [r7, #28]
        break;
 8005c0c:	e005      	b.n	8005c1a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d077      	beq.n	8005d10 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	005a      	lsls	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	441a      	add	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b0f      	cmp	r3, #15
 8005c3a:	d916      	bls.n	8005c6a <UART_SetConfig+0x3ee>
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c42:	d212      	bcs.n	8005c6a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f023 030f 	bic.w	r3, r3, #15
 8005c4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	8afb      	ldrh	r3, [r7, #22]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	8afa      	ldrh	r2, [r7, #22]
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	e052      	b.n	8005d10 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c70:	e04e      	b.n	8005d10 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d827      	bhi.n	8005cca <UART_SetConfig+0x44e>
 8005c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <UART_SetConfig+0x404>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	08005ccb 	.word	0x08005ccb
 8005c90:	08005cbb 	.word	0x08005cbb
 8005c94:	08005ccb 	.word	0x08005ccb
 8005c98:	08005ccb 	.word	0x08005ccb
 8005c9c:	08005ccb 	.word	0x08005ccb
 8005ca0:	08005cc3 	.word	0x08005cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f7fe fd6a 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8005ca8:	61f8      	str	r0, [r7, #28]
        break;
 8005caa:	e014      	b.n	8005cd6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cac:	f7fe fd7c 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8005cb0:	61f8      	str	r0, [r7, #28]
        break;
 8005cb2:	e010      	b.n	8005cd6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d2c <UART_SetConfig+0x4b0>)
 8005cb6:	61fb      	str	r3, [r7, #28]
        break;
 8005cb8:	e00d      	b.n	8005cd6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cba:	f7fe fcc7 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8005cbe:	61f8      	str	r0, [r7, #28]
        break;
 8005cc0:	e009      	b.n	8005cd6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cc6:	61fb      	str	r3, [r7, #28]
        break;
 8005cc8:	e005      	b.n	8005cd6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cd4:	bf00      	nop
    }

    if (pclk != 0U)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d019      	beq.n	8005d10 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	085a      	lsrs	r2, r3, #1
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d909      	bls.n	8005d0a <UART_SetConfig+0x48e>
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cfc:	d205      	bcs.n	8005d0a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60da      	str	r2, [r3, #12]
 8005d08:	e002      	b.n	8005d10 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3728      	adds	r7, #40	@ 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2a:	bf00      	nop
 8005d2c:	00f42400 	.word	0x00f42400

08005d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01a      	beq.n	8005e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e2e:	d10a      	bne.n	8005e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b098      	sub	sp, #96	@ 0x60
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e84:	f7fb fd88 	bl	8001998 <HAL_GetTick>
 8005e88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d12e      	bne.n	8005ef6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f88c 	bl	8005fc4 <UART_WaitOnFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d021      	beq.n	8005ef6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ed2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e6      	bne.n	8005eb2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e062      	b.n	8005fbc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d149      	bne.n	8005f98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f856 	bl	8005fc4 <UART_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d03c      	beq.n	8005f98 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e6      	bne.n	8005f1e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3308      	adds	r3, #8
 8005f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f70:	61fa      	str	r2, [r7, #28]
 8005f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e011      	b.n	8005fbc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3758      	adds	r7, #88	@ 0x58
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd4:	e04f      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fdc:	d04b      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fde:	f7fb fcdb 	bl	8001998 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d302      	bcc.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e04e      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d037      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b80      	cmp	r3, #128	@ 0x80
 800600a:	d034      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb2>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b40      	cmp	r3, #64	@ 0x40
 8006010:	d031      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b08      	cmp	r3, #8
 800601e:	d110      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2208      	movs	r2, #8
 8006026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f838 	bl	800609e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2208      	movs	r2, #8
 8006032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e029      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800604c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006050:	d111      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800605a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f81e 	bl	800609e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e00f      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	429a      	cmp	r2, r3
 8006092:	d0a0      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800609e:	b480      	push	{r7}
 80060a0:	b095      	sub	sp, #84	@ 0x54
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80060c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e6      	bne.n	80060a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3308      	adds	r3, #8
 80060de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e5      	bne.n	80060d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006110:	2b01      	cmp	r3, #1
 8006112:	d118      	bne.n	8006146 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	60bb      	str	r3, [r7, #8]
   return(result);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 0310 	bic.w	r3, r3, #16
 8006128:	647b      	str	r3, [r7, #68]	@ 0x44
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6979      	ldr	r1, [r7, #20]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	613b      	str	r3, [r7, #16]
   return(result);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e6      	bne.n	8006114 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800615a:	bf00      	nop
 800615c:	3754      	adds	r7, #84	@ 0x54
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <siprintf>:
 8006168:	b40e      	push	{r1, r2, r3}
 800616a:	b510      	push	{r4, lr}
 800616c:	b09d      	sub	sp, #116	@ 0x74
 800616e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006170:	9002      	str	r0, [sp, #8]
 8006172:	9006      	str	r0, [sp, #24]
 8006174:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006178:	480a      	ldr	r0, [pc, #40]	@ (80061a4 <siprintf+0x3c>)
 800617a:	9107      	str	r1, [sp, #28]
 800617c:	9104      	str	r1, [sp, #16]
 800617e:	490a      	ldr	r1, [pc, #40]	@ (80061a8 <siprintf+0x40>)
 8006180:	f853 2b04 	ldr.w	r2, [r3], #4
 8006184:	9105      	str	r1, [sp, #20]
 8006186:	2400      	movs	r4, #0
 8006188:	a902      	add	r1, sp, #8
 800618a:	6800      	ldr	r0, [r0, #0]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006190:	f000 f8a0 	bl	80062d4 <_svfiprintf_r>
 8006194:	9b02      	ldr	r3, [sp, #8]
 8006196:	701c      	strb	r4, [r3, #0]
 8006198:	b01d      	add	sp, #116	@ 0x74
 800619a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619e:	b003      	add	sp, #12
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000002c 	.word	0x2000002c
 80061a8:	ffff0208 	.word	0xffff0208

080061ac <memset>:
 80061ac:	4402      	add	r2, r0
 80061ae:	4603      	mov	r3, r0
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d100      	bne.n	80061b6 <memset+0xa>
 80061b4:	4770      	bx	lr
 80061b6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ba:	e7f9      	b.n	80061b0 <memset+0x4>

080061bc <__errno>:
 80061bc:	4b01      	ldr	r3, [pc, #4]	@ (80061c4 <__errno+0x8>)
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	2000002c 	.word	0x2000002c

080061c8 <__libc_init_array>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <__libc_init_array+0x38>)
 80061cc:	4d0d      	ldr	r5, [pc, #52]	@ (8006204 <__libc_init_array+0x3c>)
 80061ce:	1b5b      	subs	r3, r3, r5
 80061d0:	109c      	asrs	r4, r3, #2
 80061d2:	2600      	movs	r6, #0
 80061d4:	42a6      	cmp	r6, r4
 80061d6:	d109      	bne.n	80061ec <__libc_init_array+0x24>
 80061d8:	f000 fde8 	bl	8006dac <_init>
 80061dc:	4d0a      	ldr	r5, [pc, #40]	@ (8006208 <__libc_init_array+0x40>)
 80061de:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <__libc_init_array+0x44>)
 80061e0:	1b5b      	subs	r3, r3, r5
 80061e2:	109c      	asrs	r4, r3, #2
 80061e4:	2600      	movs	r6, #0
 80061e6:	42a6      	cmp	r6, r4
 80061e8:	d105      	bne.n	80061f6 <__libc_init_array+0x2e>
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
 80061ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f0:	4798      	blx	r3
 80061f2:	3601      	adds	r6, #1
 80061f4:	e7ee      	b.n	80061d4 <__libc_init_array+0xc>
 80061f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fa:	4798      	blx	r3
 80061fc:	3601      	adds	r6, #1
 80061fe:	e7f2      	b.n	80061e6 <__libc_init_array+0x1e>
 8006200:	08006f2c 	.word	0x08006f2c
 8006204:	08006f2c 	.word	0x08006f2c
 8006208:	08006f2c 	.word	0x08006f2c
 800620c:	08006f30 	.word	0x08006f30

08006210 <__retarget_lock_acquire_recursive>:
 8006210:	4770      	bx	lr

08006212 <__retarget_lock_release_recursive>:
 8006212:	4770      	bx	lr

08006214 <__ssputs_r>:
 8006214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006218:	688e      	ldr	r6, [r1, #8]
 800621a:	461f      	mov	r7, r3
 800621c:	42be      	cmp	r6, r7
 800621e:	4682      	mov	sl, r0
 8006220:	460c      	mov	r4, r1
 8006222:	4690      	mov	r8, r2
 8006224:	4633      	mov	r3, r6
 8006226:	d853      	bhi.n	80062d0 <__ssputs_r+0xbc>
 8006228:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800622c:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8006230:	d02b      	beq.n	800628a <__ssputs_r+0x76>
 8006232:	6965      	ldr	r5, [r4, #20]
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	6909      	ldr	r1, [r1, #16]
 8006238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800623c:	eba3 0901 	sub.w	r9, r3, r1
 8006240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006244:	1c7b      	adds	r3, r7, #1
 8006246:	106d      	asrs	r5, r5, #1
 8006248:	444b      	add	r3, r9
 800624a:	42ab      	cmp	r3, r5
 800624c:	462a      	mov	r2, r5
 800624e:	bf84      	itt	hi
 8006250:	461d      	movhi	r5, r3
 8006252:	462a      	movhi	r2, r5
 8006254:	0543      	lsls	r3, r0, #21
 8006256:	d527      	bpl.n	80062a8 <__ssputs_r+0x94>
 8006258:	4611      	mov	r1, r2
 800625a:	4650      	mov	r0, sl
 800625c:	f000 f958 	bl	8006510 <_malloc_r>
 8006260:	4606      	mov	r6, r0
 8006262:	b358      	cbz	r0, 80062bc <__ssputs_r+0xa8>
 8006264:	6921      	ldr	r1, [r4, #16]
 8006266:	464a      	mov	r2, r9
 8006268:	f000 fbc4 	bl	80069f4 <memcpy>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	6126      	str	r6, [r4, #16]
 800627a:	6165      	str	r5, [r4, #20]
 800627c:	444e      	add	r6, r9
 800627e:	eba5 0509 	sub.w	r5, r5, r9
 8006282:	6026      	str	r6, [r4, #0]
 8006284:	60a5      	str	r5, [r4, #8]
 8006286:	463e      	mov	r6, r7
 8006288:	463b      	mov	r3, r7
 800628a:	461f      	mov	r7, r3
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	463a      	mov	r2, r7
 8006290:	4641      	mov	r1, r8
 8006292:	f000 fb85 	bl	80069a0 <memmove>
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	1b9b      	subs	r3, r3, r6
 800629a:	60a3      	str	r3, [r4, #8]
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	443b      	add	r3, r7
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	2000      	movs	r0, #0
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	4650      	mov	r0, sl
 80062aa:	f000 fb4b 	bl	8006944 <_realloc_r>
 80062ae:	4606      	mov	r6, r0
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d1e1      	bne.n	8006278 <__ssputs_r+0x64>
 80062b4:	6921      	ldr	r1, [r4, #16]
 80062b6:	4650      	mov	r0, sl
 80062b8:	f000 fbaa 	bl	8006a10 <_free_r>
 80062bc:	230c      	movs	r3, #12
 80062be:	f8ca 3000 	str.w	r3, [sl]
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062ce:	e7e9      	b.n	80062a4 <__ssputs_r+0x90>
 80062d0:	463e      	mov	r6, r7
 80062d2:	e7db      	b.n	800628c <__ssputs_r+0x78>

080062d4 <_svfiprintf_r>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	4698      	mov	r8, r3
 80062da:	898b      	ldrh	r3, [r1, #12]
 80062dc:	061b      	lsls	r3, r3, #24
 80062de:	b09d      	sub	sp, #116	@ 0x74
 80062e0:	4607      	mov	r7, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	d510      	bpl.n	800630a <_svfiprintf_r+0x36>
 80062e8:	690b      	ldr	r3, [r1, #16]
 80062ea:	b973      	cbnz	r3, 800630a <_svfiprintf_r+0x36>
 80062ec:	2140      	movs	r1, #64	@ 0x40
 80062ee:	f000 f90f 	bl	8006510 <_malloc_r>
 80062f2:	6028      	str	r0, [r5, #0]
 80062f4:	6128      	str	r0, [r5, #16]
 80062f6:	b930      	cbnz	r0, 8006306 <_svfiprintf_r+0x32>
 80062f8:	230c      	movs	r3, #12
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006300:	b01d      	add	sp, #116	@ 0x74
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	2340      	movs	r3, #64	@ 0x40
 8006308:	616b      	str	r3, [r5, #20]
 800630a:	2300      	movs	r3, #0
 800630c:	9309      	str	r3, [sp, #36]	@ 0x24
 800630e:	2320      	movs	r3, #32
 8006310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006314:	f8cd 800c 	str.w	r8, [sp, #12]
 8006318:	2330      	movs	r3, #48	@ 0x30
 800631a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064b8 <_svfiprintf_r+0x1e4>
 800631e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006322:	f04f 0901 	mov.w	r9, #1
 8006326:	4623      	mov	r3, r4
 8006328:	469a      	mov	sl, r3
 800632a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800632e:	b10a      	cbz	r2, 8006334 <_svfiprintf_r+0x60>
 8006330:	2a25      	cmp	r2, #37	@ 0x25
 8006332:	d1f9      	bne.n	8006328 <_svfiprintf_r+0x54>
 8006334:	ebba 0b04 	subs.w	fp, sl, r4
 8006338:	d00b      	beq.n	8006352 <_svfiprintf_r+0x7e>
 800633a:	465b      	mov	r3, fp
 800633c:	4622      	mov	r2, r4
 800633e:	4629      	mov	r1, r5
 8006340:	4638      	mov	r0, r7
 8006342:	f7ff ff67 	bl	8006214 <__ssputs_r>
 8006346:	3001      	adds	r0, #1
 8006348:	f000 80a7 	beq.w	800649a <_svfiprintf_r+0x1c6>
 800634c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800634e:	445a      	add	r2, fp
 8006350:	9209      	str	r2, [sp, #36]	@ 0x24
 8006352:	f89a 3000 	ldrb.w	r3, [sl]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 809f 	beq.w	800649a <_svfiprintf_r+0x1c6>
 800635c:	2300      	movs	r3, #0
 800635e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006366:	f10a 0a01 	add.w	sl, sl, #1
 800636a:	9304      	str	r3, [sp, #16]
 800636c:	9307      	str	r3, [sp, #28]
 800636e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006372:	931a      	str	r3, [sp, #104]	@ 0x68
 8006374:	4654      	mov	r4, sl
 8006376:	2205      	movs	r2, #5
 8006378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637c:	484e      	ldr	r0, [pc, #312]	@ (80064b8 <_svfiprintf_r+0x1e4>)
 800637e:	f7f9 ff0f 	bl	80001a0 <memchr>
 8006382:	9a04      	ldr	r2, [sp, #16]
 8006384:	b9d8      	cbnz	r0, 80063be <_svfiprintf_r+0xea>
 8006386:	06d0      	lsls	r0, r2, #27
 8006388:	bf44      	itt	mi
 800638a:	2320      	movmi	r3, #32
 800638c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006390:	0711      	lsls	r1, r2, #28
 8006392:	bf44      	itt	mi
 8006394:	232b      	movmi	r3, #43	@ 0x2b
 8006396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800639a:	f89a 3000 	ldrb.w	r3, [sl]
 800639e:	2b2a      	cmp	r3, #42	@ 0x2a
 80063a0:	d015      	beq.n	80063ce <_svfiprintf_r+0xfa>
 80063a2:	9a07      	ldr	r2, [sp, #28]
 80063a4:	4654      	mov	r4, sl
 80063a6:	2000      	movs	r0, #0
 80063a8:	f04f 0c0a 	mov.w	ip, #10
 80063ac:	4621      	mov	r1, r4
 80063ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063b2:	3b30      	subs	r3, #48	@ 0x30
 80063b4:	2b09      	cmp	r3, #9
 80063b6:	d94b      	bls.n	8006450 <_svfiprintf_r+0x17c>
 80063b8:	b1b0      	cbz	r0, 80063e8 <_svfiprintf_r+0x114>
 80063ba:	9207      	str	r2, [sp, #28]
 80063bc:	e014      	b.n	80063e8 <_svfiprintf_r+0x114>
 80063be:	eba0 0308 	sub.w	r3, r0, r8
 80063c2:	fa09 f303 	lsl.w	r3, r9, r3
 80063c6:	4313      	orrs	r3, r2
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	46a2      	mov	sl, r4
 80063cc:	e7d2      	b.n	8006374 <_svfiprintf_r+0xa0>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	1d19      	adds	r1, r3, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	9103      	str	r1, [sp, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfbb      	ittet	lt
 80063da:	425b      	neglt	r3, r3
 80063dc:	f042 0202 	orrlt.w	r2, r2, #2
 80063e0:	9307      	strge	r3, [sp, #28]
 80063e2:	9307      	strlt	r3, [sp, #28]
 80063e4:	bfb8      	it	lt
 80063e6:	9204      	strlt	r2, [sp, #16]
 80063e8:	7823      	ldrb	r3, [r4, #0]
 80063ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80063ec:	d10a      	bne.n	8006404 <_svfiprintf_r+0x130>
 80063ee:	7863      	ldrb	r3, [r4, #1]
 80063f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f2:	d132      	bne.n	800645a <_svfiprintf_r+0x186>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	1d1a      	adds	r2, r3, #4
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	9203      	str	r2, [sp, #12]
 80063fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006400:	3402      	adds	r4, #2
 8006402:	9305      	str	r3, [sp, #20]
 8006404:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064c8 <_svfiprintf_r+0x1f4>
 8006408:	7821      	ldrb	r1, [r4, #0]
 800640a:	2203      	movs	r2, #3
 800640c:	4650      	mov	r0, sl
 800640e:	f7f9 fec7 	bl	80001a0 <memchr>
 8006412:	b138      	cbz	r0, 8006424 <_svfiprintf_r+0x150>
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	eba0 000a 	sub.w	r0, r0, sl
 800641a:	2240      	movs	r2, #64	@ 0x40
 800641c:	4082      	lsls	r2, r0
 800641e:	4313      	orrs	r3, r2
 8006420:	3401      	adds	r4, #1
 8006422:	9304      	str	r3, [sp, #16]
 8006424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006428:	4824      	ldr	r0, [pc, #144]	@ (80064bc <_svfiprintf_r+0x1e8>)
 800642a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800642e:	2206      	movs	r2, #6
 8006430:	f7f9 feb6 	bl	80001a0 <memchr>
 8006434:	2800      	cmp	r0, #0
 8006436:	d036      	beq.n	80064a6 <_svfiprintf_r+0x1d2>
 8006438:	4b21      	ldr	r3, [pc, #132]	@ (80064c0 <_svfiprintf_r+0x1ec>)
 800643a:	bb1b      	cbnz	r3, 8006484 <_svfiprintf_r+0x1b0>
 800643c:	9b03      	ldr	r3, [sp, #12]
 800643e:	3307      	adds	r3, #7
 8006440:	f023 0307 	bic.w	r3, r3, #7
 8006444:	3308      	adds	r3, #8
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644a:	4433      	add	r3, r6
 800644c:	9309      	str	r3, [sp, #36]	@ 0x24
 800644e:	e76a      	b.n	8006326 <_svfiprintf_r+0x52>
 8006450:	fb0c 3202 	mla	r2, ip, r2, r3
 8006454:	460c      	mov	r4, r1
 8006456:	2001      	movs	r0, #1
 8006458:	e7a8      	b.n	80063ac <_svfiprintf_r+0xd8>
 800645a:	2300      	movs	r3, #0
 800645c:	3401      	adds	r4, #1
 800645e:	9305      	str	r3, [sp, #20]
 8006460:	4619      	mov	r1, r3
 8006462:	f04f 0c0a 	mov.w	ip, #10
 8006466:	4620      	mov	r0, r4
 8006468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800646c:	3a30      	subs	r2, #48	@ 0x30
 800646e:	2a09      	cmp	r2, #9
 8006470:	d903      	bls.n	800647a <_svfiprintf_r+0x1a6>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0c6      	beq.n	8006404 <_svfiprintf_r+0x130>
 8006476:	9105      	str	r1, [sp, #20]
 8006478:	e7c4      	b.n	8006404 <_svfiprintf_r+0x130>
 800647a:	fb0c 2101 	mla	r1, ip, r1, r2
 800647e:	4604      	mov	r4, r0
 8006480:	2301      	movs	r3, #1
 8006482:	e7f0      	b.n	8006466 <_svfiprintf_r+0x192>
 8006484:	ab03      	add	r3, sp, #12
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	462a      	mov	r2, r5
 800648a:	4b0e      	ldr	r3, [pc, #56]	@ (80064c4 <_svfiprintf_r+0x1f0>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	4638      	mov	r0, r7
 8006490:	f3af 8000 	nop.w
 8006494:	1c42      	adds	r2, r0, #1
 8006496:	4606      	mov	r6, r0
 8006498:	d1d6      	bne.n	8006448 <_svfiprintf_r+0x174>
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	065b      	lsls	r3, r3, #25
 800649e:	f53f af2d 	bmi.w	80062fc <_svfiprintf_r+0x28>
 80064a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064a4:	e72c      	b.n	8006300 <_svfiprintf_r+0x2c>
 80064a6:	ab03      	add	r3, sp, #12
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	462a      	mov	r2, r5
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <_svfiprintf_r+0x1f0>)
 80064ae:	a904      	add	r1, sp, #16
 80064b0:	4638      	mov	r0, r7
 80064b2:	f000 f91b 	bl	80066ec <_printf_i>
 80064b6:	e7ed      	b.n	8006494 <_svfiprintf_r+0x1c0>
 80064b8:	08006ef0 	.word	0x08006ef0
 80064bc:	08006efa 	.word	0x08006efa
 80064c0:	00000000 	.word	0x00000000
 80064c4:	08006215 	.word	0x08006215
 80064c8:	08006ef6 	.word	0x08006ef6

080064cc <sbrk_aligned>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4e0f      	ldr	r6, [pc, #60]	@ (800650c <sbrk_aligned+0x40>)
 80064d0:	460c      	mov	r4, r1
 80064d2:	6831      	ldr	r1, [r6, #0]
 80064d4:	4605      	mov	r5, r0
 80064d6:	b911      	cbnz	r1, 80064de <sbrk_aligned+0x12>
 80064d8:	f000 fa7c 	bl	80069d4 <_sbrk_r>
 80064dc:	6030      	str	r0, [r6, #0]
 80064de:	4621      	mov	r1, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 fa77 	bl	80069d4 <_sbrk_r>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d103      	bne.n	80064f2 <sbrk_aligned+0x26>
 80064ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80064ee:	4620      	mov	r0, r4
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	1cc4      	adds	r4, r0, #3
 80064f4:	f024 0403 	bic.w	r4, r4, #3
 80064f8:	42a0      	cmp	r0, r4
 80064fa:	d0f8      	beq.n	80064ee <sbrk_aligned+0x22>
 80064fc:	1a21      	subs	r1, r4, r0
 80064fe:	4628      	mov	r0, r5
 8006500:	f000 fa68 	bl	80069d4 <_sbrk_r>
 8006504:	3001      	adds	r0, #1
 8006506:	d1f2      	bne.n	80064ee <sbrk_aligned+0x22>
 8006508:	e7ef      	b.n	80064ea <sbrk_aligned+0x1e>
 800650a:	bf00      	nop
 800650c:	20000628 	.word	0x20000628

08006510 <_malloc_r>:
 8006510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006514:	1ccd      	adds	r5, r1, #3
 8006516:	f025 0503 	bic.w	r5, r5, #3
 800651a:	3508      	adds	r5, #8
 800651c:	2d0c      	cmp	r5, #12
 800651e:	bf38      	it	cc
 8006520:	250c      	movcc	r5, #12
 8006522:	2d00      	cmp	r5, #0
 8006524:	4606      	mov	r6, r0
 8006526:	db01      	blt.n	800652c <_malloc_r+0x1c>
 8006528:	42a9      	cmp	r1, r5
 800652a:	d904      	bls.n	8006536 <_malloc_r+0x26>
 800652c:	230c      	movs	r3, #12
 800652e:	6033      	str	r3, [r6, #0]
 8006530:	2000      	movs	r0, #0
 8006532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800660c <_malloc_r+0xfc>
 800653a:	f000 f9f7 	bl	800692c <__malloc_lock>
 800653e:	f8d8 3000 	ldr.w	r3, [r8]
 8006542:	461c      	mov	r4, r3
 8006544:	bb44      	cbnz	r4, 8006598 <_malloc_r+0x88>
 8006546:	4629      	mov	r1, r5
 8006548:	4630      	mov	r0, r6
 800654a:	f7ff ffbf 	bl	80064cc <sbrk_aligned>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	4604      	mov	r4, r0
 8006552:	d158      	bne.n	8006606 <_malloc_r+0xf6>
 8006554:	f8d8 4000 	ldr.w	r4, [r8]
 8006558:	4627      	mov	r7, r4
 800655a:	2f00      	cmp	r7, #0
 800655c:	d143      	bne.n	80065e6 <_malloc_r+0xd6>
 800655e:	2c00      	cmp	r4, #0
 8006560:	d04b      	beq.n	80065fa <_malloc_r+0xea>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	4639      	mov	r1, r7
 8006566:	4630      	mov	r0, r6
 8006568:	eb04 0903 	add.w	r9, r4, r3
 800656c:	f000 fa32 	bl	80069d4 <_sbrk_r>
 8006570:	4581      	cmp	r9, r0
 8006572:	d142      	bne.n	80065fa <_malloc_r+0xea>
 8006574:	6821      	ldr	r1, [r4, #0]
 8006576:	1a6d      	subs	r5, r5, r1
 8006578:	4629      	mov	r1, r5
 800657a:	4630      	mov	r0, r6
 800657c:	f7ff ffa6 	bl	80064cc <sbrk_aligned>
 8006580:	3001      	adds	r0, #1
 8006582:	d03a      	beq.n	80065fa <_malloc_r+0xea>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	442b      	add	r3, r5
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	f8d8 3000 	ldr.w	r3, [r8]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	bb62      	cbnz	r2, 80065ec <_malloc_r+0xdc>
 8006592:	f8c8 7000 	str.w	r7, [r8]
 8006596:	e00f      	b.n	80065b8 <_malloc_r+0xa8>
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	1b52      	subs	r2, r2, r5
 800659c:	d420      	bmi.n	80065e0 <_malloc_r+0xd0>
 800659e:	2a0b      	cmp	r2, #11
 80065a0:	d917      	bls.n	80065d2 <_malloc_r+0xc2>
 80065a2:	1961      	adds	r1, r4, r5
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	6025      	str	r5, [r4, #0]
 80065a8:	bf18      	it	ne
 80065aa:	6059      	strne	r1, [r3, #4]
 80065ac:	6863      	ldr	r3, [r4, #4]
 80065ae:	bf08      	it	eq
 80065b0:	f8c8 1000 	streq.w	r1, [r8]
 80065b4:	5162      	str	r2, [r4, r5]
 80065b6:	604b      	str	r3, [r1, #4]
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f9bd 	bl	8006938 <__malloc_unlock>
 80065be:	f104 000b 	add.w	r0, r4, #11
 80065c2:	1d23      	adds	r3, r4, #4
 80065c4:	f020 0007 	bic.w	r0, r0, #7
 80065c8:	1ac2      	subs	r2, r0, r3
 80065ca:	bf1c      	itt	ne
 80065cc:	1a1b      	subne	r3, r3, r0
 80065ce:	50a3      	strne	r3, [r4, r2]
 80065d0:	e7af      	b.n	8006532 <_malloc_r+0x22>
 80065d2:	6862      	ldr	r2, [r4, #4]
 80065d4:	42a3      	cmp	r3, r4
 80065d6:	bf0c      	ite	eq
 80065d8:	f8c8 2000 	streq.w	r2, [r8]
 80065dc:	605a      	strne	r2, [r3, #4]
 80065de:	e7eb      	b.n	80065b8 <_malloc_r+0xa8>
 80065e0:	4623      	mov	r3, r4
 80065e2:	6864      	ldr	r4, [r4, #4]
 80065e4:	e7ae      	b.n	8006544 <_malloc_r+0x34>
 80065e6:	463c      	mov	r4, r7
 80065e8:	687f      	ldr	r7, [r7, #4]
 80065ea:	e7b6      	b.n	800655a <_malloc_r+0x4a>
 80065ec:	461a      	mov	r2, r3
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	42a3      	cmp	r3, r4
 80065f2:	d1fb      	bne.n	80065ec <_malloc_r+0xdc>
 80065f4:	2300      	movs	r3, #0
 80065f6:	6053      	str	r3, [r2, #4]
 80065f8:	e7de      	b.n	80065b8 <_malloc_r+0xa8>
 80065fa:	230c      	movs	r3, #12
 80065fc:	6033      	str	r3, [r6, #0]
 80065fe:	4630      	mov	r0, r6
 8006600:	f000 f99a 	bl	8006938 <__malloc_unlock>
 8006604:	e794      	b.n	8006530 <_malloc_r+0x20>
 8006606:	6005      	str	r5, [r0, #0]
 8006608:	e7d6      	b.n	80065b8 <_malloc_r+0xa8>
 800660a:	bf00      	nop
 800660c:	2000062c 	.word	0x2000062c

08006610 <_printf_common>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	4616      	mov	r6, r2
 8006616:	4698      	mov	r8, r3
 8006618:	688a      	ldr	r2, [r1, #8]
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006620:	4293      	cmp	r3, r2
 8006622:	bfb8      	it	lt
 8006624:	4613      	movlt	r3, r2
 8006626:	6033      	str	r3, [r6, #0]
 8006628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800662c:	4607      	mov	r7, r0
 800662e:	460c      	mov	r4, r1
 8006630:	b10a      	cbz	r2, 8006636 <_printf_common+0x26>
 8006632:	3301      	adds	r3, #1
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	0699      	lsls	r1, r3, #26
 800663a:	bf42      	ittt	mi
 800663c:	6833      	ldrmi	r3, [r6, #0]
 800663e:	3302      	addmi	r3, #2
 8006640:	6033      	strmi	r3, [r6, #0]
 8006642:	6825      	ldr	r5, [r4, #0]
 8006644:	f015 0506 	ands.w	r5, r5, #6
 8006648:	d106      	bne.n	8006658 <_printf_common+0x48>
 800664a:	f104 0a19 	add.w	sl, r4, #25
 800664e:	68e3      	ldr	r3, [r4, #12]
 8006650:	6832      	ldr	r2, [r6, #0]
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	42ab      	cmp	r3, r5
 8006656:	dc26      	bgt.n	80066a6 <_printf_common+0x96>
 8006658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800665c:	6822      	ldr	r2, [r4, #0]
 800665e:	3b00      	subs	r3, #0
 8006660:	bf18      	it	ne
 8006662:	2301      	movne	r3, #1
 8006664:	0692      	lsls	r2, r2, #26
 8006666:	d42b      	bmi.n	80066c0 <_printf_common+0xb0>
 8006668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800666c:	4641      	mov	r1, r8
 800666e:	4638      	mov	r0, r7
 8006670:	47c8      	blx	r9
 8006672:	3001      	adds	r0, #1
 8006674:	d01e      	beq.n	80066b4 <_printf_common+0xa4>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	6922      	ldr	r2, [r4, #16]
 800667a:	f003 0306 	and.w	r3, r3, #6
 800667e:	2b04      	cmp	r3, #4
 8006680:	bf02      	ittt	eq
 8006682:	68e5      	ldreq	r5, [r4, #12]
 8006684:	6833      	ldreq	r3, [r6, #0]
 8006686:	1aed      	subeq	r5, r5, r3
 8006688:	68a3      	ldr	r3, [r4, #8]
 800668a:	bf0c      	ite	eq
 800668c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006690:	2500      	movne	r5, #0
 8006692:	4293      	cmp	r3, r2
 8006694:	bfc4      	itt	gt
 8006696:	1a9b      	subgt	r3, r3, r2
 8006698:	18ed      	addgt	r5, r5, r3
 800669a:	2600      	movs	r6, #0
 800669c:	341a      	adds	r4, #26
 800669e:	42b5      	cmp	r5, r6
 80066a0:	d11a      	bne.n	80066d8 <_printf_common+0xc8>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e008      	b.n	80066b8 <_printf_common+0xa8>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4652      	mov	r2, sl
 80066aa:	4641      	mov	r1, r8
 80066ac:	4638      	mov	r0, r7
 80066ae:	47c8      	blx	r9
 80066b0:	3001      	adds	r0, #1
 80066b2:	d103      	bne.n	80066bc <_printf_common+0xac>
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	3501      	adds	r5, #1
 80066be:	e7c6      	b.n	800664e <_printf_common+0x3e>
 80066c0:	18e1      	adds	r1, r4, r3
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	2030      	movs	r0, #48	@ 0x30
 80066c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066ca:	4422      	add	r2, r4
 80066cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066d4:	3302      	adds	r3, #2
 80066d6:	e7c7      	b.n	8006668 <_printf_common+0x58>
 80066d8:	2301      	movs	r3, #1
 80066da:	4622      	mov	r2, r4
 80066dc:	4641      	mov	r1, r8
 80066de:	4638      	mov	r0, r7
 80066e0:	47c8      	blx	r9
 80066e2:	3001      	adds	r0, #1
 80066e4:	d0e6      	beq.n	80066b4 <_printf_common+0xa4>
 80066e6:	3601      	adds	r6, #1
 80066e8:	e7d9      	b.n	800669e <_printf_common+0x8e>
	...

080066ec <_printf_i>:
 80066ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	7e0f      	ldrb	r7, [r1, #24]
 80066f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066f4:	2f78      	cmp	r7, #120	@ 0x78
 80066f6:	4691      	mov	r9, r2
 80066f8:	4680      	mov	r8, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	469a      	mov	sl, r3
 80066fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006702:	d807      	bhi.n	8006714 <_printf_i+0x28>
 8006704:	2f62      	cmp	r7, #98	@ 0x62
 8006706:	d80a      	bhi.n	800671e <_printf_i+0x32>
 8006708:	2f00      	cmp	r7, #0
 800670a:	f000 80d2 	beq.w	80068b2 <_printf_i+0x1c6>
 800670e:	2f58      	cmp	r7, #88	@ 0x58
 8006710:	f000 80b7 	beq.w	8006882 <_printf_i+0x196>
 8006714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800671c:	e03a      	b.n	8006794 <_printf_i+0xa8>
 800671e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006722:	2b15      	cmp	r3, #21
 8006724:	d8f6      	bhi.n	8006714 <_printf_i+0x28>
 8006726:	a101      	add	r1, pc, #4	@ (adr r1, 800672c <_printf_i+0x40>)
 8006728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800672c:	08006785 	.word	0x08006785
 8006730:	08006799 	.word	0x08006799
 8006734:	08006715 	.word	0x08006715
 8006738:	08006715 	.word	0x08006715
 800673c:	08006715 	.word	0x08006715
 8006740:	08006715 	.word	0x08006715
 8006744:	08006799 	.word	0x08006799
 8006748:	08006715 	.word	0x08006715
 800674c:	08006715 	.word	0x08006715
 8006750:	08006715 	.word	0x08006715
 8006754:	08006715 	.word	0x08006715
 8006758:	08006899 	.word	0x08006899
 800675c:	080067c3 	.word	0x080067c3
 8006760:	0800684f 	.word	0x0800684f
 8006764:	08006715 	.word	0x08006715
 8006768:	08006715 	.word	0x08006715
 800676c:	080068bb 	.word	0x080068bb
 8006770:	08006715 	.word	0x08006715
 8006774:	080067c3 	.word	0x080067c3
 8006778:	08006715 	.word	0x08006715
 800677c:	08006715 	.word	0x08006715
 8006780:	08006857 	.word	0x08006857
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6032      	str	r2, [r6, #0]
 800678c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006794:	2301      	movs	r3, #1
 8006796:	e09d      	b.n	80068d4 <_printf_i+0x1e8>
 8006798:	6833      	ldr	r3, [r6, #0]
 800679a:	6820      	ldr	r0, [r4, #0]
 800679c:	1d19      	adds	r1, r3, #4
 800679e:	6031      	str	r1, [r6, #0]
 80067a0:	0606      	lsls	r6, r0, #24
 80067a2:	d501      	bpl.n	80067a8 <_printf_i+0xbc>
 80067a4:	681d      	ldr	r5, [r3, #0]
 80067a6:	e003      	b.n	80067b0 <_printf_i+0xc4>
 80067a8:	0645      	lsls	r5, r0, #25
 80067aa:	d5fb      	bpl.n	80067a4 <_printf_i+0xb8>
 80067ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	da03      	bge.n	80067bc <_printf_i+0xd0>
 80067b4:	232d      	movs	r3, #45	@ 0x2d
 80067b6:	426d      	negs	r5, r5
 80067b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067bc:	4859      	ldr	r0, [pc, #356]	@ (8006924 <_printf_i+0x238>)
 80067be:	230a      	movs	r3, #10
 80067c0:	e010      	b.n	80067e4 <_printf_i+0xf8>
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	6833      	ldr	r3, [r6, #0]
 80067c6:	0608      	lsls	r0, r1, #24
 80067c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80067cc:	d402      	bmi.n	80067d4 <_printf_i+0xe8>
 80067ce:	0649      	lsls	r1, r1, #25
 80067d0:	bf48      	it	mi
 80067d2:	b2ad      	uxthmi	r5, r5
 80067d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80067d6:	4853      	ldr	r0, [pc, #332]	@ (8006924 <_printf_i+0x238>)
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	d159      	bne.n	8006890 <_printf_i+0x1a4>
 80067dc:	2308      	movs	r3, #8
 80067de:	2100      	movs	r1, #0
 80067e0:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067e4:	6866      	ldr	r6, [r4, #4]
 80067e6:	60a6      	str	r6, [r4, #8]
 80067e8:	2e00      	cmp	r6, #0
 80067ea:	db05      	blt.n	80067f8 <_printf_i+0x10c>
 80067ec:	6821      	ldr	r1, [r4, #0]
 80067ee:	432e      	orrs	r6, r5
 80067f0:	f021 0104 	bic.w	r1, r1, #4
 80067f4:	6021      	str	r1, [r4, #0]
 80067f6:	d04d      	beq.n	8006894 <_printf_i+0x1a8>
 80067f8:	4616      	mov	r6, r2
 80067fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80067fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006802:	5dc7      	ldrb	r7, [r0, r7]
 8006804:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006808:	462f      	mov	r7, r5
 800680a:	42bb      	cmp	r3, r7
 800680c:	460d      	mov	r5, r1
 800680e:	d9f4      	bls.n	80067fa <_printf_i+0x10e>
 8006810:	2b08      	cmp	r3, #8
 8006812:	d10b      	bne.n	800682c <_printf_i+0x140>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	07df      	lsls	r7, r3, #31
 8006818:	d508      	bpl.n	800682c <_printf_i+0x140>
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	6861      	ldr	r1, [r4, #4]
 800681e:	4299      	cmp	r1, r3
 8006820:	bfde      	ittt	le
 8006822:	2330      	movle	r3, #48	@ 0x30
 8006824:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006828:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800682c:	1b92      	subs	r2, r2, r6
 800682e:	6122      	str	r2, [r4, #16]
 8006830:	f8cd a000 	str.w	sl, [sp]
 8006834:	464b      	mov	r3, r9
 8006836:	aa03      	add	r2, sp, #12
 8006838:	4621      	mov	r1, r4
 800683a:	4640      	mov	r0, r8
 800683c:	f7ff fee8 	bl	8006610 <_printf_common>
 8006840:	3001      	adds	r0, #1
 8006842:	d14c      	bne.n	80068de <_printf_i+0x1f2>
 8006844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006848:	b004      	add	sp, #16
 800684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	f043 0320 	orr.w	r3, r3, #32
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	4834      	ldr	r0, [pc, #208]	@ (8006928 <_printf_i+0x23c>)
 8006858:	2778      	movs	r7, #120	@ 0x78
 800685a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	6831      	ldr	r1, [r6, #0]
 8006862:	061f      	lsls	r7, r3, #24
 8006864:	f851 5b04 	ldr.w	r5, [r1], #4
 8006868:	d402      	bmi.n	8006870 <_printf_i+0x184>
 800686a:	065f      	lsls	r7, r3, #25
 800686c:	bf48      	it	mi
 800686e:	b2ad      	uxthmi	r5, r5
 8006870:	6031      	str	r1, [r6, #0]
 8006872:	07d9      	lsls	r1, r3, #31
 8006874:	bf44      	itt	mi
 8006876:	f043 0320 	orrmi.w	r3, r3, #32
 800687a:	6023      	strmi	r3, [r4, #0]
 800687c:	b11d      	cbz	r5, 8006886 <_printf_i+0x19a>
 800687e:	2310      	movs	r3, #16
 8006880:	e7ad      	b.n	80067de <_printf_i+0xf2>
 8006882:	4828      	ldr	r0, [pc, #160]	@ (8006924 <_printf_i+0x238>)
 8006884:	e7e9      	b.n	800685a <_printf_i+0x16e>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f023 0320 	bic.w	r3, r3, #32
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	e7f6      	b.n	800687e <_printf_i+0x192>
 8006890:	230a      	movs	r3, #10
 8006892:	e7a4      	b.n	80067de <_printf_i+0xf2>
 8006894:	4616      	mov	r6, r2
 8006896:	e7bb      	b.n	8006810 <_printf_i+0x124>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	6825      	ldr	r5, [r4, #0]
 800689c:	6961      	ldr	r1, [r4, #20]
 800689e:	1d18      	adds	r0, r3, #4
 80068a0:	6030      	str	r0, [r6, #0]
 80068a2:	062e      	lsls	r6, r5, #24
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	d501      	bpl.n	80068ac <_printf_i+0x1c0>
 80068a8:	6019      	str	r1, [r3, #0]
 80068aa:	e002      	b.n	80068b2 <_printf_i+0x1c6>
 80068ac:	0668      	lsls	r0, r5, #25
 80068ae:	d5fb      	bpl.n	80068a8 <_printf_i+0x1bc>
 80068b0:	8019      	strh	r1, [r3, #0]
 80068b2:	2300      	movs	r3, #0
 80068b4:	6123      	str	r3, [r4, #16]
 80068b6:	4616      	mov	r6, r2
 80068b8:	e7ba      	b.n	8006830 <_printf_i+0x144>
 80068ba:	6833      	ldr	r3, [r6, #0]
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	6032      	str	r2, [r6, #0]
 80068c0:	681e      	ldr	r6, [r3, #0]
 80068c2:	6862      	ldr	r2, [r4, #4]
 80068c4:	2100      	movs	r1, #0
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7f9 fc6a 	bl	80001a0 <memchr>
 80068cc:	b108      	cbz	r0, 80068d2 <_printf_i+0x1e6>
 80068ce:	1b80      	subs	r0, r0, r6
 80068d0:	6060      	str	r0, [r4, #4]
 80068d2:	6863      	ldr	r3, [r4, #4]
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	2300      	movs	r3, #0
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068dc:	e7a8      	b.n	8006830 <_printf_i+0x144>
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	4632      	mov	r2, r6
 80068e2:	4649      	mov	r1, r9
 80068e4:	4640      	mov	r0, r8
 80068e6:	47d0      	blx	sl
 80068e8:	3001      	adds	r0, #1
 80068ea:	d0ab      	beq.n	8006844 <_printf_i+0x158>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	079b      	lsls	r3, r3, #30
 80068f0:	d413      	bmi.n	800691a <_printf_i+0x22e>
 80068f2:	68e0      	ldr	r0, [r4, #12]
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	4298      	cmp	r0, r3
 80068f8:	bfb8      	it	lt
 80068fa:	4618      	movlt	r0, r3
 80068fc:	e7a4      	b.n	8006848 <_printf_i+0x15c>
 80068fe:	2301      	movs	r3, #1
 8006900:	4632      	mov	r2, r6
 8006902:	4649      	mov	r1, r9
 8006904:	4640      	mov	r0, r8
 8006906:	47d0      	blx	sl
 8006908:	3001      	adds	r0, #1
 800690a:	d09b      	beq.n	8006844 <_printf_i+0x158>
 800690c:	3501      	adds	r5, #1
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	9903      	ldr	r1, [sp, #12]
 8006912:	1a5b      	subs	r3, r3, r1
 8006914:	42ab      	cmp	r3, r5
 8006916:	dcf2      	bgt.n	80068fe <_printf_i+0x212>
 8006918:	e7eb      	b.n	80068f2 <_printf_i+0x206>
 800691a:	2500      	movs	r5, #0
 800691c:	f104 0619 	add.w	r6, r4, #25
 8006920:	e7f5      	b.n	800690e <_printf_i+0x222>
 8006922:	bf00      	nop
 8006924:	08006f01 	.word	0x08006f01
 8006928:	08006f12 	.word	0x08006f12

0800692c <__malloc_lock>:
 800692c:	4801      	ldr	r0, [pc, #4]	@ (8006934 <__malloc_lock+0x8>)
 800692e:	f7ff bc6f 	b.w	8006210 <__retarget_lock_acquire_recursive>
 8006932:	bf00      	nop
 8006934:	20000624 	.word	0x20000624

08006938 <__malloc_unlock>:
 8006938:	4801      	ldr	r0, [pc, #4]	@ (8006940 <__malloc_unlock+0x8>)
 800693a:	f7ff bc6a 	b.w	8006212 <__retarget_lock_release_recursive>
 800693e:	bf00      	nop
 8006940:	20000624 	.word	0x20000624

08006944 <_realloc_r>:
 8006944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006948:	4607      	mov	r7, r0
 800694a:	4614      	mov	r4, r2
 800694c:	460d      	mov	r5, r1
 800694e:	b921      	cbnz	r1, 800695a <_realloc_r+0x16>
 8006950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006954:	4611      	mov	r1, r2
 8006956:	f7ff bddb 	b.w	8006510 <_malloc_r>
 800695a:	b92a      	cbnz	r2, 8006968 <_realloc_r+0x24>
 800695c:	f000 f858 	bl	8006a10 <_free_r>
 8006960:	4625      	mov	r5, r4
 8006962:	4628      	mov	r0, r5
 8006964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006968:	f000 f89c 	bl	8006aa4 <_malloc_usable_size_r>
 800696c:	4284      	cmp	r4, r0
 800696e:	4606      	mov	r6, r0
 8006970:	d802      	bhi.n	8006978 <_realloc_r+0x34>
 8006972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006976:	d8f4      	bhi.n	8006962 <_realloc_r+0x1e>
 8006978:	4621      	mov	r1, r4
 800697a:	4638      	mov	r0, r7
 800697c:	f7ff fdc8 	bl	8006510 <_malloc_r>
 8006980:	4680      	mov	r8, r0
 8006982:	b908      	cbnz	r0, 8006988 <_realloc_r+0x44>
 8006984:	4645      	mov	r5, r8
 8006986:	e7ec      	b.n	8006962 <_realloc_r+0x1e>
 8006988:	42b4      	cmp	r4, r6
 800698a:	4622      	mov	r2, r4
 800698c:	4629      	mov	r1, r5
 800698e:	bf28      	it	cs
 8006990:	4632      	movcs	r2, r6
 8006992:	f000 f82f 	bl	80069f4 <memcpy>
 8006996:	4629      	mov	r1, r5
 8006998:	4638      	mov	r0, r7
 800699a:	f000 f839 	bl	8006a10 <_free_r>
 800699e:	e7f1      	b.n	8006984 <_realloc_r+0x40>

080069a0 <memmove>:
 80069a0:	4288      	cmp	r0, r1
 80069a2:	b510      	push	{r4, lr}
 80069a4:	eb01 0402 	add.w	r4, r1, r2
 80069a8:	d902      	bls.n	80069b0 <memmove+0x10>
 80069aa:	4284      	cmp	r4, r0
 80069ac:	4623      	mov	r3, r4
 80069ae:	d807      	bhi.n	80069c0 <memmove+0x20>
 80069b0:	1e43      	subs	r3, r0, #1
 80069b2:	42a1      	cmp	r1, r4
 80069b4:	d007      	beq.n	80069c6 <memmove+0x26>
 80069b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069be:	e7f8      	b.n	80069b2 <memmove+0x12>
 80069c0:	4402      	add	r2, r0
 80069c2:	4282      	cmp	r2, r0
 80069c4:	d100      	bne.n	80069c8 <memmove+0x28>
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80069cc:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80069d0:	e7f7      	b.n	80069c2 <memmove+0x22>
	...

080069d4 <_sbrk_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d06      	ldr	r5, [pc, #24]	@ (80069f0 <_sbrk_r+0x1c>)
 80069d8:	2300      	movs	r3, #0
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fa fef0 	bl	80017c4 <_sbrk>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_sbrk_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_sbrk_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000630 	.word	0x20000630

080069f4 <memcpy>:
 80069f4:	440a      	add	r2, r1
 80069f6:	4291      	cmp	r1, r2
 80069f8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80069fc:	d100      	bne.n	8006a00 <memcpy+0xc>
 80069fe:	4770      	bx	lr
 8006a00:	b510      	push	{r4, lr}
 8006a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	d1f9      	bne.n	8006a02 <memcpy+0xe>
 8006a0e:	bd10      	pop	{r4, pc}

08006a10 <_free_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4605      	mov	r5, r0
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d041      	beq.n	8006a9c <_free_r+0x8c>
 8006a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1c:	1f0c      	subs	r4, r1, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	18e4      	addlt	r4, r4, r3
 8006a24:	f7ff ff82 	bl	800692c <__malloc_lock>
 8006a28:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa0 <_free_r+0x90>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	b933      	cbnz	r3, 8006a3c <_free_r+0x2c>
 8006a2e:	6063      	str	r3, [r4, #4]
 8006a30:	6014      	str	r4, [r2, #0]
 8006a32:	4628      	mov	r0, r5
 8006a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a38:	f7ff bf7e 	b.w	8006938 <__malloc_unlock>
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d908      	bls.n	8006a52 <_free_r+0x42>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	1821      	adds	r1, r4, r0
 8006a44:	428b      	cmp	r3, r1
 8006a46:	bf01      	itttt	eq
 8006a48:	6819      	ldreq	r1, [r3, #0]
 8006a4a:	685b      	ldreq	r3, [r3, #4]
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	e7ed      	b.n	8006a2e <_free_r+0x1e>
 8006a52:	461a      	mov	r2, r3
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	b10b      	cbz	r3, 8006a5c <_free_r+0x4c>
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	d9fa      	bls.n	8006a52 <_free_r+0x42>
 8006a5c:	6811      	ldr	r1, [r2, #0]
 8006a5e:	1850      	adds	r0, r2, r1
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d10b      	bne.n	8006a7c <_free_r+0x6c>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	4401      	add	r1, r0
 8006a68:	1850      	adds	r0, r2, r1
 8006a6a:	4283      	cmp	r3, r0
 8006a6c:	6011      	str	r1, [r2, #0]
 8006a6e:	d1e0      	bne.n	8006a32 <_free_r+0x22>
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	6053      	str	r3, [r2, #4]
 8006a76:	4408      	add	r0, r1
 8006a78:	6010      	str	r0, [r2, #0]
 8006a7a:	e7da      	b.n	8006a32 <_free_r+0x22>
 8006a7c:	d902      	bls.n	8006a84 <_free_r+0x74>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	e7d6      	b.n	8006a32 <_free_r+0x22>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	1821      	adds	r1, r4, r0
 8006a88:	428b      	cmp	r3, r1
 8006a8a:	bf04      	itt	eq
 8006a8c:	6819      	ldreq	r1, [r3, #0]
 8006a8e:	685b      	ldreq	r3, [r3, #4]
 8006a90:	6063      	str	r3, [r4, #4]
 8006a92:	bf04      	itt	eq
 8006a94:	1809      	addeq	r1, r1, r0
 8006a96:	6021      	streq	r1, [r4, #0]
 8006a98:	6054      	str	r4, [r2, #4]
 8006a9a:	e7ca      	b.n	8006a32 <_free_r+0x22>
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	2000062c 	.word	0x2000062c

08006aa4 <_malloc_usable_size_r>:
 8006aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa8:	1f18      	subs	r0, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bfbc      	itt	lt
 8006aae:	580b      	ldrlt	r3, [r1, r0]
 8006ab0:	18c0      	addlt	r0, r0, r3
 8006ab2:	4770      	bx	lr

08006ab4 <__udivmoddi4>:
 8006ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	9d08      	ldr	r5, [sp, #32]
 8006aba:	460f      	mov	r7, r1
 8006abc:	4604      	mov	r4, r0
 8006abe:	468c      	mov	ip, r1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d148      	bne.n	8006b56 <__udivmoddi4+0xa2>
 8006ac4:	428a      	cmp	r2, r1
 8006ac6:	4616      	mov	r6, r2
 8006ac8:	d961      	bls.n	8006b8e <__udivmoddi4+0xda>
 8006aca:	fab2 f382 	clz	r3, r2
 8006ace:	b14b      	cbz	r3, 8006ae4 <__udivmoddi4+0x30>
 8006ad0:	f1c3 0220 	rsb	r2, r3, #32
 8006ad4:	fa01 fc03 	lsl.w	ip, r1, r3
 8006ad8:	fa20 f202 	lsr.w	r2, r0, r2
 8006adc:	409e      	lsls	r6, r3
 8006ade:	ea42 0c0c 	orr.w	ip, r2, ip
 8006ae2:	409c      	lsls	r4, r3
 8006ae4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006ae8:	b2b7      	uxth	r7, r6
 8006aea:	fbbc f1fe 	udiv	r1, ip, lr
 8006aee:	0c22      	lsrs	r2, r4, #16
 8006af0:	fb0e cc11 	mls	ip, lr, r1, ip
 8006af4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8006af8:	fb01 f007 	mul.w	r0, r1, r7
 8006afc:	4290      	cmp	r0, r2
 8006afe:	d909      	bls.n	8006b14 <__udivmoddi4+0x60>
 8006b00:	18b2      	adds	r2, r6, r2
 8006b02:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 8006b06:	f080 80ee 	bcs.w	8006ce6 <__udivmoddi4+0x232>
 8006b0a:	4290      	cmp	r0, r2
 8006b0c:	f240 80eb 	bls.w	8006ce6 <__udivmoddi4+0x232>
 8006b10:	3902      	subs	r1, #2
 8006b12:	4432      	add	r2, r6
 8006b14:	1a12      	subs	r2, r2, r0
 8006b16:	b2a4      	uxth	r4, r4
 8006b18:	fbb2 f0fe 	udiv	r0, r2, lr
 8006b1c:	fb0e 2210 	mls	r2, lr, r0, r2
 8006b20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006b24:	fb00 f707 	mul.w	r7, r0, r7
 8006b28:	42a7      	cmp	r7, r4
 8006b2a:	d909      	bls.n	8006b40 <__udivmoddi4+0x8c>
 8006b2c:	1934      	adds	r4, r6, r4
 8006b2e:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8006b32:	f080 80da 	bcs.w	8006cea <__udivmoddi4+0x236>
 8006b36:	42a7      	cmp	r7, r4
 8006b38:	f240 80d7 	bls.w	8006cea <__udivmoddi4+0x236>
 8006b3c:	4434      	add	r4, r6
 8006b3e:	3802      	subs	r0, #2
 8006b40:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006b44:	1be4      	subs	r4, r4, r7
 8006b46:	2100      	movs	r1, #0
 8006b48:	b11d      	cbz	r5, 8006b52 <__udivmoddi4+0x9e>
 8006b4a:	40dc      	lsrs	r4, r3
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e9c5 4300 	strd	r4, r3, [r5]
 8006b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b56:	428b      	cmp	r3, r1
 8006b58:	d906      	bls.n	8006b68 <__udivmoddi4+0xb4>
 8006b5a:	b10d      	cbz	r5, 8006b60 <__udivmoddi4+0xac>
 8006b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8006b60:	2100      	movs	r1, #0
 8006b62:	4608      	mov	r0, r1
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	fab3 f183 	clz	r1, r3
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d148      	bne.n	8006c02 <__udivmoddi4+0x14e>
 8006b70:	42bb      	cmp	r3, r7
 8006b72:	d302      	bcc.n	8006b7a <__udivmoddi4+0xc6>
 8006b74:	4282      	cmp	r2, r0
 8006b76:	f200 8107 	bhi.w	8006d88 <__udivmoddi4+0x2d4>
 8006b7a:	1a84      	subs	r4, r0, r2
 8006b7c:	eb67 0203 	sbc.w	r2, r7, r3
 8006b80:	2001      	movs	r0, #1
 8006b82:	4694      	mov	ip, r2
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	d0e4      	beq.n	8006b52 <__udivmoddi4+0x9e>
 8006b88:	e9c5 4c00 	strd	r4, ip, [r5]
 8006b8c:	e7e1      	b.n	8006b52 <__udivmoddi4+0x9e>
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	f000 8092 	beq.w	8006cb8 <__udivmoddi4+0x204>
 8006b94:	fab2 f382 	clz	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 80a8 	bne.w	8006cee <__udivmoddi4+0x23a>
 8006b9e:	1a8a      	subs	r2, r1, r2
 8006ba0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006ba4:	fa1f fc86 	uxth.w	ip, r6
 8006ba8:	2101      	movs	r1, #1
 8006baa:	0c20      	lsrs	r0, r4, #16
 8006bac:	fbb2 f7fe 	udiv	r7, r2, lr
 8006bb0:	fb0e 2217 	mls	r2, lr, r7, r2
 8006bb4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8006bb8:	fb0c f007 	mul.w	r0, ip, r7
 8006bbc:	4290      	cmp	r0, r2
 8006bbe:	d907      	bls.n	8006bd0 <__udivmoddi4+0x11c>
 8006bc0:	18b2      	adds	r2, r6, r2
 8006bc2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006bc6:	d202      	bcs.n	8006bce <__udivmoddi4+0x11a>
 8006bc8:	4290      	cmp	r0, r2
 8006bca:	f200 80e2 	bhi.w	8006d92 <__udivmoddi4+0x2de>
 8006bce:	4647      	mov	r7, r8
 8006bd0:	1a12      	subs	r2, r2, r0
 8006bd2:	b2a4      	uxth	r4, r4
 8006bd4:	fbb2 f0fe 	udiv	r0, r2, lr
 8006bd8:	fb0e 2210 	mls	r2, lr, r0, r2
 8006bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006be0:	fb0c fc00 	mul.w	ip, ip, r0
 8006be4:	45a4      	cmp	ip, r4
 8006be6:	d907      	bls.n	8006bf8 <__udivmoddi4+0x144>
 8006be8:	1934      	adds	r4, r6, r4
 8006bea:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8006bee:	d202      	bcs.n	8006bf6 <__udivmoddi4+0x142>
 8006bf0:	45a4      	cmp	ip, r4
 8006bf2:	f200 80cb 	bhi.w	8006d8c <__udivmoddi4+0x2d8>
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	eba4 040c 	sub.w	r4, r4, ip
 8006bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006c00:	e7a2      	b.n	8006b48 <__udivmoddi4+0x94>
 8006c02:	f1c1 0620 	rsb	r6, r1, #32
 8006c06:	408b      	lsls	r3, r1
 8006c08:	fa22 fc06 	lsr.w	ip, r2, r6
 8006c0c:	ea4c 0c03 	orr.w	ip, ip, r3
 8006c10:	fa07 f401 	lsl.w	r4, r7, r1
 8006c14:	fa20 f306 	lsr.w	r3, r0, r6
 8006c18:	40f7      	lsrs	r7, r6
 8006c1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006c1e:	4323      	orrs	r3, r4
 8006c20:	fa00 f801 	lsl.w	r8, r0, r1
 8006c24:	fa1f fe8c 	uxth.w	lr, ip
 8006c28:	fbb7 f0f9 	udiv	r0, r7, r9
 8006c2c:	0c1c      	lsrs	r4, r3, #16
 8006c2e:	fb09 7710 	mls	r7, r9, r0, r7
 8006c32:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8006c36:	fb00 f70e 	mul.w	r7, r0, lr
 8006c3a:	42a7      	cmp	r7, r4
 8006c3c:	fa02 f201 	lsl.w	r2, r2, r1
 8006c40:	d90a      	bls.n	8006c58 <__udivmoddi4+0x1a4>
 8006c42:	eb1c 0404 	adds.w	r4, ip, r4
 8006c46:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8006c4a:	f080 809b 	bcs.w	8006d84 <__udivmoddi4+0x2d0>
 8006c4e:	42a7      	cmp	r7, r4
 8006c50:	f240 8098 	bls.w	8006d84 <__udivmoddi4+0x2d0>
 8006c54:	3802      	subs	r0, #2
 8006c56:	4464      	add	r4, ip
 8006c58:	1be4      	subs	r4, r4, r7
 8006c5a:	b29f      	uxth	r7, r3
 8006c5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8006c60:	fb09 4413 	mls	r4, r9, r3, r4
 8006c64:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8006c68:	fb03 fe0e 	mul.w	lr, r3, lr
 8006c6c:	45a6      	cmp	lr, r4
 8006c6e:	d909      	bls.n	8006c84 <__udivmoddi4+0x1d0>
 8006c70:	eb1c 0404 	adds.w	r4, ip, r4
 8006c74:	f103 37ff 	add.w	r7, r3, #4294967295	@ 0xffffffff
 8006c78:	f080 8082 	bcs.w	8006d80 <__udivmoddi4+0x2cc>
 8006c7c:	45a6      	cmp	lr, r4
 8006c7e:	d97f      	bls.n	8006d80 <__udivmoddi4+0x2cc>
 8006c80:	3b02      	subs	r3, #2
 8006c82:	4464      	add	r4, ip
 8006c84:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006c88:	eba4 040e 	sub.w	r4, r4, lr
 8006c8c:	fba0 e702 	umull	lr, r7, r0, r2
 8006c90:	42bc      	cmp	r4, r7
 8006c92:	4673      	mov	r3, lr
 8006c94:	46b9      	mov	r9, r7
 8006c96:	d363      	bcc.n	8006d60 <__udivmoddi4+0x2ac>
 8006c98:	d060      	beq.n	8006d5c <__udivmoddi4+0x2a8>
 8006c9a:	b15d      	cbz	r5, 8006cb4 <__udivmoddi4+0x200>
 8006c9c:	ebb8 0203 	subs.w	r2, r8, r3
 8006ca0:	eb64 0409 	sbc.w	r4, r4, r9
 8006ca4:	fa04 f606 	lsl.w	r6, r4, r6
 8006ca8:	fa22 f301 	lsr.w	r3, r2, r1
 8006cac:	431e      	orrs	r6, r3
 8006cae:	40cc      	lsrs	r4, r1
 8006cb0:	e9c5 6400 	strd	r6, r4, [r5]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	e74c      	b.n	8006b52 <__udivmoddi4+0x9e>
 8006cb8:	0862      	lsrs	r2, r4, #1
 8006cba:	0848      	lsrs	r0, r1, #1
 8006cbc:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8006cc0:	0c0b      	lsrs	r3, r1, #16
 8006cc2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006cc6:	b28a      	uxth	r2, r1
 8006cc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ccc:	fbb3 f1f6 	udiv	r1, r3, r6
 8006cd0:	07e4      	lsls	r4, r4, #31
 8006cd2:	46b4      	mov	ip, r6
 8006cd4:	4637      	mov	r7, r6
 8006cd6:	46b6      	mov	lr, r6
 8006cd8:	231f      	movs	r3, #31
 8006cda:	fbb0 f0f6 	udiv	r0, r0, r6
 8006cde:	1bd2      	subs	r2, r2, r7
 8006ce0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ce4:	e761      	b.n	8006baa <__udivmoddi4+0xf6>
 8006ce6:	4661      	mov	r1, ip
 8006ce8:	e714      	b.n	8006b14 <__udivmoddi4+0x60>
 8006cea:	4610      	mov	r0, r2
 8006cec:	e728      	b.n	8006b40 <__udivmoddi4+0x8c>
 8006cee:	f1c3 0120 	rsb	r1, r3, #32
 8006cf2:	fa20 f201 	lsr.w	r2, r0, r1
 8006cf6:	409e      	lsls	r6, r3
 8006cf8:	fa27 f101 	lsr.w	r1, r7, r1
 8006cfc:	409f      	lsls	r7, r3
 8006cfe:	433a      	orrs	r2, r7
 8006d00:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006d04:	fa1f fc86 	uxth.w	ip, r6
 8006d08:	fbb1 f7fe 	udiv	r7, r1, lr
 8006d0c:	fb0e 1017 	mls	r0, lr, r7, r1
 8006d10:	0c11      	lsrs	r1, r2, #16
 8006d12:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d16:	fb07 f80c 	mul.w	r8, r7, ip
 8006d1a:	4588      	cmp	r8, r1
 8006d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8006d20:	d93a      	bls.n	8006d98 <__udivmoddi4+0x2e4>
 8006d22:	1871      	adds	r1, r6, r1
 8006d24:	f107 30ff 	add.w	r0, r7, #4294967295	@ 0xffffffff
 8006d28:	d201      	bcs.n	8006d2e <__udivmoddi4+0x27a>
 8006d2a:	4588      	cmp	r8, r1
 8006d2c:	d81f      	bhi.n	8006d6e <__udivmoddi4+0x2ba>
 8006d2e:	eba1 0108 	sub.w	r1, r1, r8
 8006d32:	fbb1 f8fe 	udiv	r8, r1, lr
 8006d36:	fb08 f70c 	mul.w	r7, r8, ip
 8006d3a:	fb0e 1118 	mls	r1, lr, r8, r1
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006d44:	42ba      	cmp	r2, r7
 8006d46:	d22f      	bcs.n	8006da8 <__udivmoddi4+0x2f4>
 8006d48:	18b2      	adds	r2, r6, r2
 8006d4a:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8006d4e:	d2c6      	bcs.n	8006cde <__udivmoddi4+0x22a>
 8006d50:	42ba      	cmp	r2, r7
 8006d52:	d2c4      	bcs.n	8006cde <__udivmoddi4+0x22a>
 8006d54:	f1a8 0102 	sub.w	r1, r8, #2
 8006d58:	4432      	add	r2, r6
 8006d5a:	e7c0      	b.n	8006cde <__udivmoddi4+0x22a>
 8006d5c:	45f0      	cmp	r8, lr
 8006d5e:	d29c      	bcs.n	8006c9a <__udivmoddi4+0x1e6>
 8006d60:	ebbe 0302 	subs.w	r3, lr, r2
 8006d64:	eb67 070c 	sbc.w	r7, r7, ip
 8006d68:	3801      	subs	r0, #1
 8006d6a:	46b9      	mov	r9, r7
 8006d6c:	e795      	b.n	8006c9a <__udivmoddi4+0x1e6>
 8006d6e:	eba6 0808 	sub.w	r8, r6, r8
 8006d72:	4441      	add	r1, r8
 8006d74:	1eb8      	subs	r0, r7, #2
 8006d76:	fbb1 f8fe 	udiv	r8, r1, lr
 8006d7a:	fb08 f70c 	mul.w	r7, r8, ip
 8006d7e:	e7dc      	b.n	8006d3a <__udivmoddi4+0x286>
 8006d80:	463b      	mov	r3, r7
 8006d82:	e77f      	b.n	8006c84 <__udivmoddi4+0x1d0>
 8006d84:	4650      	mov	r0, sl
 8006d86:	e767      	b.n	8006c58 <__udivmoddi4+0x1a4>
 8006d88:	4608      	mov	r0, r1
 8006d8a:	e6fb      	b.n	8006b84 <__udivmoddi4+0xd0>
 8006d8c:	4434      	add	r4, r6
 8006d8e:	3802      	subs	r0, #2
 8006d90:	e732      	b.n	8006bf8 <__udivmoddi4+0x144>
 8006d92:	3f02      	subs	r7, #2
 8006d94:	4432      	add	r2, r6
 8006d96:	e71b      	b.n	8006bd0 <__udivmoddi4+0x11c>
 8006d98:	eba1 0108 	sub.w	r1, r1, r8
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	fbb1 f8fe 	udiv	r8, r1, lr
 8006da2:	fb08 f70c 	mul.w	r7, r8, ip
 8006da6:	e7c8      	b.n	8006d3a <__udivmoddi4+0x286>
 8006da8:	4641      	mov	r1, r8
 8006daa:	e798      	b.n	8006cde <__udivmoddi4+0x22a>

08006dac <_init>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr

08006db8 <_fini>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr

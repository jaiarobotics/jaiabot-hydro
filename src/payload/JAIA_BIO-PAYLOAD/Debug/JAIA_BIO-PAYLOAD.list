
JAIA_BIO-PAYLOAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006d1c  08006d1c  00007d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e14  08006e14  0000807c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e1c  08006e1c  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e1c  08006e1c  00007e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e20  08006e20  00007e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006e24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000007c  08006ea0  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08006ea0  0000864c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017761  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b03  00000000  00000000  0001f80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00022310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011bb  00000000  00000000  000239a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000462c  00000000  00000000  00024b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a07a  00000000  00000000  00029187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb94b  00000000  00000000  00043201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000088  00000000  00000000  0012eb4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066c0  00000000  00000000  0012ebd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000249  00000000  00000000  00135294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b80c 	b.w	8000270 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f006 fbd4 	bl	8006a0c <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__aeabi_idiv0>:
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <deregister_tm_clones>:
 8000274:	4803      	ldr	r0, [pc, #12]	@ (8000284 <deregister_tm_clones+0x10>)
 8000276:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <deregister_tm_clones+0x14>)
 8000278:	4283      	cmp	r3, r0
 800027a:	d002      	beq.n	8000282 <deregister_tm_clones+0xe>
 800027c:	4b03      	ldr	r3, [pc, #12]	@ (800028c <deregister_tm_clones+0x18>)
 800027e:	b103      	cbz	r3, 8000282 <deregister_tm_clones+0xe>
 8000280:	4718      	bx	r3
 8000282:	4770      	bx	lr
 8000284:	2000007c 	.word	0x2000007c
 8000288:	2000007c 	.word	0x2000007c
 800028c:	00000000 	.word	0x00000000

08000290 <register_tm_clones>:
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <register_tm_clones+0x18>)
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <register_tm_clones+0x1c>)
 8000294:	1a1b      	subs	r3, r3, r0
 8000296:	0fd9      	lsrs	r1, r3, #31
 8000298:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 800029c:	1049      	asrs	r1, r1, #1
 800029e:	d002      	beq.n	80002a6 <register_tm_clones+0x16>
 80002a0:	4b03      	ldr	r3, [pc, #12]	@ (80002b0 <register_tm_clones+0x20>)
 80002a2:	b103      	cbz	r3, 80002a6 <register_tm_clones+0x16>
 80002a4:	4718      	bx	r3
 80002a6:	4770      	bx	lr
 80002a8:	2000007c 	.word	0x2000007c
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	00000000 	.word	0x00000000

080002b4 <__do_global_dtors_aux>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	4c06      	ldr	r4, [pc, #24]	@ (80002d0 <__do_global_dtors_aux+0x1c>)
 80002b8:	7823      	ldrb	r3, [r4, #0]
 80002ba:	b943      	cbnz	r3, 80002ce <__do_global_dtors_aux+0x1a>
 80002bc:	f7ff ffda 	bl	8000274 <deregister_tm_clones>
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <__do_global_dtors_aux+0x20>)
 80002c2:	b113      	cbz	r3, 80002ca <__do_global_dtors_aux+0x16>
 80002c4:	4804      	ldr	r0, [pc, #16]	@ (80002d8 <__do_global_dtors_aux+0x24>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	2301      	movs	r3, #1
 80002cc:	7023      	strb	r3, [r4, #0]
 80002ce:	bd10      	pop	{r4, pc}
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	00000000 	.word	0x00000000
 80002d8:	08006d04 	.word	0x08006d04

080002dc <frame_dummy>:
 80002dc:	b508      	push	{r3, lr}
 80002de:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <frame_dummy+0x18>)
 80002e0:	b11b      	cbz	r3, 80002ea <frame_dummy+0xe>
 80002e2:	4905      	ldr	r1, [pc, #20]	@ (80002f8 <frame_dummy+0x1c>)
 80002e4:	4805      	ldr	r0, [pc, #20]	@ (80002fc <frame_dummy+0x20>)
 80002e6:	f3af 8000 	nop.w
 80002ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002ee:	f7ff bfcf 	b.w	8000290 <register_tm_clones>
 80002f2:	bf00      	nop
 80002f4:	00000000 	.word	0x00000000
 80002f8:	20000080 	.word	0x20000080
 80002fc:	08006d04 	.word	0x08006d04

08000300 <I2C_Scan>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Loop through memory addresses to find addresses with I2C devices on them
void I2C_Scan(void) {
 8000300:	b5b0      	push	{r4, r5, r7, lr}
 8000302:	b094      	sub	sp, #80	@ 0x50
 8000304:	af00      	add	r7, sp, #0
  uint8_t Buffer[25] = {0};
 8000306:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]
 8000316:	615a      	str	r2, [r3, #20]
 8000318:	761a      	strb	r2, [r3, #24]
  uint8_t Space[] = " - ";
 800031a:	4b31      	ldr	r3, [pc, #196]	@ (80003e0 <I2C_Scan+0xe0>)
 800031c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 800031e:	4b31      	ldr	r3, [pc, #196]	@ (80003e4 <I2C_Scan+0xe4>)
 8000320:	f107 0414 	add.w	r4, r7, #20
 8000324:	461d      	mov	r5, r3
 8000326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800032a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800032e:	c403      	stmia	r4!, {r0, r1}
 8000330:	8022      	strh	r2, [r4, #0]
  uint8_t EndMSG[] = "\r\n\r\n Done! \r\n\r\n";
 8000332:	4b2d      	ldr	r3, [pc, #180]	@ (80003e8 <I2C_Scan+0xe8>)
 8000334:	1d3c      	adds	r4, r7, #4
 8000336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t i = 0, ret;
 800033c:	2300      	movs	r3, #0
 800033e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 8000342:	f107 0114 	add.w	r1, r7, #20
 8000346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800034a:	221a      	movs	r2, #26
 800034c:	4827      	ldr	r0, [pc, #156]	@ (80003ec <I2C_Scan+0xec>)
 800034e:	f005 f9b7 	bl	80056c0 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 8000352:	2301      	movs	r3, #1
 8000354:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000358:	e032      	b.n	80003c0 <I2C_Scan+0xc0>
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 800035a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800035e:	b29b      	uxth	r3, r3
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	b299      	uxth	r1, r3
 8000364:	2305      	movs	r3, #5
 8000366:	2203      	movs	r2, #3
 8000368:	4821      	ldr	r0, [pc, #132]	@ (80003f0 <I2C_Scan+0xf0>)
 800036a:	f002 ff4d 	bl	8003208 <HAL_I2C_IsDeviceReady>
 800036e:	4603      	mov	r3, r0
 8000370:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
      if (ret != HAL_OK) /* No ACK Received At That Address */
 8000374:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000378:	2b00      	cmp	r3, #0
 800037a:	d008      	beq.n	800038e <I2C_Scan+0x8e>
      {
        HAL_UART_Transmit(&huart2, Space, sizeof(Space), HAL_MAX_DELAY);
 800037c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000384:	2204      	movs	r2, #4
 8000386:	4819      	ldr	r0, [pc, #100]	@ (80003ec <I2C_Scan+0xec>)
 8000388:	f005 f99a 	bl	80056c0 <HAL_UART_Transmit>
 800038c:	e013      	b.n	80003b6 <I2C_Scan+0xb6>
      } else if (ret == HAL_OK) {
 800038e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10f      	bne.n	80003b6 <I2C_Scan+0xb6>
        sprintf(Buffer, "0x%X", i);
 8000396:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800039a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800039e:	4915      	ldr	r1, [pc, #84]	@ (80003f4 <I2C_Scan+0xf4>)
 80003a0:	4618      	mov	r0, r3
 80003a2:	f005 fe8d 	bl	80060c0 <siprintf>
        HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 80003a6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003ae:	2219      	movs	r2, #25
 80003b0:	480e      	ldr	r0, [pc, #56]	@ (80003ec <I2C_Scan+0xec>)
 80003b2:	f005 f985 	bl	80056c0 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80003b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80003ba:	3301      	adds	r3, #1
 80003bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80003c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	dac8      	bge.n	800035a <I2C_Scan+0x5a>
      }
  }
  HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 80003c8:	1d39      	adds	r1, r7, #4
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003ce:	2210      	movs	r2, #16
 80003d0:	4806      	ldr	r0, [pc, #24]	@ (80003ec <I2C_Scan+0xec>)
 80003d2:	f005 f975 	bl	80056c0 <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

  return;
 80003d6:	bf00      	nop
}
 80003d8:	3750      	adds	r7, #80	@ 0x50
 80003da:	46bd      	mov	sp, r7
 80003dc:	bdb0      	pop	{r4, r5, r7, pc}
 80003de:	bf00      	nop
 80003e0:	00202d20 	.word	0x00202d20
 80003e4:	08006d24 	.word	0x08006d24
 80003e8:	08006d40 	.word	0x08006d40
 80003ec:	20000308 	.word	0x20000308
 80003f0:	20000150 	.word	0x20000150
 80003f4:	08006d1c 	.word	0x08006d1c

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fe:	f001 fa5e 	bl	80018be <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000402:	f000 f8a9 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000406:	f000 fbf5 	bl	8000bf4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800040a:	f000 f909 	bl	8000620 <MX_ADC1_Init>
  MX_I2C1_Init();
 800040e:	f000 f96d 	bl	80006ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8000412:	f000 f9ab 	bl	800076c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000416:	f000 f9e9 	bl	80007ec <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800041a:	f000 fa27 	bl	800086c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800041e:	f000 fa53 	bl	80008c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000422:	f000 fa81 	bl	8000928 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000426:	f000 faaf 	bl	8000988 <MX_SPI1_Init>
  MX_TIM1_Init();
 800042a:	f000 faeb 	bl	8000a04 <MX_TIM1_Init>
  MX_TIM2_Init();
 800042e:	f000 fb43 	bl	8000ab8 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000432:	f000 fb95 	bl	8000b60 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  //RebootIntoDFU();

  // Turn on Atlas Sensors
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET); // pH
 8000436:	2201      	movs	r2, #1
 8000438:	2120      	movs	r1, #32
 800043a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043e:	f002 fbe7 	bl	8002c10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET); // DO
 8000442:	2201      	movs	r2, #1
 8000444:	2104      	movs	r1, #4
 8000446:	483a      	ldr	r0, [pc, #232]	@ (8000530 <main+0x138>)
 8000448:	f002 fbe2 	bl	8002c10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET); // EC
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000452:	4837      	ldr	r0, [pc, #220]	@ (8000530 <main+0x138>)
 8000454:	f002 fbdc 	bl	8002c10 <HAL_GPIO_WritePin>

  // Look for powered-up I2C devices on i2c bus 2
  I2C_Scan();
 8000458:	f7ff ff52 	bl	8000300 <I2C_Scan>

  // Assign the I2C address of each Atlas Scientific chip to its respective object
  ec.devAddr = EC_OEM_I2C_ADDR;
 800045c:	4b35      	ldr	r3, [pc, #212]	@ (8000534 <main+0x13c>)
 800045e:	22c8      	movs	r2, #200	@ 0xc8
 8000460:	725a      	strb	r2, [r3, #9]
  ph.devAddr = PH_OEM_I2C_ADDR;
 8000462:	4b35      	ldr	r3, [pc, #212]	@ (8000538 <main+0x140>)
 8000464:	22ca      	movs	r2, #202	@ 0xca
 8000466:	725a      	strb	r2, [r3, #9]
  dOxy.devAddr = DO_OEM_I2C_ADDR;
 8000468:	4b34      	ldr	r3, [pc, #208]	@ (800053c <main+0x144>)
 800046a:	22ce      	movs	r2, #206	@ 0xce
 800046c:	725a      	strb	r2, [r3, #9]

  // Activate our Atlas Scientific chips
  HAL_StatusTypeDef ec_init_status = OEM_Init(&ec, &hi2c2);
 800046e:	4934      	ldr	r1, [pc, #208]	@ (8000540 <main+0x148>)
 8000470:	4830      	ldr	r0, [pc, #192]	@ (8000534 <main+0x13c>)
 8000472:	f000 fca5 	bl	8000dc0 <OEM_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef do_init_status = OEM_Init(&dOxy, &hi2c2);
 800047a:	4931      	ldr	r1, [pc, #196]	@ (8000540 <main+0x148>)
 800047c:	482f      	ldr	r0, [pc, #188]	@ (800053c <main+0x144>)
 800047e:	f000 fc9f 	bl	8000dc0 <OEM_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ph_init_status = OEM_Init(&ph, &hi2c2);
 8000486:	492e      	ldr	r1, [pc, #184]	@ (8000540 <main+0x148>)
 8000488:	482b      	ldr	r0, [pc, #172]	@ (8000538 <main+0x140>)
 800048a:	f000 fc99 	bl	8000dc0 <OEM_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	717b      	strb	r3, [r7, #5]

  sprintf(tx_buff, "EC_Init Status: 0x%02X\r\n", ec_init_status);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	461a      	mov	r2, r3
 8000496:	492b      	ldr	r1, [pc, #172]	@ (8000544 <main+0x14c>)
 8000498:	482b      	ldr	r0, [pc, #172]	@ (8000548 <main+0x150>)
 800049a:	f005 fe11 	bl	80060c0 <siprintf>
  HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 800049e:	482a      	ldr	r0, [pc, #168]	@ (8000548 <main+0x150>)
 80004a0:	f7ff fe76 	bl	8000190 <strlen>
 80004a4:	4603      	mov	r3, r0
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004ac:	4926      	ldr	r1, [pc, #152]	@ (8000548 <main+0x150>)
 80004ae:	4827      	ldr	r0, [pc, #156]	@ (800054c <main+0x154>)
 80004b0:	f005 f906 	bl	80056c0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    HAL_Delay(1000);  // Pause for 1 sec (1000 ms)
 80004b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004b8:	f001 fa76 	bl	80019a8 <HAL_Delay>

    /* LEDs */
    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 80004bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004c0:	4823      	ldr	r0, [pc, #140]	@ (8000550 <main+0x158>)
 80004c2:	f002 fbbd 	bl	8002c40 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_11);
 80004c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ca:	4821      	ldr	r0, [pc, #132]	@ (8000550 <main+0x158>)
 80004cc:	f002 fbb8 	bl	8002c40 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_12);
 80004d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004d4:	481e      	ldr	r0, [pc, #120]	@ (8000550 <main+0x158>)
 80004d6:	f002 fbb3 	bl	8002c40 <HAL_GPIO_TogglePin>
	  
    HAL_StatusTypeDef phReadStatus = OEM_ReadData(&ph);
 80004da:	4817      	ldr	r0, [pc, #92]	@ (8000538 <main+0x140>)
 80004dc:	f000 fcc2 	bl	8000e64 <OEM_ReadData>
 80004e0:	4603      	mov	r3, r0
 80004e2:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef doReadStatus = OEM_ReadData(&dOxy);
 80004e4:	4815      	ldr	r0, [pc, #84]	@ (800053c <main+0x144>)
 80004e6:	f000 fcbd 	bl	8000e64 <OEM_ReadData>
 80004ea:	4603      	mov	r3, r0
 80004ec:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ecReadStatus = OEM_ReadData(&ec);
 80004ee:	4811      	ldr	r0, [pc, #68]	@ (8000534 <main+0x13c>)
 80004f0:	f000 fcb8 	bl	8000e64 <OEM_ReadData>
 80004f4:	4603      	mov	r3, r0
 80004f6:	70bb      	strb	r3, [r7, #2]

    sprintf(tx_buff, "PH: 0x%02X, 0x%02X\r\nEC: 0x%02X, 0x%02X\r\n\r\n", phReadStatus, ph.reading, ecReadStatus, ec.reading);
 80004f8:	7939      	ldrb	r1, [r7, #4]
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <main+0x140>)
 80004fc:	6858      	ldr	r0, [r3, #4]
 80004fe:	78bb      	ldrb	r3, [r7, #2]
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <main+0x13c>)
 8000502:	6852      	ldr	r2, [r2, #4]
 8000504:	9201      	str	r2, [sp, #4]
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	4603      	mov	r3, r0
 800050a:	460a      	mov	r2, r1
 800050c:	4911      	ldr	r1, [pc, #68]	@ (8000554 <main+0x15c>)
 800050e:	480e      	ldr	r0, [pc, #56]	@ (8000548 <main+0x150>)
 8000510:	f005 fdd6 	bl	80060c0 <siprintf>
    HAL_UART_Transmit(&huart2, tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8000514:	480c      	ldr	r0, [pc, #48]	@ (8000548 <main+0x150>)
 8000516:	f7ff fe3b 	bl	8000190 <strlen>
 800051a:	4603      	mov	r3, r0
 800051c:	b29a      	uxth	r2, r3
 800051e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000522:	4909      	ldr	r1, [pc, #36]	@ (8000548 <main+0x150>)
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <main+0x154>)
 8000526:	f005 f8cb 	bl	80056c0 <HAL_UART_Transmit>
  {
 800052a:	bf00      	nop
 800052c:	e7c2      	b.n	80004b4 <main+0xbc>
 800052e:	bf00      	nop
 8000530:	48000400 	.word	0x48000400
 8000534:	200004d8 	.word	0x200004d8
 8000538:	200004f0 	.word	0x200004f0
 800053c:	200004e4 	.word	0x200004e4
 8000540:	20000150 	.word	0x20000150
 8000544:	08006d50 	.word	0x08006d50
 8000548:	20000000 	.word	0x20000000
 800054c:	20000308 	.word	0x20000308
 8000550:	48000800 	.word	0x48000800
 8000554:	08006d6c 	.word	0x08006d6c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	@ 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	@ 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fdcc 	bl	8006104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057e:	f003 faa7 	bl	8003ad0 <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 fc14 	bl	8000db4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800058c:	f003 fa82 	bl	8003a94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <SystemClock_Config+0xc4>)
 8000592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000596:	4a21      	ldr	r2, [pc, #132]	@ (800061c <SystemClock_Config+0xc4>)
 8000598:	f023 0318 	bic.w	r3, r3, #24
 800059c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80005a0:	231c      	movs	r3, #28
 80005a2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b4:	2360      	movs	r3, #96	@ 0x60
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005bc:	2301      	movs	r3, #1
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005c4:	2328      	movs	r3, #40	@ 0x28
 80005c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 facf 	bl	8003b7c <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005e4:	f000 fbe6 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2303      	movs	r3, #3
 80005ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fecf 	bl	80043a4 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800060c:	f000 fbd2 	bl	8000db4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000610:	f004 fb36 	bl	8004c80 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000614:	bf00      	nop
 8000616:	3758      	adds	r7, #88	@ 0x58
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000636:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000638:	4a29      	ldr	r2, [pc, #164]	@ (80006e0 <MX_ADC1_Init+0xc0>)
 800063a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800063c:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_ADC1_Init+0xbc>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_ADC1_Init+0xbc>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000656:	2204      	movs	r2, #4
 8000658:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <MX_ADC1_Init+0xbc>)
 800065c:	2200      	movs	r2, #0
 800065e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000662:	2200      	movs	r2, #0
 8000664:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000668:	2201      	movs	r2, #1
 800066a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_ADC1_Init+0xbc>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_ADC1_Init+0xbc>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC1_Init+0xbc>)
 800068a:	2200      	movs	r2, #0
 800068c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	4811      	ldr	r0, [pc, #68]	@ (80006dc <MX_ADC1_Init+0xbc>)
 8000698:	f001 fb36 	bl	8001d08 <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006a2:	f000 fb87 	bl	8000db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_ADC1_Init+0xc4>)
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006aa:	2306      	movs	r3, #6
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_ADC1_Init+0xc8>)
 80006b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b6:	2304      	movs	r3, #4
 80006b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <MX_ADC1_Init+0xbc>)
 80006c4:	f001 fc62 	bl	8001f8c <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006ce:	f000 fb71 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000098 	.word	0x20000098
 80006e0:	50040000 	.word	0x50040000
 80006e4:	08600004 	.word	0x08600004
 80006e8:	407f0000 	.word	0x407f0000

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_I2C1_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000764 <MX_I2C1_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_I2C1_Init+0x74>)
 80006f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <MX_I2C1_Init+0x7c>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <MX_I2C1_Init+0x74>)
 8000728:	f002 faa4 	bl	8002c74 <HAL_I2C_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000732:	f000 fb3f 	bl	8000db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <MX_I2C1_Init+0x74>)
 800073a:	f003 f913 	bl	8003964 <HAL_I2CEx_ConfigAnalogFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 fb36 	bl	8000db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_I2C1_Init+0x74>)
 800074c:	f003 f955 	bl	80039fa <HAL_I2CEx_ConfigDigitalFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 fb2d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000fc 	.word	0x200000fc
 8000764:	40005400 	.word	0x40005400
 8000768:	10d19ce4 	.word	0x10d19ce4

0800076c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_I2C2_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	@ (80007e4 <MX_I2C2_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_I2C2_Init+0x74>)
 8000778:	4a1b      	ldr	r2, [pc, #108]	@ (80007e8 <MX_I2C2_Init+0x7c>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_I2C2_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_I2C2_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_I2C2_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007a6:	480e      	ldr	r0, [pc, #56]	@ (80007e0 <MX_I2C2_Init+0x74>)
 80007a8:	f002 fa64 	bl	8002c74 <HAL_I2C_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007b2:	f000 faff 	bl	8000db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <MX_I2C2_Init+0x74>)
 80007ba:	f003 f8d3 	bl	8003964 <HAL_I2CEx_ConfigAnalogFilter>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007c4:	f000 faf6 	bl	8000db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_I2C2_Init+0x74>)
 80007cc:	f003 f915 	bl	80039fa <HAL_I2CEx_ConfigDigitalFilter>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 faed 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000150 	.word	0x20000150
 80007e4:	40005800 	.word	0x40005800
 80007e8:	10d19ce4 	.word	0x10d19ce4

080007ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_I2C3_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_I2C3_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_I2C3_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000868 <MX_I2C3_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_I2C3_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_I2C3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_I2C3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	@ (8000860 <MX_I2C3_Init+0x74>)
 8000828:	f002 fa24 	bl	8002c74 <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 fabf 	bl	8000db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4809      	ldr	r0, [pc, #36]	@ (8000860 <MX_I2C3_Init+0x74>)
 800083a:	f003 f893 	bl	8003964 <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 fab6 	bl	8000db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_I2C3_Init+0x74>)
 800084c:	f003 f8d5 	bl	80039fa <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 faad 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200001a4 	.word	0x200001a4
 8000864:	40005c00 	.word	0x40005c00
 8000868:	10d19ce4 	.word	0x10d19ce4

0800086c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <MX_LPUART1_UART_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 8000878:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <MX_LPUART1_UART_Init+0x58>)
 800087a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 800087e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000882:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_LPUART1_UART_Init+0x50>)
 80008aa:	f004 febb 	bl	8005624 <HAL_UART_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 fa7e 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001f8 	.word	0x200001f8
 80008c0:	40008000 	.word	0x40008000
 80008c4:	00033324 	.word	0x00033324

080008c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <MX_USART1_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 800090c:	f004 fe8a 	bl	8005624 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 fa4d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000280 	.word	0x20000280
 8000924:	40013800 	.word	0x40013800

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	@ (8000984 <MX_USART2_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USART2_UART_Init+0x58>)
 800096c:	f004 fe5a 	bl	8005624 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 fa1d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000308 	.word	0x20000308
 8000984:	40004400 	.word	0x40004400

08000988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <MX_SPI1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a00 <MX_SPI1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_SPI1_Init+0x74>)
 8000994:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009a2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_SPI1_Init+0x74>)
 80009e8:	f004 fa4c 	bl	8004e84 <HAL_SPI_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009f2:	f000 f9df 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000390 	.word	0x20000390
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a22:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a24:	4a23      	ldr	r2, [pc, #140]	@ (8000ab4 <MX_TIM1_Init+0xb0>)
 8000a26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a28:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a4e:	4818      	ldr	r0, [pc, #96]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a50:	f004 fb12 	bl	8005078 <HAL_TIM_IC_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a5a:	f000 f9ab 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480f      	ldr	r0, [pc, #60]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a72:	f004 fd71 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f99a 	bl	8000db4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <MX_TIM1_Init+0xac>)
 8000a98:	f004 fb45 	bl	8005126 <HAL_TIM_IC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000aa2:	f000 f987 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200003f4 	.word	0x200003f4
 8000ab4:	40012c00 	.word	0x40012c00

08000ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000ad8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000adc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000af0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000afe:	4817      	ldr	r0, [pc, #92]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000b00:	f004 faba 	bl	8005078 <HAL_TIM_IC_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b0a:	f000 f953 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480f      	ldr	r0, [pc, #60]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000b1e:	f004 fd1b 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b28:	f000 f944 	bl	8000db4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b30:	2301      	movs	r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000b44:	f004 faef 	bl	8005126 <HAL_TIM_IC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b4e:	f000 f931 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000440 	.word	0x20000440

08000b60 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000b74:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf0 <MX_TIM16_Init+0x90>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b9e:	4813      	ldr	r0, [pc, #76]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000ba0:	f004 fa13 	bl	8004fca <HAL_TIM_Base_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8000baa:	f000 f903 	bl	8000db4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000bae:	480f      	ldr	r0, [pc, #60]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000bb0:	f004 fa62 	bl	8005078 <HAL_TIM_IC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000bba:	f000 f8fb 	bl	8000db4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_TIM16_Init+0x8c>)
 8000bd6:	f004 faa6 	bl	8005126 <HAL_TIM_IC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000be0:	f000 f8e8 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000048c 	.word	0x2000048c
 8000bf0:	40014400 	.word	0x40014400

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b66      	ldr	r3, [pc, #408]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	4a65      	ldr	r2, [pc, #404]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c16:	4b63      	ldr	r3, [pc, #396]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	4b60      	ldr	r3, [pc, #384]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a5f      	ldr	r2, [pc, #380]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	4a59      	ldr	r2, [pc, #356]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c46:	4b57      	ldr	r3, [pc, #348]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b54      	ldr	r3, [pc, #336]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a53      	ldr	r2, [pc, #332]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b51      	ldr	r3, [pc, #324]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c76:	4b4b      	ldr	r3, [pc, #300]	@ (8000da4 <MX_GPIO_Init+0x1b0>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PDIS_PH_EN_GPIO_Port, PDIS_PH_EN_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2120      	movs	r1, #32
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8a:	f001 ffc1 	bl	8002c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PDIS_DO_EN_Pin|PDIS_EC_EN_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f241 0104 	movw	r1, #4100	@ 0x1004
 8000c94:	4844      	ldr	r0, [pc, #272]	@ (8000da8 <MX_GPIO_Init+0x1b4>)
 8000c96:	f001 ffbb 	bl	8002c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000ca0:	4842      	ldr	r0, [pc, #264]	@ (8000dac <MX_GPIO_Init+0x1b8>)
 8000ca2:	f001 ffb5 	bl	8002c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : THERMISTOR_Pin */
  GPIO_InitStruct.Pin = THERMISTOR_Pin;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000caa:	2303      	movs	r3, #3
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(THERMISTOR_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	483c      	ldr	r0, [pc, #240]	@ (8000dac <MX_GPIO_Init+0x1b8>)
 8000cba:	f001 fe2f 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDIS_PH_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_PH_EN_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PDIS_PH_EN_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd8:	f001 fe20 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : OC2_Pin */
  GPIO_InitStruct.Pin = OC2_Pin;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC2_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	482e      	ldr	r0, [pc, #184]	@ (8000dac <MX_GPIO_Init+0x1b8>)
 8000cf2:	f001 fe13 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : SC1_Pin OC1_Pin WC_EN_Pin */
  GPIO_InitStruct.Pin = SC1_Pin|OC1_Pin|WC_EN_Pin;
 8000cf6:	f242 0303 	movw	r3, #8195	@ 0x2003
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4826      	ldr	r0, [pc, #152]	@ (8000da8 <MX_GPIO_Init+0x1b4>)
 8000d0e:	f001 fe05 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDIS_DO_EN_Pin PDIS_EC_EN_Pin */
  GPIO_InitStruct.Pin = PDIS_DO_EN_Pin|PDIS_EC_EN_Pin;
 8000d12:	f241 0304 	movw	r3, #4100	@ 0x1004
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481f      	ldr	r0, [pc, #124]	@ (8000da8 <MX_GPIO_Init+0x1b4>)
 8000d2c:	f001 fdf6 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS232_INV_Pin */
  GPIO_InitStruct.Pin = RS232_INV_Pin;
 8000d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS232_INV_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4819      	ldr	r0, [pc, #100]	@ (8000dac <MX_GPIO_Init+0x1b8>)
 8000d46:	f001 fde9 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000d4a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4812      	ldr	r0, [pc, #72]	@ (8000dac <MX_GPIO_Init+0x1b8>)
 8000d64:	f001 fdda 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : SC2_Pin */
  GPIO_InitStruct.Pin = SC2_Pin;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC2_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <MX_GPIO_Init+0x1bc>)
 8000d7c:	f001 fdce 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PPS_Pin */
  GPIO_InitStruct.Pin = PPS_Pin;
 8000d80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <MX_GPIO_Init+0x1b4>)
 8000d98:	f001 fdc0 	bl	800291c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	@ 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48000400 	.word	0x48000400
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000c00 	.word	0x48000c00

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <Error_Handler+0x8>

08000dc0 <OEM_Init>:
#include "oem_library.h"

/* INITIALIZATION */
HAL_StatusTypeDef OEM_Init(OEM_CHIP *dev , I2C_HandleTypeDef *i2cHandle) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
    /* Init device params */
    dev->i2cHandle      = i2cHandle;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	601a      	str	r2, [r3, #0]
    dev->reading        = 0.0f;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
    dev->devType        = 0x00;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	721a      	strb	r2, [r3, #8]
    //dev->devAddr        = 0x00;

    /* Get device type */
    HAL_StatusTypeDef status = OEM_GetDeviceType(dev);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 f831 	bl	8000e44 <OEM_GetDeviceType>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
    if (dev->devType != EC_OEM_DEV_TYPE && dev->devType != PH_OEM_DEV_TYPE && dev->devType != DO_OEM_DEV_TYPE) {
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7a1b      	ldrb	r3, [r3, #8]
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d009      	beq.n	8000e02 <OEM_Init+0x42>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7a1b      	ldrb	r3, [r3, #8]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d005      	beq.n	8000e02 <OEM_Init+0x42>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7a1b      	ldrb	r3, [r3, #8]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d001      	beq.n	8000e02 <OEM_Init+0x42>
        return 255;
 8000dfe:	23ff      	movs	r3, #255	@ 0xff
 8000e00:	e00a      	b.n	8000e18 <OEM_Init+0x58>
    } else if (status != HAL_OK) {
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <OEM_Init+0x4c>
        return status;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	e005      	b.n	8000e18 <OEM_Init+0x58>
    }

    // Activate all OEM chips in order to begin taking readings.
    status = OEM_Activate(dev);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f807 	bl	8000e20 <OEM_Activate>
 8000e12:	4603      	mov	r3, r0
 8000e14:	73fb      	strb	r3, [r7, #15]

    return status;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <OEM_Activate>:

HAL_StatusTypeDef OEM_Activate(OEM_CHIP *dev) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    uint8_t activate_command = 0x01;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
    return OEM_WriteRegister(dev, OEM_REG_ACTIVATE, &activate_command);
 8000e2c:	f107 030f 	add.w	r3, r7, #15
 8000e30:	461a      	mov	r2, r3
 8000e32:	2106      	movs	r1, #6
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f8b2 	bl	8000f9e <OEM_WriteRegister>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <OEM_GetDeviceType>:


/* COLLECT DATA */
HAL_StatusTypeDef OEM_GetDeviceType(OEM_CHIP *dev) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    return OEM_ReadRegister(dev, OEM_REG_DEV_TYPE, &dev->devType);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3308      	adds	r3, #8
 8000e50:	461a      	mov	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f863 	bl	8000f20 <OEM_ReadRegister>
 8000e5a:	4603      	mov	r3, r0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <OEM_ReadData>:

HAL_StatusTypeDef OEM_ReadData(OEM_CHIP *dev) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    uint8_t regData[4];
    float divFactor = 1;
 8000e6c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e70:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	74fb      	strb	r3, [r7, #19]

    switch (dev->devType) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7a1b      	ldrb	r3, [r3, #8]
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d01e      	beq.n	8000ebc <OEM_ReadData+0x58>
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	dc28      	bgt.n	8000ed4 <OEM_ReadData+0x70>
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d002      	beq.n	8000e8c <OEM_ReadData+0x28>
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d00c      	beq.n	8000ea4 <OEM_ReadData+0x40>
 8000e8a:	e023      	b.n	8000ed4 <OEM_ReadData+0x70>
        case PH:
            status = OEM_ReadRegisters(dev, PH_OEM_REG_PH_MSB, &regData[0], 4);
 8000e8c:	f107 0208 	add.w	r2, r7, #8
 8000e90:	2304      	movs	r3, #4
 8000e92:	2116      	movs	r1, #22
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f860 	bl	8000f5a <OEM_ReadRegisters>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	74fb      	strb	r3, [r7, #19]
            divFactor = 1000.0f;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <OEM_ReadData+0xb4>)
 8000ea0:	617b      	str	r3, [r7, #20]
            break;
 8000ea2:	e019      	b.n	8000ed8 <OEM_ReadData+0x74>
        case DO:
            status = OEM_ReadRegisters(dev, DO_OEM_REG_DO_MSB, &regData[0], 4);
 8000ea4:	f107 0208 	add.w	r2, r7, #8
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	2122      	movs	r1, #34	@ 0x22
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f854 	bl	8000f5a <OEM_ReadRegisters>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	74fb      	strb	r3, [r7, #19]
            divFactor = 100.0f;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <OEM_ReadData+0xb8>)
 8000eb8:	617b      	str	r3, [r7, #20]
            break; 
 8000eba:	e00d      	b.n	8000ed8 <OEM_ReadData+0x74>
        case EC:
            status = OEM_ReadRegisters(dev, EC_OEM_REG_EC_MSB, &regData[0], 4);
 8000ebc:	f107 0208 	add.w	r2, r7, #8
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	2118      	movs	r1, #24
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f848 	bl	8000f5a <OEM_ReadRegisters>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	74fb      	strb	r3, [r7, #19]
            divFactor = 100.0f;
 8000ece:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <OEM_ReadData+0xb8>)
 8000ed0:	617b      	str	r3, [r7, #20]
            break;
 8000ed2:	e001      	b.n	8000ed8 <OEM_ReadData+0x74>
        default:
            return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e01a      	b.n	8000f0e <OEM_ReadData+0xaa>
    }

    uint32_t regReading = (regData[0] << 24) | (regData[1] << 16) | (regData[2] << 8) | regData[3];
 8000ed8:	7a3b      	ldrb	r3, [r7, #8]
 8000eda:	061a      	lsls	r2, r3, #24
 8000edc:	7a7b      	ldrb	r3, [r7, #9]
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	7abb      	ldrb	r3, [r7, #10]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	7afa      	ldrb	r2, [r7, #11]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
    dev->reading = (float)regReading / divFactor;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ef8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f04:	ee17 2a90 	vmov	r2, s15
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	605a      	str	r2, [r3, #4]

    return status;
 8000f0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	447a0000 	.word	0x447a0000
 8000f1c:	42c80000 	.word	0x42c80000

08000f20 <OEM_ReadRegister>:

/* LOW-LEVEL FUNCTIONS */
HAL_StatusTypeDef OEM_ReadRegister(OEM_CHIP *dev, uint8_t reg, uint8_t *data) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	72fb      	strb	r3, [r7, #11]
    return HAL_I2C_Mem_Read(dev->i2cHandle, dev->devAddr, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	7a5b      	ldrb	r3, [r3, #9]
 8000f36:	4619      	mov	r1, r3
 8000f38:	7afb      	ldrb	r3, [r7, #11]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	2301      	movs	r3, #1
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f002 f842 	bl	8002fd4 <HAL_I2C_Mem_Read>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <OEM_ReadRegisters>:

HAL_StatusTypeDef OEM_ReadRegisters(OEM_CHIP *dev, uint8_t reg, uint8_t *data, uint8_t len) {
 8000f5a:	b590      	push	{r4, r7, lr}
 8000f5c:	b089      	sub	sp, #36	@ 0x24
 8000f5e:	af04      	add	r7, sp, #16
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	461a      	mov	r2, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	72fb      	strb	r3, [r7, #11]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	72bb      	strb	r3, [r7, #10]
    return HAL_I2C_Mem_Read(dev->i2cHandle, dev->devAddr, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	7a5b      	ldrb	r3, [r3, #9]
 8000f76:	461c      	mov	r4, r3
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	7abb      	ldrb	r3, [r7, #10]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f84:	9102      	str	r1, [sp, #8]
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	4621      	mov	r1, r4
 8000f90:	f002 f820 	bl	8002fd4 <HAL_I2C_Mem_Read>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd90      	pop	{r4, r7, pc}

08000f9e <OEM_WriteRegister>:

HAL_StatusTypeDef OEM_WriteRegister(OEM_CHIP *dev, uint8_t reg, uint8_t *data) {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b088      	sub	sp, #32
 8000fa2:	af04      	add	r7, sp, #16
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	72fb      	strb	r3, [r7, #11]
    return HAL_I2C_Mem_Write(dev->i2cHandle, dev->devAddr, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	7a5b      	ldrb	r3, [r3, #9]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f001 feef 	bl	8002dac <HAL_I2C_Mem_Write>
 8000fce:	4603      	mov	r3, r0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	@ 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0a2      	sub	sp, #136	@ 0x88
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2260      	movs	r2, #96	@ 0x60
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f005 f85f 	bl	8006104 <memset>
  if(hadc->Instance==ADC1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a31      	ldr	r2, [pc, #196]	@ (8001110 <HAL_ADC_MspInit+0xf0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d15b      	bne.n	8001108 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001050:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001054:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001056:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800105a:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001064:	2318      	movs	r3, #24
 8001066:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001068:	2307      	movs	r3, #7
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800106c:	2302      	movs	r3, #2
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001074:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001078:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fbb4 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800108a:	f7ff fe93 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a20      	ldr	r2, [pc, #128]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 8001094:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_ADC_MspInit+0xf4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_P_IN_Pin|ADC1_N_IN_Pin|GPIO_PIN_4;
 80010d6:	2316      	movs	r3, #22
 80010d8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010da:	230b      	movs	r3, #11
 80010dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010e6:	4619      	mov	r1, r3
 80010e8:	480b      	ldr	r0, [pc, #44]	@ (8001118 <HAL_ADC_MspInit+0xf8>)
 80010ea:	f001 fc17 	bl	800291c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ee:	2310      	movs	r3, #16
 80010f0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010f2:	230b      	movs	r3, #11
 80010f4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001104:	f001 fc0a 	bl	800291c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001108:	bf00      	nop
 800110a:	3788      	adds	r7, #136	@ 0x88
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	50040000 	.word	0x50040000
 8001114:	40021000 	.word	0x40021000
 8001118:	48000800 	.word	0x48000800

0800111c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0a6      	sub	sp, #152	@ 0x98
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001138:	2260      	movs	r2, #96	@ 0x60
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f004 ffe1 	bl	8006104 <memset>
  if(hi2c->Instance==I2C1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a73      	ldr	r2, [pc, #460]	@ (8001314 <HAL_I2C_MspInit+0x1f8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d13b      	bne.n	80011c4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800114c:	2340      	movs	r3, #64	@ 0x40
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001150:	2300      	movs	r3, #0
 8001152:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fb47 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001164:	f7ff fe26 	bl	8000db4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b6b      	ldr	r3, [pc, #428]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	4a6a      	ldr	r2, [pc, #424]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001174:	4b68      	ldr	r3, [pc, #416]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001180:	23c0      	movs	r3, #192	@ 0xc0
 8001182:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001198:	2304      	movs	r3, #4
 800119a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011a2:	4619      	mov	r1, r3
 80011a4:	485d      	ldr	r0, [pc, #372]	@ (800131c <HAL_I2C_MspInit+0x200>)
 80011a6:	f001 fbb9 	bl	800291c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b58      	ldr	r3, [pc, #352]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011c2:	e0a3      	b.n	800130c <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a55      	ldr	r2, [pc, #340]	@ (8001320 <HAL_I2C_MspInit+0x204>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d13c      	bne.n	8001248 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011ce:	2380      	movs	r3, #128	@ 0x80
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fb06 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80011e6:	f7ff fde5 	bl	8000db4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b48      	ldr	r3, [pc, #288]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8001202:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120a:	2312      	movs	r3, #18
 800120c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800121c:	2304      	movs	r3, #4
 800121e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001226:	4619      	mov	r1, r3
 8001228:	483c      	ldr	r0, [pc, #240]	@ (800131c <HAL_I2C_MspInit+0x200>)
 800122a:	f001 fb77 	bl	800291c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800122e:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	4a39      	ldr	r2, [pc, #228]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 8001234:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001238:	6593      	str	r3, [r2, #88]	@ 0x58
 800123a:	4b37      	ldr	r3, [pc, #220]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
}
 8001246:	e061      	b.n	800130c <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C3)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a35      	ldr	r2, [pc, #212]	@ (8001324 <HAL_I2C_MspInit+0x208>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d15c      	bne.n	800130c <HAL_I2C_MspInit+0x1f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001252:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fac3 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 800126c:	f7ff fda2 	bl	8000db4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	4a28      	ldr	r2, [pc, #160]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127c:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128c:	4a22      	ldr	r2, [pc, #136]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a6:	2312      	movs	r3, #18
 80012a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012b8:	2304      	movs	r3, #4
 80012ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80012c2:	4619      	mov	r1, r3
 80012c4:	4818      	ldr	r0, [pc, #96]	@ (8001328 <HAL_I2C_MspInit+0x20c>)
 80012c6:	f001 fb29 	bl	800291c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ca:	2310      	movs	r3, #16
 80012cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012e2:	2304      	movs	r3, #4
 80012e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80012ec:	4619      	mov	r1, r3
 80012ee:	480b      	ldr	r0, [pc, #44]	@ (800131c <HAL_I2C_MspInit+0x200>)
 80012f0:	f001 fb14 	bl	800291c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	4a07      	ldr	r2, [pc, #28]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 80012fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_I2C_MspInit+0x1fc>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001304:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
}
 800130c:	bf00      	nop
 800130e:	3798      	adds	r7, #152	@ 0x98
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40005400 	.word	0x40005400
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400
 8001320:	40005800 	.word	0x40005800
 8001324:	40005c00 	.word	0x40005c00
 8001328:	48000800 	.word	0x48000800

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0a6      	sub	sp, #152	@ 0x98
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001348:	2260      	movs	r2, #96	@ 0x60
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f004 fed9 	bl	8006104 <memset>
  if(huart->Instance==LPUART1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a80      	ldr	r2, [pc, #512]	@ (8001558 <HAL_UART_MspInit+0x22c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d15e      	bne.n	800141a <HAL_UART_MspInit+0xee>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800135c:	2320      	movs	r3, #32
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001360:	2300      	movs	r3, #0
 8001362:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fa3f 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001374:	f7ff fd1e 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001378:	4b78      	ldr	r3, [pc, #480]	@ (800155c <HAL_UART_MspInit+0x230>)
 800137a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137c:	4a77      	ldr	r2, [pc, #476]	@ (800155c <HAL_UART_MspInit+0x230>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001384:	4b75      	ldr	r3, [pc, #468]	@ (800155c <HAL_UART_MspInit+0x230>)
 8001386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	623b      	str	r3, [r7, #32]
 800138e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b72      	ldr	r3, [pc, #456]	@ (800155c <HAL_UART_MspInit+0x230>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001394:	4a71      	ldr	r2, [pc, #452]	@ (800155c <HAL_UART_MspInit+0x230>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139c:	4b6f      	ldr	r3, [pc, #444]	@ (800155c <HAL_UART_MspInit+0x230>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b6c      	ldr	r3, [pc, #432]	@ (800155c <HAL_UART_MspInit+0x230>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	4a6b      	ldr	r2, [pc, #428]	@ (800155c <HAL_UART_MspInit+0x230>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b4:	4b69      	ldr	r3, [pc, #420]	@ (800155c <HAL_UART_MspInit+0x230>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c0:	2308      	movs	r3, #8
 80013c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013d8:	2308      	movs	r3, #8
 80013da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e8:	f001 fa98 	bl	800291c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001406:	2308      	movs	r3, #8
 8001408:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001410:	4619      	mov	r1, r3
 8001412:	4853      	ldr	r0, [pc, #332]	@ (8001560 <HAL_UART_MspInit+0x234>)
 8001414:	f001 fa82 	bl	800291c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001418:	e09a      	b.n	8001550 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a51      	ldr	r2, [pc, #324]	@ (8001564 <HAL_UART_MspInit+0x238>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d13d      	bne.n	80014a0 <HAL_UART_MspInit+0x174>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001424:	2301      	movs	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001428:	2300      	movs	r3, #0
 800142a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	4618      	mov	r0, r3
 8001432:	f003 f9db 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800143c:	f7ff fcba 	bl	8000db4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001440:	4b46      	ldr	r3, [pc, #280]	@ (800155c <HAL_UART_MspInit+0x230>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001444:	4a45      	ldr	r2, [pc, #276]	@ (800155c <HAL_UART_MspInit+0x230>)
 8001446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144a:	6613      	str	r3, [r2, #96]	@ 0x60
 800144c:	4b43      	ldr	r3, [pc, #268]	@ (800155c <HAL_UART_MspInit+0x230>)
 800144e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b40      	ldr	r3, [pc, #256]	@ (800155c <HAL_UART_MspInit+0x230>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	4a3f      	ldr	r2, [pc, #252]	@ (800155c <HAL_UART_MspInit+0x230>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001464:	4b3d      	ldr	r3, [pc, #244]	@ (800155c <HAL_UART_MspInit+0x230>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001470:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148a:	2307      	movs	r3, #7
 800148c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149a:	f001 fa3f 	bl	800291c <HAL_GPIO_Init>
}
 800149e:	e057      	b.n	8001550 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a30      	ldr	r2, [pc, #192]	@ (8001568 <HAL_UART_MspInit+0x23c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d152      	bne.n	8001550 <HAL_UART_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 f998 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80014c2:	f7ff fc77 	bl	8000db4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <HAL_UART_MspInit+0x230>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	4a24      	ldr	r2, [pc, #144]	@ (800155c <HAL_UART_MspInit+0x230>)
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d2:	4b22      	ldr	r3, [pc, #136]	@ (800155c <HAL_UART_MspInit+0x230>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <HAL_UART_MspInit+0x230>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a1e      	ldr	r2, [pc, #120]	@ (800155c <HAL_UART_MspInit+0x230>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <HAL_UART_MspInit+0x230>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f6:	2304      	movs	r3, #4
 80014f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150e:	2307      	movs	r3, #7
 8001510:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151e:	f001 f9fd 	bl	800291c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800153c:	2303      	movs	r3, #3
 800153e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154c:	f001 f9e6 	bl	800291c <HAL_GPIO_Init>
}
 8001550:	bf00      	nop
 8001552:	3798      	adds	r7, #152	@ 0x98
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40008000 	.word	0x40008000
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400
 8001564:	40013800 	.word	0x40013800
 8001568:	40004400 	.word	0x40004400

0800156c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <HAL_SPI_MspInit+0x7c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d128      	bne.n	80015e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	4a16      	ldr	r2, [pc, #88]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 8001594:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001598:	6613      	str	r3, [r2, #96]	@ 0x60
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80015be:	23c2      	movs	r3, #194	@ 0xc2
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ce:	2305      	movs	r3, #5
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f001 f99e 	bl	800291c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	@ 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40013000 	.word	0x40013000
 80015ec:	40021000 	.word	0x40021000

080015f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2f      	ldr	r2, [pc, #188]	@ (80016cc <HAL_TIM_IC_MspInit+0xdc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12a      	bne.n	8001668 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001616:	4a2e      	ldr	r2, [pc, #184]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001618:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800161c:	6613      	str	r3, [r2, #96]	@ 0x60
 800161e:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	4a28      	ldr	r2, [pc, #160]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001654:	2301      	movs	r3, #1
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001662:	f001 f95b 	bl	800291c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001666:	e02d      	b.n	80016c4 <HAL_TIM_IC_MspInit+0xd4>
  else if(htim_ic->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001670:	d128      	bne.n	80016c4 <HAL_TIM_IC_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001676:	4a16      	ldr	r2, [pc, #88]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6593      	str	r3, [r2, #88]	@ 0x58
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4a10      	ldr	r2, [pc, #64]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <HAL_TIM_IC_MspInit+0xe0>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b2:	2301      	movs	r3, #1
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f001 f92c 	bl	800291c <HAL_GPIO_Init>
}
 80016c4:	bf00      	nop
 80016c6:	3730      	adds	r7, #48	@ 0x30
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40012c00 	.word	0x40012c00
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM16)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_TIM_Base_MspInit+0x7c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d128      	bne.n	8001748 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <HAL_TIM_Base_MspInit+0x80>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fa:	4a16      	ldr	r2, [pc, #88]	@ (8001754 <HAL_TIM_Base_MspInit+0x80>)
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001700:	6613      	str	r3, [r2, #96]	@ 0x60
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_TIM_Base_MspInit+0x80>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_TIM_Base_MspInit+0x80>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_TIM_Base_MspInit+0x80>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_TIM_Base_MspInit+0x80>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001738:	230e      	movs	r3, #14
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <HAL_TIM_Base_MspInit+0x84>)
 8001744:	f001 f8ea 	bl	800291c <HAL_GPIO_Init>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	@ 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40014400 	.word	0x40014400
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 f8d9 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	@ (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f004 fc92 	bl	8006114 <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20010000 	.word	0x20010000
 800181c:	00000400 	.word	0x00000400
 8001820:	200004fc 	.word	0x200004fc
 8001824:	20000650 	.word	0x20000650

08001828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <SystemInit+0x20>)
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <SystemInit+0x20>)
 8001834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
/* begin check for flag */

  ldr r0, =0x20000000
 800184c:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
  ldr r1, =0xFFFFFFFF
 8001850:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  ldr r2, [r0, #0]
 8001854:	6802      	ldr	r2, [r0, #0]
  str r0, [r0, #0]
 8001856:	6000      	str	r0, [r0, #0]
  cmp r2, r1
 8001858:	428a      	cmp	r2, r1
  beq Reboot_Loader
 800185a:	d008      	beq.n	800186e <Reboot_Loader>

/* end check for flag */

/* Call the clock system initialization function.*/
  bl  SystemInit
 800185c:	f7ff ffe4 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr   sp, =_estack    /* Set stack pointer */
 8001860:	f8df d03c 	ldr.w	sp, [pc, #60]	@ 80018a0 <LoopForever+0x4>
  ldr r0, =_sdata
 8001864:	480f      	ldr	r0, [pc, #60]	@ (80018a4 <LoopForever+0x8>)
  ldr r1, =_edata
 8001866:	4910      	ldr	r1, [pc, #64]	@ (80018a8 <LoopForever+0xc>)
  ldr r2, =_sidata
 8001868:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <LoopForever+0x10>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e007      	b.n	800187e <LoopCopyDataInit>

0800186e <Reboot_Loader>:

/* begin jump to DFU */
Reboot_Loader:
  ldr r0, =0x1fff0000
 800186e:	4810      	ldr	r0, [pc, #64]	@ (80018b0 <LoopForever+0x14>)
  ldr sp, [r0, #0]
 8001870:	f8d0 d000 	ldr.w	sp, [r0]
  ldr r0, [r0, #4]
 8001874:	6840      	ldr	r0, [r0, #4]
  bx r0
 8001876:	4700      	bx	r0

08001878 <CopyDataInit>:
/* end jump to DFU */

CopyDataInit:
  ldr r4, [r2, r3]
 8001878:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187c:	3304      	adds	r3, #4

0800187e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001880:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001882:	d3f9      	bcc.n	8001878 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001884:	4a0b      	ldr	r2, [pc, #44]	@ (80018b4 <LoopForever+0x18>)
  ldr r4, =_ebss
 8001886:	4c0c      	ldr	r4, [pc, #48]	@ (80018b8 <LoopForever+0x1c>)
  movs r3, #0
 8001888:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188a:	e001      	b.n	8001890 <LoopFillZerobss>

0800188c <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188e:	3204      	adds	r2, #4

08001890 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001890:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001892:	d3fb      	bcc.n	800188c <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001894:	f004 fc44 	bl	8006120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001898:	f7fe fdae 	bl	80003f8 <main>

0800189c <LoopForever>:

LoopForever:
    b LoopForever
 800189c:	e7fe      	b.n	800189c <LoopForever>
 800189e:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Set stack pointer */
 80018a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80018ac:	08006e24 	.word	0x08006e24
  ldr r0, =0x1fff0000
 80018b0:	1fff0000 	.word	0x1fff0000
  ldr r2, =_sbss
 80018b4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80018b8:	2000064c 	.word	0x2000064c

080018bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_IRQHandler>

080018be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 fff3 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ce:	200f      	movs	r0, #15
 80018d0:	f000 f80e 	bl	80018f0 <HAL_InitTick>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	e001      	b.n	80018e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e0:	f7ff fb7a 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_InitTick+0x6c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_InitTick+0x70>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_InitTick+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fff1 	bl	8002902 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d809      	bhi.n	8001940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001934:	f000 ffc9 	bl	80028ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_InitTick+0x74>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e007      	b.n	8001950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e004      	b.n	8001950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000028 	.word	0x20000028
 8001960:	20000020 	.word	0x20000020
 8001964:	20000024 	.word	0x20000024

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000028 	.word	0x20000028
 800198c:	20000500 	.word	0x20000500

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000500 	.word	0x20000500

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000028 	.word	0x20000028

080019f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	609a      	str	r2, [r3, #8]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3360      	adds	r3, #96	@ 0x60
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <LL_ADC_SetOffset+0x44>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	03fff000 	.word	0x03fff000

08001aa0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3360      	adds	r3, #96	@ 0x60
 8001aae:	461a      	mov	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3360      	adds	r3, #96	@ 0x60
 8001adc:	461a      	mov	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b087      	sub	sp, #28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3330      	adds	r3, #48	@ 0x30
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	211f      	movs	r1, #31
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	f003 011f 	and.w	r1, r3, #31
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b087      	sub	sp, #28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3314      	adds	r3, #20
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	0e5b      	lsrs	r3, r3, #25
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	0d1b      	lsrs	r3, r3, #20
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2107      	movs	r1, #7
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	0d1b      	lsrs	r3, r3, #20
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0318 	and.w	r3, r3, #24
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	400b      	ands	r3, r1
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	431a      	orrs	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	0007ffff 	.word	0x0007ffff

08001bf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6093      	str	r3, [r2, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <LL_ADC_IsEnabled+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_ADC_IsEnabled+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d101      	bne.n	8001cd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e126      	b.n	8001f70 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff f975 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff67 	bl	8001c1c <LL_ADC_IsDeepPowerDownEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff4d 	bl	8001bf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff82 	bl	8001c6c <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff66 	bl	8001c44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d78:	4b7f      	ldr	r3, [pc, #508]	@ (8001f78 <HAL_ADC_Init+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	4a7f      	ldr	r2, [pc, #508]	@ (8001f7c <HAL_ADC_Init+0x274>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff64 	bl	8001c6c <LL_ADC_IsInternalRegulatorEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff75 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80bf 	bne.w	8001f5e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 80bb 	bne.w	8001f5e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001df0:	f043 0202 	orr.w	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff49 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10b      	bne.n	8001e20 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e08:	485d      	ldr	r0, [pc, #372]	@ (8001f80 <HAL_ADC_Init+0x278>)
 8001e0a:	f7ff ff43 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	485a      	ldr	r0, [pc, #360]	@ (8001f84 <HAL_ADC_Init+0x27c>)
 8001e1c:	f7ff fde8 	bl	80019f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e5b      	ldrb	r3, [r3, #25]
 8001e24:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e2a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e30:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e36:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d106      	bne.n	8001e5c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	3b01      	subs	r3, #1
 8001e54:	045b      	lsls	r3, r3, #17
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e70:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	4b42      	ldr	r3, [pc, #264]	@ (8001f88 <HAL_ADC_Init+0x280>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff25 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 8001e96:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d13d      	bne.n	8001f1a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d13a      	bne.n	8001f1a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ea8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eb0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ec0:	f023 0302 	bic.w	r3, r3, #2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	69b9      	ldr	r1, [r7, #24]
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d118      	bne.n	8001f0a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001efa:	430a      	orrs	r2, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
 8001f08:	e007      	b.n	8001f1a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10c      	bne.n	8001f3c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f28:	f023 010f 	bic.w	r1, r3, #15
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f3a:	e007      	b.n	8001f4c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 020f 	bic.w	r2, r2, #15
 8001f4a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f50:	f023 0303 	bic.w	r3, r3, #3
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f5c:	e007      	b.n	8001f6e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000020 	.word	0x20000020
 8001f7c:	053e2d63 	.word	0x053e2d63
 8001f80:	50040000 	.word	0x50040000
 8001f84:	50040300 	.word	0x50040300
 8001f88:	fff0c007 	.word	0xfff0c007

08001f8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0b6      	sub	sp, #216	@ 0xd8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x22>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e3bb      	b.n	8002726 <HAL_ADC_ConfigChannel+0x79a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe7d 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 83a0 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d824      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	3b02      	subs	r3, #2
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d81b      	bhi.n	800201a <HAL_ADC_ConfigChannel+0x8e>
 8001fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe8 <HAL_ADC_ConfigChannel+0x5c>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08002001 	.word	0x08002001
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	08002011 	.word	0x08002011
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ffe:	e010      	b.n	8002022 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002000:	2312      	movs	r3, #18
 8002002:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002006:	e00c      	b.n	8002022 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002008:	2318      	movs	r3, #24
 800200a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800200e:	e008      	b.n	8002022 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002018:	e003      	b.n	8002022 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800201a:	2306      	movs	r3, #6
 800201c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002020:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002030:	f7ff fd67 	bl	8001b02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fe3e 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 800203e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe4a 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 800204c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 81a4 	bne.w	80023a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800205a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 819f 	bne.w	80023a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	461a      	mov	r2, r3
 8002072:	f7ff fd72 	bl	8001b5a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d00a      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6919      	ldr	r1, [r3, #16]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020a8:	f7ff fcd6 	bl	8001a58 <LL_ADC_SetOffset>
 80020ac:	e179      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fcf3 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <HAL_ADC_ConfigChannel+0x14e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fce8 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 80020d0:	4603      	mov	r3, r0
 80020d2:	0e9b      	lsrs	r3, r3, #26
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	e01e      	b.n	8002118 <HAL_ADC_ConfigChannel+0x18c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fcdd 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002100:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e004      	b.n	8002116 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800210c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1a4>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	e018      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1d6>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800214c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e004      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002162:	429a      	cmp	r2, r3
 8002164:	d106      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fcac 	bl	8001acc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fc90 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10a      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x214>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fc85 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	f003 021f 	and.w	r2, r3, #31
 800219e:	e01e      	b.n	80021de <HAL_ADC_ConfigChannel+0x252>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fc7a 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80021be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80021c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80021ce:	2320      	movs	r3, #32
 80021d0:	e004      	b.n	80021dc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80021d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x26a>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	e018      	b.n	8002228 <HAL_ADC_ConfigChannel+0x29c>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800220a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800220e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002212:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e004      	b.n	8002228 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800221e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002228:	429a      	cmp	r2, r3
 800222a:	d106      	bne.n	800223a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fc49 	bl	8001acc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2102      	movs	r1, #2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fc2d 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x2da>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2102      	movs	r1, #2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fc22 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	0e9b      	lsrs	r3, r3, #26
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	e01e      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x318>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2102      	movs	r1, #2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fc17 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002288:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800228c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e004      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002298:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x330>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0e9b      	lsrs	r3, r3, #26
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	e014      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x35a>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80022ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80022d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e004      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80022dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d106      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	2102      	movs	r1, #2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fbea 	bl	8001acc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2103      	movs	r1, #3
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fbce 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x398>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2103      	movs	r1, #3
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fbc3 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 021f 	and.w	r2, r3, #31
 8002322:	e017      	b.n	8002354 <HAL_ADC_ConfigChannel+0x3c8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2103      	movs	r1, #3
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fbb8 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800233c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800233e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002340:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e003      	b.n	8002352 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800234a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_ConfigChannel+0x3e0>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	e011      	b.n	8002390 <HAL_ADC_ConfigChannel+0x404>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800237a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800237c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800237e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e003      	b.n	8002390 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	2103      	movs	r1, #3
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fb95 	bl	8001acc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fc74 	bl	8001c94 <LL_ADC_IsEnabled>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8140 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f7ff fbf5 	bl	8001bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4a8f      	ldr	r2, [pc, #572]	@ (8002608 <HAL_ADC_ConfigChannel+0x67c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	f040 8131 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x46e>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	0e9b      	lsrs	r3, r3, #26
 80023e8:	3301      	adds	r3, #1
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2b09      	cmp	r3, #9
 80023f0:	bf94      	ite	ls
 80023f2:	2301      	movls	r3, #1
 80023f4:	2300      	movhi	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e019      	b.n	800242e <HAL_ADC_ConfigChannel+0x4a2>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800240a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800240c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e003      	b.n	800241e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2b09      	cmp	r3, #9
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800242e:	2b00      	cmp	r3, #0
 8002430:	d079      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d107      	bne.n	800244e <HAL_ADC_ConfigChannel+0x4c2>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0e9b      	lsrs	r3, r3, #26
 8002444:	3301      	adds	r3, #1
 8002446:	069b      	lsls	r3, r3, #26
 8002448:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800244c:	e015      	b.n	800247a <HAL_ADC_ConfigChannel+0x4ee>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800245c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800245e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002466:	2320      	movs	r3, #32
 8002468:	e003      	b.n	8002472 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800246a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3301      	adds	r3, #1
 8002474:	069b      	lsls	r3, r3, #26
 8002476:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_ADC_ConfigChannel+0x50e>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	e017      	b.n	80024ca <HAL_ADC_ConfigChannel+0x53e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e003      	b.n	80024be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	ea42 0103 	orr.w	r1, r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x564>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0e9b      	lsrs	r3, r3, #26
 80024e0:	3301      	adds	r3, #1
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	051b      	lsls	r3, r3, #20
 80024ee:	e018      	b.n	8002522 <HAL_ADC_ConfigChannel+0x596>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80024fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002500:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e003      	b.n	8002514 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800250c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002522:	430b      	orrs	r3, r1
 8002524:	e081      	b.n	800262a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x5b6>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	3301      	adds	r3, #1
 800253a:	069b      	lsls	r3, r3, #26
 800253c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002540:	e015      	b.n	800256e <HAL_ADC_ConfigChannel+0x5e2>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800255a:	2320      	movs	r3, #32
 800255c:	e003      	b.n	8002566 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800255e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3301      	adds	r3, #1
 8002568:	069b      	lsls	r3, r3, #26
 800256a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_ADC_ConfigChannel+0x602>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0e9b      	lsrs	r3, r3, #26
 8002580:	3301      	adds	r3, #1
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	e017      	b.n	80025be <HAL_ADC_ConfigChannel+0x632>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	61bb      	str	r3, [r7, #24]
  return result;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	ea42 0103 	orr.w	r1, r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x65e>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0e9b      	lsrs	r3, r3, #26
 80025d4:	3301      	adds	r3, #1
 80025d6:	f003 021f 	and.w	r2, r3, #31
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	3b1e      	subs	r3, #30
 80025e2:	051b      	lsls	r3, r3, #20
 80025e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025e8:	e01e      	b.n	8002628 <HAL_ADC_ConfigChannel+0x69c>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	60fb      	str	r3, [r7, #12]
  return result;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e006      	b.n	8002614 <HAL_ADC_ConfigChannel+0x688>
 8002606:	bf00      	nop
 8002608:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f003 021f 	and.w	r2, r3, #31
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	3b1e      	subs	r3, #30
 8002622:	051b      	lsls	r3, r3, #20
 8002624:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002628:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262e:	4619      	mov	r1, r3
 8002630:	f7ff fa93 	bl	8001b5a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b3d      	ldr	r3, [pc, #244]	@ (8002730 <HAL_ADC_ConfigChannel+0x7a4>)
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d06c      	beq.n	800271a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002640:	483c      	ldr	r0, [pc, #240]	@ (8002734 <HAL_ADC_ConfigChannel+0x7a8>)
 8002642:	f7ff f9fb 	bl	8001a3c <LL_ADC_GetCommonPathInternalCh>
 8002646:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3a      	ldr	r2, [pc, #232]	@ (8002738 <HAL_ADC_ConfigChannel+0x7ac>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d127      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d121      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a35      	ldr	r2, [pc, #212]	@ (800273c <HAL_ADC_ConfigChannel+0x7b0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d157      	bne.n	800271a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800266a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800266e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002672:	4619      	mov	r1, r3
 8002674:	482f      	ldr	r0, [pc, #188]	@ (8002734 <HAL_ADC_ConfigChannel+0x7a8>)
 8002676:	f7ff f9ce 	bl	8001a16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800267a:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <HAL_ADC_ConfigChannel+0x7b4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	4a30      	ldr	r2, [pc, #192]	@ (8002744 <HAL_ADC_ConfigChannel+0x7b8>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002694:	e002      	b.n	800269c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3b01      	subs	r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f9      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a2:	e03a      	b.n	800271a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a27      	ldr	r2, [pc, #156]	@ (8002748 <HAL_ADC_ConfigChannel+0x7bc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d113      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1f      	ldr	r2, [pc, #124]	@ (800273c <HAL_ADC_ConfigChannel+0x7b0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d12a      	bne.n	800271a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026cc:	4619      	mov	r1, r3
 80026ce:	4819      	ldr	r0, [pc, #100]	@ (8002734 <HAL_ADC_ConfigChannel+0x7a8>)
 80026d0:	f7ff f9a1 	bl	8001a16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026d4:	e021      	b.n	800271a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1c      	ldr	r2, [pc, #112]	@ (800274c <HAL_ADC_ConfigChannel+0x7c0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d11c      	bne.n	800271a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d116      	bne.n	800271a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a12      	ldr	r2, [pc, #72]	@ (800273c <HAL_ADC_ConfigChannel+0x7b0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d111      	bne.n	800271a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026fe:	4619      	mov	r1, r3
 8002700:	480c      	ldr	r0, [pc, #48]	@ (8002734 <HAL_ADC_ConfigChannel+0x7a8>)
 8002702:	f7ff f988 	bl	8001a16 <LL_ADC_SetCommonPathInternalCh>
 8002706:	e008      	b.n	800271a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002722:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002726:	4618      	mov	r0, r3
 8002728:	37d8      	adds	r7, #216	@ 0xd8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	80080000 	.word	0x80080000
 8002734:	50040300 	.word	0x50040300
 8002738:	c7520000 	.word	0xc7520000
 800273c:	50040000 	.word	0x50040000
 8002740:	20000020 	.word	0x20000020
 8002744:	053e2d63 	.word	0x053e2d63
 8002748:	cb840000 	.word	0xcb840000
 800274c:	80000001 	.word	0x80000001

08002750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	@ (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	@ (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
         );
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	@ 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002880:	d301      	bcc.n	8002886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002882:	2301      	movs	r3, #1
 8002884:	e00f      	b.n	80028a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <SysTick_Config+0x40>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288e:	210f      	movs	r1, #15
 8002890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002894:	f7ff ff8e 	bl	80027b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <SysTick_Config+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <SysTick_Config+0x40>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff47 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff5c 	bl	8002798 <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff8e 	bl	8002808 <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5d 	bl	80027b4 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffb0 	bl	8002870 <SysTick_Config>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292a:	e154      	b.n	8002bd6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8146 	beq.w	8002bd0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d005      	beq.n	800295c <HAL_GPIO_Init+0x40>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d130      	bne.n	80029be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002992:	2201      	movs	r2, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 0201 	and.w	r2, r3, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d017      	beq.n	80029fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d123      	bne.n	8002a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	08da      	lsrs	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3208      	adds	r2, #8
 8002a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	6939      	ldr	r1, [r7, #16]
 8002a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0203 	and.w	r2, r3, #3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a0 	beq.w	8002bd0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <HAL_GPIO_Init+0x2d8>)
 8002a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_GPIO_Init+0x2d8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a9c:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <HAL_GPIO_Init+0x2d8>)
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aa8:	4a53      	ldr	r2, [pc, #332]	@ (8002bf8 <HAL_GPIO_Init+0x2dc>)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ad2:	d019      	beq.n	8002b08 <HAL_GPIO_Init+0x1ec>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a49      	ldr	r2, [pc, #292]	@ (8002bfc <HAL_GPIO_Init+0x2e0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d013      	beq.n	8002b04 <HAL_GPIO_Init+0x1e8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a48      	ldr	r2, [pc, #288]	@ (8002c00 <HAL_GPIO_Init+0x2e4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00d      	beq.n	8002b00 <HAL_GPIO_Init+0x1e4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a47      	ldr	r2, [pc, #284]	@ (8002c04 <HAL_GPIO_Init+0x2e8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <HAL_GPIO_Init+0x1e0>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a46      	ldr	r2, [pc, #280]	@ (8002c08 <HAL_GPIO_Init+0x2ec>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_GPIO_Init+0x1dc>
 8002af4:	2304      	movs	r3, #4
 8002af6:	e008      	b.n	8002b0a <HAL_GPIO_Init+0x1ee>
 8002af8:	2307      	movs	r3, #7
 8002afa:	e006      	b.n	8002b0a <HAL_GPIO_Init+0x1ee>
 8002afc:	2303      	movs	r3, #3
 8002afe:	e004      	b.n	8002b0a <HAL_GPIO_Init+0x1ee>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e002      	b.n	8002b0a <HAL_GPIO_Init+0x1ee>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_GPIO_Init+0x1ee>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	f002 0203 	and.w	r2, r2, #3
 8002b10:	0092      	lsls	r2, r2, #2
 8002b12:	4093      	lsls	r3, r2
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b1a:	4937      	ldr	r1, [pc, #220]	@ (8002bf8 <HAL_GPIO_Init+0x2dc>)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b28:	4b38      	ldr	r3, [pc, #224]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b52:	4b2e      	ldr	r3, [pc, #184]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b76:	4a25      	ldr	r2, [pc, #148]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b7c:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bca:	4a10      	ldr	r2, [pc, #64]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f aea3 	bne.w	800292c <HAL_GPIO_Init+0x10>
  }
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	48000400 	.word	0x48000400
 8002c00:	48000800 	.word	0x48000800
 8002c04:	48000c00 	.word	0x48000c00
 8002c08:	48001000 	.word	0x48001000
 8002c0c:	40010400 	.word	0x40010400

08002c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c2c:	e002      	b.n	8002c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	041a      	lsls	r2, r3, #16
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43d9      	mvns	r1, r3
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	400b      	ands	r3, r1
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e08d      	b.n	8002da2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fa3e 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	@ 0x24
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e006      	b.n	8002cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d108      	bne.n	8002d16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	e007      	b.n	8002d26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69d9      	ldr	r1, [r3, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	813b      	strh	r3, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	f040 80f9 	bne.w	8002fc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_I2C_Mem_Write+0x34>
 8002dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0ed      	b.n	8002fc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_I2C_Mem_Write+0x4e>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e0e6      	b.n	8002fc8 <HAL_I2C_Mem_Write+0x21c>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e02:	f7fe fdc5 	bl	8001990 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2319      	movs	r3, #25
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fbaf 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0d1      	b.n	8002fc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2221      	movs	r2, #33	@ 0x21
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2240      	movs	r2, #64	@ 0x40
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a3a      	ldr	r2, [r7, #32]
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e4c:	88f8      	ldrh	r0, [r7, #6]
 8002e4e:	893a      	ldrh	r2, [r7, #8]
 8002e50:	8979      	ldrh	r1, [r7, #10]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fabf 	bl	80033e0 <I2C_RequestMemoryWrite>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0a9      	b.n	8002fc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2bff      	cmp	r3, #255	@ 0xff
 8002e7c:	d90e      	bls.n	8002e9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	22ff      	movs	r2, #255	@ 0xff
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	8979      	ldrh	r1, [r7, #10]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fd33 	bl	8003900 <I2C_TransferConfig>
 8002e9a:	e00f      	b.n	8002ebc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	8979      	ldrh	r1, [r7, #10]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fd22 	bl	8003900 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fbb2 	bl	800362a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e07b      	b.n	8002fc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d034      	beq.n	8002f74 <HAL_I2C_Mem_Write+0x1c8>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d130      	bne.n	8002f74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2180      	movs	r1, #128	@ 0x80
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fb2b 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e04d      	b.n	8002fc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2bff      	cmp	r3, #255	@ 0xff
 8002f34:	d90e      	bls.n	8002f54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	22ff      	movs	r2, #255	@ 0xff
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	8979      	ldrh	r1, [r7, #10]
 8002f44:	2300      	movs	r3, #0
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fcd7 	bl	8003900 <I2C_TransferConfig>
 8002f52:	e00f      	b.n	8002f74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	2300      	movs	r3, #0
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fcc6 	bl	8003900 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d19e      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb98 	bl	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e01a      	b.n	8002fc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2220      	movs	r2, #32
 8002f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <HAL_I2C_Mem_Write+0x224>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	fe00e800 	.word	0xfe00e800

08002fd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	813b      	strh	r3, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f040 80fd 	bne.w	80031f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_I2C_Mem_Read+0x34>
 8003002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800300e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0f1      	b.n	80031f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_I2C_Mem_Read+0x4e>
 800301e:	2302      	movs	r3, #2
 8003020:	e0ea      	b.n	80031f8 <HAL_I2C_Mem_Read+0x224>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800302a:	f7fe fcb1 	bl	8001990 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2319      	movs	r3, #25
 8003036:	2201      	movs	r2, #1
 8003038:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fa9b 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0d5      	b.n	80031f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2222      	movs	r2, #34	@ 0x22
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2240      	movs	r2, #64	@ 0x40
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800306c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003074:	88f8      	ldrh	r0, [r7, #6]
 8003076:	893a      	ldrh	r2, [r7, #8]
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	4603      	mov	r3, r0
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f9ff 	bl	8003488 <I2C_RequestMemoryRead>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0ad      	b.n	80031f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2bff      	cmp	r3, #255	@ 0xff
 80030a4:	d90e      	bls.n	80030c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	8979      	ldrh	r1, [r7, #10]
 80030b4:	4b52      	ldr	r3, [pc, #328]	@ (8003200 <HAL_I2C_Mem_Read+0x22c>)
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fc1f 	bl	8003900 <I2C_TransferConfig>
 80030c2:	e00f      	b.n	80030e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	8979      	ldrh	r1, [r7, #10]
 80030d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <HAL_I2C_Mem_Read+0x22c>)
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fc0e 	bl	8003900 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	2200      	movs	r2, #0
 80030ec:	2104      	movs	r1, #4
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa42 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e07c      	b.n	80031f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d034      	beq.n	80031a4 <HAL_I2C_Mem_Read+0x1d0>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d130      	bne.n	80031a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003148:	2200      	movs	r2, #0
 800314a:	2180      	movs	r1, #128	@ 0x80
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fa13 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e04d      	b.n	80031f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2bff      	cmp	r3, #255	@ 0xff
 8003164:	d90e      	bls.n	8003184 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	b2da      	uxtb	r2, r3
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	2300      	movs	r3, #0
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fbbf 	bl	8003900 <I2C_TransferConfig>
 8003182:	e00f      	b.n	80031a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003192:	b2da      	uxtb	r2, r3
 8003194:	8979      	ldrh	r1, [r7, #10]
 8003196:	2300      	movs	r3, #0
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fbae 	bl	8003900 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d19a      	bne.n	80030e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fa80 	bl	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e01a      	b.n	80031f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2220      	movs	r2, #32
 80031c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_I2C_Mem_Read+0x230>)
 80031d6:	400b      	ands	r3, r1
 80031d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	80002400 	.word	0x80002400
 8003204:	fe00e800 	.word	0xfe00e800

08003208 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b20      	cmp	r3, #32
 8003226:	f040 80d6 	bne.w	80033d6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003238:	d101      	bne.n	800323e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
 800323c:	e0cc      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_I2C_IsDeviceReady+0x44>
 8003248:	2302      	movs	r3, #2
 800324a:	e0c5      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x1d0>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2224      	movs	r2, #36	@ 0x24
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_I2C_IsDeviceReady+0x72>
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003270:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003274:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003278:	e006      	b.n	8003288 <HAL_I2C_IsDeviceReady+0x80>
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003280:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003284:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800328e:	f7fe fb7f 	bl	8001990 <HAL_GetTick>
 8003292:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b20      	cmp	r3, #32
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80032c0:	e034      	b.n	800332c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032c8:	d01a      	beq.n	8003300 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7fe fb61 	bl	8001990 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <HAL_I2C_IsDeviceReady+0xd8>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e06b      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b10      	cmp	r3, #16
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800332c:	7ffb      	ldrb	r3, [r7, #31]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <HAL_I2C_IsDeviceReady+0x130>
 8003332:	7fbb      	ldrb	r3, [r7, #30]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0c4      	beq.n	80032c2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b10      	cmp	r3, #16
 8003344:	d01a      	beq.n	800337c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	2120      	movs	r1, #32
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f911 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e03b      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2220      	movs	r2, #32
 8003366:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	e02d      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	2120      	movs	r1, #32
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f8f6 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e020      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2210      	movs	r2, #16
 800339c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2220      	movs	r2, #32
 80033a4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3301      	adds	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f63f af56 	bhi.w	8003262 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	460b      	mov	r3, r1
 80033f4:	813b      	strh	r3, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	8979      	ldrh	r1, [r7, #10]
 8003400:	4b20      	ldr	r3, [pc, #128]	@ (8003484 <I2C_RequestMemoryWrite+0xa4>)
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fa79 	bl	8003900 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f909 	bl	800362a <I2C_WaitOnTXISFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e02c      	b.n	800347c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003428:	893b      	ldrh	r3, [r7, #8]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28
 8003432:	e015      	b.n	8003460 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003434:	893b      	ldrh	r3, [r7, #8]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	b29b      	uxth	r3, r3
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f8ef 	bl	800362a <I2C_WaitOnTXISFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e012      	b.n	800347c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003456:	893b      	ldrh	r3, [r7, #8]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2200      	movs	r2, #0
 8003468:	2180      	movs	r1, #128	@ 0x80
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f884 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	80002000 	.word	0x80002000

08003488 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	460b      	mov	r3, r1
 800349c:	813b      	strh	r3, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	8979      	ldrh	r1, [r7, #10]
 80034a8:	4b20      	ldr	r3, [pc, #128]	@ (800352c <I2C_RequestMemoryRead+0xa4>)
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2300      	movs	r3, #0
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fa26 	bl	8003900 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f8b6 	bl	800362a <I2C_WaitOnTXISFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e02c      	b.n	8003522 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ce:	893b      	ldrh	r3, [r7, #8]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80034d8:	e015      	b.n	8003506 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034da:	893b      	ldrh	r3, [r7, #8]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	b29b      	uxth	r3, r3
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	69b9      	ldr	r1, [r7, #24]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f89c 	bl	800362a <I2C_WaitOnTXISFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e012      	b.n	8003522 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034fc:	893b      	ldrh	r3, [r7, #8]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2200      	movs	r2, #0
 800350e:	2140      	movs	r1, #64	@ 0x40
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f831 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	80002000 	.word	0x80002000

08003530 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d103      	bne.n	800354e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d007      	beq.n	800356c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	619a      	str	r2, [r3, #24]
  }
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003588:	e03b      	b.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f8d6 	bl	8003740 <I2C_IsErrorOccurred>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a4:	d02d      	beq.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fe f9f3 	bl	8001990 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d122      	bne.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d113      	bne.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	429a      	cmp	r2, r3
 800361e:	d0b4      	beq.n	800358a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003636:	e033      	b.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f87f 	bl	8003740 <I2C_IsErrorOccurred>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e031      	b.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003652:	d025      	beq.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003654:	f7fe f99c 	bl	8001990 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	d302      	bcc.n	800366a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11a      	bne.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d013      	beq.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e007      	b.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d1c4      	bne.n	8003638 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c4:	e02f      	b.n	8003726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f838 	bl	8003740 <I2C_IsErrorOccurred>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e02d      	b.n	8003736 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe f959 	bl	8001990 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11a      	bne.n	8003726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d013      	beq.n	8003726 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e007      	b.n	8003736 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b20      	cmp	r3, #32
 8003732:	d1c8      	bne.n	80036c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	@ 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d068      	beq.n	800383e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2210      	movs	r2, #16
 8003772:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003774:	e049      	b.n	800380a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800377c:	d045      	beq.n	800380a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe f907 	bl	8001990 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_IsErrorOccurred+0x54>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d13a      	bne.n	800380a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b6:	d121      	bne.n	80037fc <I2C_IsErrorOccurred+0xbc>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037be:	d01d      	beq.n	80037fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d01a      	beq.n	80037fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037d6:	f7fe f8db 	bl	8001990 <HAL_GetTick>
 80037da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037dc:	e00e      	b.n	80037fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037de:	f7fe f8d7 	bl	8001990 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b19      	cmp	r3, #25
 80037ea:	d907      	bls.n	80037fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f043 0320 	orr.w	r3, r3, #32
 80037f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80037fa:	e006      	b.n	800380a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d1e9      	bne.n	80037de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b20      	cmp	r3, #32
 8003816:	d003      	beq.n	8003820 <I2C_IsErrorOccurred+0xe0>
 8003818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0aa      	beq.n	8003776 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003824:	2b00      	cmp	r3, #0
 8003826:	d103      	bne.n	8003830 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2220      	movs	r2, #32
 800382e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f043 0308 	orr.w	r3, r3, #8
 8003878:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f043 0302 	orr.w	r3, r3, #2
 800389a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01c      	beq.n	80038ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7ff fe3b 	bl	8003530 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <I2C_IsErrorOccurred+0x1bc>)
 80038c6:	400b      	ands	r3, r1
 80038c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80038ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3728      	adds	r7, #40	@ 0x28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	fe00e800 	.word	0xfe00e800

08003900 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	817b      	strh	r3, [r7, #10]
 800390e:	4613      	mov	r3, r2
 8003910:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003918:	7a7b      	ldrb	r3, [r7, #9]
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003920:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	4313      	orrs	r3, r2
 800392a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800392e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	0d5b      	lsrs	r3, r3, #21
 800393a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800393e:	4b08      	ldr	r3, [pc, #32]	@ (8003960 <I2C_TransferConfig+0x60>)
 8003940:	430b      	orrs	r3, r1
 8003942:	43db      	mvns	r3, r3
 8003944:	ea02 0103 	and.w	r1, r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	03ff63ff 	.word	0x03ff63ff

08003964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b20      	cmp	r3, #32
 8003978:	d138      	bne.n	80039ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003984:	2302      	movs	r3, #2
 8003986:	e032      	b.n	80039ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2224      	movs	r2, #36	@ 0x24
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b085      	sub	sp, #20
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d139      	bne.n	8003a84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e033      	b.n	8003a86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2224      	movs	r2, #36	@ 0x24
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	021b      	lsls	r3, r3, #8
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	@ (8003ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40007000 	.word	0x40007000

08003ab4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <HAL_PWREx_GetVoltageRange+0x18>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40007000 	.word	0x40007000

08003ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ade:	d130      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ae0:	4b23      	ldr	r3, [pc, #140]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aec:	d038      	beq.n	8003b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aee:	4b20      	ldr	r3, [pc, #128]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003af6:	4a1e      	ldr	r2, [pc, #120]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003afc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2232      	movs	r2, #50	@ 0x32
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
 8003b08:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0c9b      	lsrs	r3, r3, #18
 8003b10:	3301      	adds	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b14:	e002      	b.n	8003b1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1c:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b28:	d102      	bne.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f2      	bne.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3c:	d110      	bne.n	8003b60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e00f      	b.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b42:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4e:	d007      	beq.n	8003b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b50:	4b07      	ldr	r3, [pc, #28]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b58:	4a05      	ldr	r2, [pc, #20]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40007000 	.word	0x40007000
 8003b74:	20000020 	.word	0x20000020
 8003b78:	431bde83 	.word	0x431bde83

08003b7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f000 bc02 	b.w	8004394 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b90:	4b96      	ldr	r3, [pc, #600]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b9a:	4b94      	ldr	r3, [pc, #592]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80e4 	beq.w	8003d7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4c>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	f040 808b 	bne.w	8003cd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	f040 8087 	bne.w	8003cd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bc8:	4b88      	ldr	r3, [pc, #544]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x64>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e3d9      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	4b81      	ldr	r3, [pc, #516]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <HAL_RCC_OscConfig+0x7e>
 8003bf0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf8:	e005      	b.n	8003c06 <HAL_RCC_OscConfig+0x8a>
 8003bfa:	4b7c      	ldr	r3, [pc, #496]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d223      	bcs.n	8003c52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fd8c 	bl	800472c <RCC_SetFlashLatencyFromMSIRange>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e3ba      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1e:	4b73      	ldr	r3, [pc, #460]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a72      	ldr	r2, [pc, #456]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c24:	f043 0308 	orr.w	r3, r3, #8
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b70      	ldr	r3, [pc, #448]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	496d      	ldr	r1, [pc, #436]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	4968      	ldr	r1, [pc, #416]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
 8003c50:	e025      	b.n	8003c9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c52:	4b66      	ldr	r3, [pc, #408]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a65      	ldr	r2, [pc, #404]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c58:	f043 0308 	orr.w	r3, r3, #8
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4b63      	ldr	r3, [pc, #396]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4960      	ldr	r1, [pc, #384]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c70:	4b5e      	ldr	r3, [pc, #376]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	495b      	ldr	r1, [pc, #364]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fd4c 	bl	800472c <RCC_SetFlashLatencyFromMSIRange>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e37a      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c9e:	f000 fc81 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b51      	ldr	r3, [pc, #324]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	4950      	ldr	r1, [pc, #320]	@ (8003df0 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a4e      	ldr	r2, [pc, #312]	@ (8003df4 <HAL_RCC_OscConfig+0x278>)
 8003cbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8003df8 <HAL_RCC_OscConfig+0x27c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fe14 	bl	80018f0 <HAL_InitTick>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d052      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	e35e      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d032      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cde:	4b43      	ldr	r3, [pc, #268]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a42      	ldr	r2, [pc, #264]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cea:	f7fd fe51 	bl	8001990 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf2:	f7fd fe4d 	bl	8001990 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e347      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d04:	4b39      	ldr	r3, [pc, #228]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d10:	4b36      	ldr	r3, [pc, #216]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a35      	ldr	r2, [pc, #212]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d16:	f043 0308 	orr.w	r3, r3, #8
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4b33      	ldr	r3, [pc, #204]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	4930      	ldr	r1, [pc, #192]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	492b      	ldr	r1, [pc, #172]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
 8003d42:	e01a      	b.n	8003d7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d44:	4b29      	ldr	r3, [pc, #164]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a28      	ldr	r2, [pc, #160]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d50:	f7fd fe1e 	bl	8001990 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d58:	f7fd fe1a 	bl	8001990 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e314      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d6a:	4b20      	ldr	r3, [pc, #128]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1dc>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d073      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x21c>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d10e      	bne.n	8003db0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d10b      	bne.n	8003db0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d063      	beq.n	8003e6c <HAL_RCC_OscConfig+0x2f0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d15f      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e2f1      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
 8003dba:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e025      	b.n	8003e14 <HAL_RCC_OscConfig+0x298>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dd0:	d114      	bne.n	8003dfc <HAL_RCC_OscConfig+0x280>
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a05      	ldr	r2, [pc, #20]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a02      	ldr	r2, [pc, #8]	@ (8003dec <HAL_RCC_OscConfig+0x270>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e013      	b.n	8003e14 <HAL_RCC_OscConfig+0x298>
 8003dec:	40021000 	.word	0x40021000
 8003df0:	08006d98 	.word	0x08006d98
 8003df4:	20000020 	.word	0x20000020
 8003df8:	20000024 	.word	0x20000024
 8003dfc:	4ba0      	ldr	r3, [pc, #640]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a9f      	ldr	r2, [pc, #636]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b9d      	ldr	r3, [pc, #628]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a9c      	ldr	r2, [pc, #624]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fdb8 	bl	8001990 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fd fdb4 	bl	8001990 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	@ 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e2ae      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e36:	4b92      	ldr	r3, [pc, #584]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x2a8>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd fda4 	bl	8001990 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fda0 	bl	8001990 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	@ 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e29a      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e5e:	4b88      	ldr	r3, [pc, #544]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2d0>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d060      	beq.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_OscConfig+0x310>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d119      	bne.n	8003eba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d116      	bne.n	8003eba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e8c:	4b7c      	ldr	r3, [pc, #496]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x328>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e277      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b76      	ldr	r3, [pc, #472]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	061b      	lsls	r3, r3, #24
 8003eb2:	4973      	ldr	r1, [pc, #460]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb8:	e040      	b.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d023      	beq.n	8003f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6e      	ldr	r2, [pc, #440]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fd fd5f 	bl	8001990 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed6:	f7fd fd5b 	bl	8001990 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e255      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee8:	4b65      	ldr	r3, [pc, #404]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b62      	ldr	r3, [pc, #392]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	495f      	ldr	r1, [pc, #380]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	e018      	b.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd fd3b 	bl	8001990 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1e:	f7fd fd37 	bl	8001990 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e231      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f30:	4b53      	ldr	r3, [pc, #332]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d03c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01c      	beq.n	8003f8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f50:	4b4b      	ldr	r3, [pc, #300]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f56:	4a4a      	ldr	r2, [pc, #296]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd fd16 	bl	8001990 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fd fd12 	bl	8001990 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e20c      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f7a:	4b41      	ldr	r3, [pc, #260]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0ef      	beq.n	8003f68 <HAL_RCC_OscConfig+0x3ec>
 8003f88:	e01b      	b.n	8003fc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f90:	4a3b      	ldr	r2, [pc, #236]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9a:	f7fd fcf9 	bl	8001990 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa2:	f7fd fcf5 	bl	8001990 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e1ef      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb4:	4b32      	ldr	r3, [pc, #200]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ef      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80a6 	beq.w	800411c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10d      	bne.n	8003ffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe0:	4b27      	ldr	r3, [pc, #156]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe4:	4a26      	ldr	r2, [pc, #152]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fec:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffc:	4b21      	ldr	r3, [pc, #132]	@ (8004084 <HAL_RCC_OscConfig+0x508>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d118      	bne.n	800403a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004008:	4b1e      	ldr	r3, [pc, #120]	@ (8004084 <HAL_RCC_OscConfig+0x508>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <HAL_RCC_OscConfig+0x508>)
 800400e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004014:	f7fd fcbc 	bl	8001990 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401c:	f7fd fcb8 	bl	8001990 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1b2      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402e:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <HAL_RCC_OscConfig+0x508>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d108      	bne.n	8004054 <HAL_RCC_OscConfig+0x4d8>
 8004042:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004048:	4a0d      	ldr	r2, [pc, #52]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004052:	e029      	b.n	80040a8 <HAL_RCC_OscConfig+0x52c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b05      	cmp	r3, #5
 800405a:	d115      	bne.n	8004088 <HAL_RCC_OscConfig+0x50c>
 800405c:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	4a07      	ldr	r2, [pc, #28]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004072:	4a03      	ldr	r2, [pc, #12]	@ (8004080 <HAL_RCC_OscConfig+0x504>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800407c:	e014      	b.n	80040a8 <HAL_RCC_OscConfig+0x52c>
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	40007000 	.word	0x40007000
 8004088:	4b9a      	ldr	r3, [pc, #616]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	4a99      	ldr	r2, [pc, #612]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004098:	4b96      	ldr	r3, [pc, #600]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	4a95      	ldr	r2, [pc, #596]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d016      	beq.n	80040de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fd fc6e 	bl	8001990 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7fd fc6a 	bl	8001990 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e162      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ce:	4b89      	ldr	r3, [pc, #548]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ed      	beq.n	80040b8 <HAL_RCC_OscConfig+0x53c>
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fd fc57 	bl	8001990 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e4:	e00a      	b.n	80040fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fd fc53 	bl	8001990 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e14b      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040fc:	4b7d      	ldr	r3, [pc, #500]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ed      	bne.n	80040e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800410a:	7ffb      	ldrb	r3, [r7, #31]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004110:	4b78      	ldr	r3, [pc, #480]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004114:	4a77      	ldr	r2, [pc, #476]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800411a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d03c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01c      	beq.n	800416a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004130:	4b70      	ldr	r3, [pc, #448]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004132:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004136:	4a6f      	ldr	r2, [pc, #444]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fd fc26 	bl	8001990 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004148:	f7fd fc22 	bl	8001990 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e11c      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800415a:	4b66      	ldr	r3, [pc, #408]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 800415c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ef      	beq.n	8004148 <HAL_RCC_OscConfig+0x5cc>
 8004168:	e01b      	b.n	80041a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800416a:	4b62      	ldr	r3, [pc, #392]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 800416c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004170:	4a60      	ldr	r2, [pc, #384]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fd fc09 	bl	8001990 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004182:	f7fd fc05 	bl	8001990 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0ff      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004194:	4b57      	ldr	r3, [pc, #348]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ef      	bne.n	8004182 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80f3 	beq.w	8004392 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f040 80c9 	bne.w	8004348 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041b6:	4b4f      	ldr	r3, [pc, #316]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0203 	and.w	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d12c      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	3b01      	subs	r3, #1
 80041d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d123      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d11b      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d113      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d109      	bne.n	8004224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	3b01      	subs	r3, #1
 800421e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d06b      	beq.n	80042fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d062      	beq.n	80042f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800422a:	4b32      	ldr	r3, [pc, #200]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0ac      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800423a:	4b2e      	ldr	r3, [pc, #184]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2d      	ldr	r2, [pc, #180]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004240:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004244:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004246:	f7fd fba3 	bl	8001990 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424e:	f7fd fb9f 	bl	8001990 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e099      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004260:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800426c:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	4b21      	ldr	r3, [pc, #132]	@ (80042f8 <HAL_RCC_OscConfig+0x77c>)
 8004272:	4013      	ands	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800427c:	3a01      	subs	r2, #1
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	4311      	orrs	r1, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004286:	0212      	lsls	r2, r2, #8
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800428e:	0852      	lsrs	r2, r2, #1
 8004290:	3a01      	subs	r2, #1
 8004292:	0552      	lsls	r2, r2, #21
 8004294:	4311      	orrs	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800429a:	0852      	lsrs	r2, r2, #1
 800429c:	3a01      	subs	r2, #1
 800429e:	0652      	lsls	r2, r2, #25
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042a6:	06d2      	lsls	r2, r2, #27
 80042a8:	430a      	orrs	r2, r1
 80042aa:	4912      	ldr	r1, [pc, #72]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0f      	ldr	r2, [pc, #60]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80042b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042bc:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a0c      	ldr	r2, [pc, #48]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042c8:	f7fd fb62 	bl	8001990 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fb5e 	bl	8001990 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e058      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e2:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <HAL_RCC_OscConfig+0x778>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042ee:	e050      	b.n	8004392 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e04f      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
 80042f4:	40021000 	.word	0x40021000
 80042f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fc:	4b27      	ldr	r3, [pc, #156]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d144      	bne.n	8004392 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004308:	4b24      	ldr	r3, [pc, #144]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a23      	ldr	r2, [pc, #140]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 800430e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004312:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004314:	4b21      	ldr	r3, [pc, #132]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a20      	ldr	r2, [pc, #128]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 800431a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800431e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004320:	f7fd fb36 	bl	8001990 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004328:	f7fd fb32 	bl	8001990 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e02c      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	4b18      	ldr	r3, [pc, #96]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x7ac>
 8004346:	e024      	b.n	8004392 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d01f      	beq.n	800438e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434e:	4b13      	ldr	r3, [pc, #76]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a12      	ldr	r2, [pc, #72]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 8004354:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fd fb19 	bl	8001990 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004362:	f7fd fb15 	bl	8001990 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e00f      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004374:	4b09      	ldr	r3, [pc, #36]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	4905      	ldr	r1, [pc, #20]	@ (800439c <HAL_RCC_OscConfig+0x820>)
 8004386:	4b06      	ldr	r3, [pc, #24]	@ (80043a0 <HAL_RCC_OscConfig+0x824>)
 8004388:	4013      	ands	r3, r2
 800438a:	60cb      	str	r3, [r1, #12]
 800438c:	e001      	b.n	8004392 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	feeefffc 	.word	0xfeeefffc

080043a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0e7      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b8:	4b75      	ldr	r3, [pc, #468]	@ (8004590 <HAL_RCC_ClockConfig+0x1ec>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d910      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b72      	ldr	r3, [pc, #456]	@ (8004590 <HAL_RCC_ClockConfig+0x1ec>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 0207 	bic.w	r2, r3, #7
 80043ce:	4970      	ldr	r1, [pc, #448]	@ (8004590 <HAL_RCC_ClockConfig+0x1ec>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004590 <HAL_RCC_ClockConfig+0x1ec>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0cf      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d010      	beq.n	8004416 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	4b66      	ldr	r3, [pc, #408]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004400:	429a      	cmp	r2, r3
 8004402:	d908      	bls.n	8004416 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004404:	4b63      	ldr	r3, [pc, #396]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4960      	ldr	r1, [pc, #384]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d04c      	beq.n	80044bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d107      	bne.n	800443a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442a:	4b5a      	ldr	r3, [pc, #360]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d121      	bne.n	800447a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e0a6      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d107      	bne.n	8004452 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004442:	4b54      	ldr	r3, [pc, #336]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d115      	bne.n	800447a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e09a      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d107      	bne.n	800446a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800445a:	4b4e      	ldr	r3, [pc, #312]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e08e      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800446a:	4b4a      	ldr	r3, [pc, #296]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e086      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800447a:	4b46      	ldr	r3, [pc, #280]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f023 0203 	bic.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4943      	ldr	r1, [pc, #268]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	4313      	orrs	r3, r2
 800448a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448c:	f7fd fa80 	bl	8001990 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	e00a      	b.n	80044aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004494:	f7fd fa7c 	bl	8001990 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e06e      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 020c 	and.w	r2, r3, #12
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1eb      	bne.n	8004494 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d010      	beq.n	80044ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	4b31      	ldr	r3, [pc, #196]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d208      	bcs.n	80044ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	492b      	ldr	r1, [pc, #172]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044ea:	4b29      	ldr	r3, [pc, #164]	@ (8004590 <HAL_RCC_ClockConfig+0x1ec>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d210      	bcs.n	800451a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f8:	4b25      	ldr	r3, [pc, #148]	@ (8004590 <HAL_RCC_ClockConfig+0x1ec>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 0207 	bic.w	r2, r3, #7
 8004500:	4923      	ldr	r1, [pc, #140]	@ (8004590 <HAL_RCC_ClockConfig+0x1ec>)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004508:	4b21      	ldr	r3, [pc, #132]	@ (8004590 <HAL_RCC_ClockConfig+0x1ec>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d001      	beq.n	800451a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e036      	b.n	8004588 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004526:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	4918      	ldr	r1, [pc, #96]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004544:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4910      	ldr	r1, [pc, #64]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	4313      	orrs	r3, r2
 8004556:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004558:	f000 f824 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	490b      	ldr	r1, [pc, #44]	@ (8004598 <HAL_RCC_ClockConfig+0x1f4>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
 8004574:	4a09      	ldr	r2, [pc, #36]	@ (800459c <HAL_RCC_ClockConfig+0x1f8>)
 8004576:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004578:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <HAL_RCC_ClockConfig+0x1fc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fd f9b7 	bl	80018f0 <HAL_InitTick>
 8004582:	4603      	mov	r3, r0
 8004584:	72fb      	strb	r3, [r7, #11]

  return status;
 8004586:	7afb      	ldrb	r3, [r7, #11]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40022000 	.word	0x40022000
 8004594:	40021000 	.word	0x40021000
 8004598:	08006d98 	.word	0x08006d98
 800459c:	20000020 	.word	0x20000020
 80045a0:	20000024 	.word	0x20000024

080045a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	@ 0x24
 80045a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b2:	4b3e      	ldr	r3, [pc, #248]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045bc:	4b3b      	ldr	r3, [pc, #236]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x34>
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b0c      	cmp	r3, #12
 80045d0:	d121      	bne.n	8004616 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d11e      	bne.n	8004616 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045d8:	4b34      	ldr	r3, [pc, #208]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045e4:	4b31      	ldr	r3, [pc, #196]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 80045e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	e005      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045f4:	4b2d      	ldr	r3, [pc, #180]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004600:	4a2b      	ldr	r2, [pc, #172]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10d      	bne.n	800462c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004614:	e00a      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d102      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800461c:	4b25      	ldr	r3, [pc, #148]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	e004      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d101      	bne.n	800462c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004628:	4b23      	ldr	r3, [pc, #140]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800462a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b0c      	cmp	r3, #12
 8004630:	d134      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004632:	4b1e      	ldr	r3, [pc, #120]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d003      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0xa6>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d003      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0xac>
 8004648:	e005      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800464a:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800464c:	617b      	str	r3, [r7, #20]
      break;
 800464e:	e005      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004650:	4b19      	ldr	r3, [pc, #100]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004652:	617b      	str	r3, [r7, #20]
      break;
 8004654:	e002      	b.n	800465c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	617b      	str	r3, [r7, #20]
      break;
 800465a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800465c:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	3301      	adds	r3, #1
 8004668:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800466a:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	fb03 f202 	mul.w	r2, r3, r2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004682:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	0e5b      	lsrs	r3, r3, #25
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	3301      	adds	r3, #1
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800469c:	69bb      	ldr	r3, [r7, #24]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3724      	adds	r7, #36	@ 0x24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	08006db0 	.word	0x08006db0
 80046b4:	00f42400 	.word	0x00f42400
 80046b8:	017d7840 	.word	0x017d7840

080046bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c0:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c2:	681b      	ldr	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000020 	.word	0x20000020

080046d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046d8:	f7ff fff0 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	4904      	ldr	r1, [pc, #16]	@ (80046fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ea:	5ccb      	ldrb	r3, [r1, r3]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	08006da8 	.word	0x08006da8

08004700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004704:	f7ff ffda 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0adb      	lsrs	r3, r3, #11
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4904      	ldr	r1, [pc, #16]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021000 	.word	0x40021000
 8004728:	08006da8 	.word	0x08006da8

0800472c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004738:	4b2a      	ldr	r3, [pc, #168]	@ (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004744:	f7ff f9b6 	bl	8003ab4 <HAL_PWREx_GetVoltageRange>
 8004748:	6178      	str	r0, [r7, #20]
 800474a:	e014      	b.n	8004776 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800474c:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	4a24      	ldr	r2, [pc, #144]	@ (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004756:	6593      	str	r3, [r2, #88]	@ 0x58
 8004758:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004764:	f7ff f9a6 	bl	8003ab4 <HAL_PWREx_GetVoltageRange>
 8004768:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800476a:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476e:	4a1d      	ldr	r2, [pc, #116]	@ (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004774:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800477c:	d10b      	bne.n	8004796 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b80      	cmp	r3, #128	@ 0x80
 8004782:	d919      	bls.n	80047b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2ba0      	cmp	r3, #160	@ 0xa0
 8004788:	d902      	bls.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800478a:	2302      	movs	r3, #2
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e013      	b.n	80047b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004790:	2301      	movs	r3, #1
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	e010      	b.n	80047b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b80      	cmp	r3, #128	@ 0x80
 800479a:	d902      	bls.n	80047a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800479c:	2303      	movs	r3, #3
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	e00a      	b.n	80047b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b80      	cmp	r3, #128	@ 0x80
 80047a6:	d102      	bne.n	80047ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047a8:	2302      	movs	r3, #2
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e004      	b.n	80047b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b70      	cmp	r3, #112	@ 0x70
 80047b2:	d101      	bne.n	80047b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047b4:	2301      	movs	r3, #1
 80047b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 0207 	bic.w	r2, r3, #7
 80047c0:	4909      	ldr	r1, [pc, #36]	@ (80047e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047c8:	4b07      	ldr	r3, [pc, #28]	@ (80047e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40022000 	.word	0x40022000

080047ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047f4:	2300      	movs	r3, #0
 80047f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f8:	2300      	movs	r3, #0
 80047fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004804:	2b00      	cmp	r3, #0
 8004806:	d031      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004810:	d01a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004812:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004816:	d814      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800481c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004820:	d10f      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004822:	4b5d      	ldr	r3, [pc, #372]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4a5c      	ldr	r2, [pc, #368]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800482e:	e00c      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2100      	movs	r1, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa32 	bl	8004ca0 <RCCEx_PLLSAI1_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	74fb      	strb	r3, [r7, #19]
      break;
 8004846:	e000      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484a:	7cfb      	ldrb	r3, [r7, #19]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10b      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004850:	4b51      	ldr	r3, [pc, #324]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004856:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	494e      	ldr	r1, [pc, #312]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004866:	e001      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 809e 	beq.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800487a:	2300      	movs	r3, #0
 800487c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800487e:	4b46      	ldr	r3, [pc, #280]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00d      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004894:	4b40      	ldr	r3, [pc, #256]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004898:	4a3f      	ldr	r2, [pc, #252]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489e:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ac:	2301      	movs	r3, #1
 80048ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b0:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a39      	ldr	r2, [pc, #228]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048bc:	f7fd f868 	bl	8001990 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048c2:	e009      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c4:	f7fd f864 	bl	8001990 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d902      	bls.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	74fb      	strb	r3, [r7, #19]
        break;
 80048d6:	e005      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d8:	4b30      	ldr	r3, [pc, #192]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0ef      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d15a      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01e      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	429a      	cmp	r2, r3
 8004904:	d019      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004906:	4b24      	ldr	r3, [pc, #144]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004910:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004912:	4b21      	ldr	r3, [pc, #132]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004918:	4a1f      	ldr	r2, [pc, #124]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800491a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004922:	4b1d      	ldr	r3, [pc, #116]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004928:	4a1b      	ldr	r2, [pc, #108]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004932:	4a19      	ldr	r2, [pc, #100]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d016      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd f824 	bl	8001990 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494a:	e00b      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fd f820 	bl	8001990 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d902      	bls.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	74fb      	strb	r3, [r7, #19]
            break;
 8004962:	e006      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004964:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ec      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004972:	7cfb      	ldrb	r3, [r7, #19]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004978:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004986:	4904      	ldr	r1, [pc, #16]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800498e:	e009      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	74bb      	strb	r3, [r7, #18]
 8004994:	e006      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a4:	7c7b      	ldrb	r3, [r7, #17]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049aa:	4b8d      	ldr	r3, [pc, #564]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	4a8c      	ldr	r2, [pc, #560]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c2:	4b87      	ldr	r3, [pc, #540]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f023 0203 	bic.w	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4983      	ldr	r1, [pc, #524]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e4:	4b7e      	ldr	r3, [pc, #504]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ea:	f023 020c 	bic.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	497b      	ldr	r1, [pc, #492]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a06:	4b76      	ldr	r3, [pc, #472]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	4972      	ldr	r1, [pc, #456]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a28:	4b6d      	ldr	r3, [pc, #436]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a36:	496a      	ldr	r1, [pc, #424]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4a:	4b65      	ldr	r3, [pc, #404]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	4961      	ldr	r1, [pc, #388]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a6c:	4b5c      	ldr	r3, [pc, #368]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	4959      	ldr	r1, [pc, #356]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8e:	4b54      	ldr	r3, [pc, #336]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	4950      	ldr	r1, [pc, #320]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abe:	4948      	ldr	r1, [pc, #288]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad2:	4b43      	ldr	r3, [pc, #268]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae0:	493f      	ldr	r1, [pc, #252]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d028      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af4:	4b3a      	ldr	r3, [pc, #232]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b02:	4937      	ldr	r1, [pc, #220]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b12:	d106      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b14:	4b32      	ldr	r3, [pc, #200]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a31      	ldr	r2, [pc, #196]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b1e:	60d3      	str	r3, [r2, #12]
 8004b20:	e011      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b2a:	d10c      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	2101      	movs	r1, #1
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f8b4 	bl	8004ca0 <RCCEx_PLLSAI1_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d028      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b52:	4b23      	ldr	r3, [pc, #140]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b60:	491f      	ldr	r1, [pc, #124]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b70:	d106      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b72:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b7c:	60d3      	str	r3, [r2, #12]
 8004b7e:	e011      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f885 	bl	8004ca0 <RCCEx_PLLSAI1_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02b      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbe:	4908      	ldr	r1, [pc, #32]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bce:	d109      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd0:	4b03      	ldr	r3, [pc, #12]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a02      	ldr	r2, [pc, #8]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bda:	60d3      	str	r3, [r2, #12]
 8004bdc:	e014      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f853 	bl	8004ca0 <RCCEx_PLLSAI1_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01c      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c22:	4916      	ldr	r1, [pc, #88]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c32:	d10c      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3304      	adds	r3, #4
 8004c38:	2102      	movs	r1, #2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f830 	bl	8004ca0 <RCCEx_PLLSAI1_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c44:	7cfb      	ldrb	r3, [r7, #19]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004c4a:	7cfb      	ldrb	r3, [r7, #19]
 8004c4c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c5a:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c68:	4904      	ldr	r1, [pc, #16]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c70:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000

08004c80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a04      	ldr	r2, [pc, #16]	@ (8004c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c8a:	f043 0304 	orr.w	r3, r3, #4
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000

08004ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cae:	4b74      	ldr	r3, [pc, #464]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d018      	beq.n	8004cec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cba:	4b71      	ldr	r3, [pc, #452]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0203 	and.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d10d      	bne.n	8004ce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cd2:	4b6b      	ldr	r3, [pc, #428]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d047      	beq.n	8004d76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
 8004cea:	e044      	b.n	8004d76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d018      	beq.n	8004d26 <RCCEx_PLLSAI1_Config+0x86>
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d825      	bhi.n	8004d44 <RCCEx_PLLSAI1_Config+0xa4>
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d002      	beq.n	8004d02 <RCCEx_PLLSAI1_Config+0x62>
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d009      	beq.n	8004d14 <RCCEx_PLLSAI1_Config+0x74>
 8004d00:	e020      	b.n	8004d44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d02:	4b5f      	ldr	r3, [pc, #380]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d11d      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d12:	e01a      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d14:	4b5a      	ldr	r3, [pc, #360]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d116      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d24:	e013      	b.n	8004d4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d26:	4b56      	ldr	r3, [pc, #344]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d32:	4b53      	ldr	r3, [pc, #332]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d42:	e006      	b.n	8004d52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
      break;
 8004d48:	e004      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10d      	bne.n	8004d76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d5a:	4b49      	ldr	r3, [pc, #292]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6819      	ldr	r1, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	4943      	ldr	r1, [pc, #268]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d17c      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d7c:	4b40      	ldr	r3, [pc, #256]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a3f      	ldr	r2, [pc, #252]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d88:	f7fc fe02 	bl	8001990 <HAL_GetTick>
 8004d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d8e:	e009      	b.n	8004da4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d90:	f7fc fdfe 	bl	8001990 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d902      	bls.n	8004da4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	73fb      	strb	r3, [r7, #15]
        break;
 8004da2:	e005      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004da4:	4b36      	ldr	r3, [pc, #216]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1ef      	bne.n	8004d90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d15f      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d110      	bne.n	8004dde <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dbc:	4b30      	ldr	r3, [pc, #192]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004dc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6892      	ldr	r2, [r2, #8]
 8004dcc:	0211      	lsls	r1, r2, #8
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68d2      	ldr	r2, [r2, #12]
 8004dd2:	06d2      	lsls	r2, r2, #27
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	492a      	ldr	r1, [pc, #168]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	610b      	str	r3, [r1, #16]
 8004ddc:	e027      	b.n	8004e2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d112      	bne.n	8004e0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de4:	4b26      	ldr	r3, [pc, #152]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004dec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6892      	ldr	r2, [r2, #8]
 8004df4:	0211      	lsls	r1, r2, #8
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6912      	ldr	r2, [r2, #16]
 8004dfa:	0852      	lsrs	r2, r2, #1
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	0552      	lsls	r2, r2, #21
 8004e00:	430a      	orrs	r2, r1
 8004e02:	491f      	ldr	r1, [pc, #124]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]
 8004e08:	e011      	b.n	8004e2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6892      	ldr	r2, [r2, #8]
 8004e1a:	0211      	lsls	r1, r2, #8
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6952      	ldr	r2, [r2, #20]
 8004e20:	0852      	lsrs	r2, r2, #1
 8004e22:	3a01      	subs	r2, #1
 8004e24:	0652      	lsls	r2, r2, #25
 8004e26:	430a      	orrs	r2, r1
 8004e28:	4915      	ldr	r1, [pc, #84]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e2e:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a13      	ldr	r2, [pc, #76]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3a:	f7fc fda9 	bl	8001990 <HAL_GetTick>
 8004e3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e40:	e009      	b.n	8004e56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e42:	f7fc fda5 	bl	8001990 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d902      	bls.n	8004e56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	73fb      	strb	r3, [r7, #15]
          break;
 8004e54:	e005      	b.n	8004e62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e56:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0ef      	beq.n	8004e42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4903      	ldr	r1, [pc, #12]	@ (8004e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000

08004e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e095      	b.n	8004fc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d108      	bne.n	8004eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ea6:	d009      	beq.n	8004ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	61da      	str	r2, [r3, #28]
 8004eae:	e005      	b.n	8004ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc fb48 	bl	800156c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004efc:	d902      	bls.n	8004f04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e002      	b.n	8004f0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f12:	d007      	beq.n	8004f24 <HAL_SPI_Init+0xa0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f1c:	d002      	beq.n	8004f24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f66:	ea42 0103 	orr.w	r1, r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	0c1b      	lsrs	r3, r3, #16
 8004f80:	f003 0204 	and.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004fa0:	ea42 0103 	orr.w	r1, r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e049      	b.n	8005070 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fc fb6f 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3304      	adds	r3, #4
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f000 f929 	bl	8005260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e049      	b.n	800511e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc faa6 	bl	80015f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f000 f8d2 	bl	8005260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b086      	sub	sp, #24
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005140:	2302      	movs	r3, #2
 8005142:	e088      	b.n	8005256 <HAL_TIM_IC_ConfigChannel+0x130>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d11b      	bne.n	800518a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005162:	f000 f8ed 	bl	8005340 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 020c 	bic.w	r2, r2, #12
 8005174:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6999      	ldr	r1, [r3, #24]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	619a      	str	r2, [r3, #24]
 8005188:	e060      	b.n	800524c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d11c      	bne.n	80051ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80051a0:	f000 f924 	bl	80053ec <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]
 80051c8:	e040      	b.n	800524c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d11b      	bne.n	8005208 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80051e0:	f000 f941 	bl	8005466 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 020c 	bic.w	r2, r2, #12
 80051f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69d9      	ldr	r1, [r3, #28]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	61da      	str	r2, [r3, #28]
 8005206:	e021      	b.n	800524c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b0c      	cmp	r3, #12
 800520c:	d11c      	bne.n	8005248 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800521e:	f000 f95e 	bl	80054de <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69da      	ldr	r2, [r3, #28]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005230:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69d9      	ldr	r1, [r3, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	021a      	lsls	r2, r3, #8
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	61da      	str	r2, [r3, #28]
 8005246:	e001      	b.n	800524c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a30      	ldr	r2, [pc, #192]	@ (8005334 <TIM_Base_SetConfig+0xd4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_Base_SetConfig+0x20>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527e:	d108      	bne.n	8005292 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a27      	ldr	r2, [pc, #156]	@ (8005334 <TIM_Base_SetConfig+0xd4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00b      	beq.n	80052b2 <TIM_Base_SetConfig+0x52>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a0:	d007      	beq.n	80052b2 <TIM_Base_SetConfig+0x52>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a24      	ldr	r2, [pc, #144]	@ (8005338 <TIM_Base_SetConfig+0xd8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_Base_SetConfig+0x52>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a23      	ldr	r2, [pc, #140]	@ (800533c <TIM_Base_SetConfig+0xdc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d108      	bne.n	80052c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a12      	ldr	r2, [pc, #72]	@ (8005334 <TIM_Base_SetConfig+0xd4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_Base_SetConfig+0xa0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a11      	ldr	r2, [pc, #68]	@ (8005338 <TIM_Base_SetConfig+0xd8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_Base_SetConfig+0xa0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a10      	ldr	r2, [pc, #64]	@ (800533c <TIM_Base_SetConfig+0xdc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d103      	bne.n	8005308 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]
  }
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400

08005340 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 0201 	bic.w	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <TIM_TI1_SetConfig+0xa4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_TI1_SetConfig+0x3e>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d003      	beq.n	800537e <TIM_TI1_SetConfig+0x3e>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <TIM_TI1_SetConfig+0xa8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <TIM_TI1_SetConfig+0x42>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <TIM_TI1_SetConfig+0x44>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e003      	b.n	80053a2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f003 030a 	and.w	r3, r3, #10
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40014000 	.word	0x40014000

080053ec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f023 0210 	bic.w	r2, r3, #16
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800542a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	031b      	lsls	r3, r3, #12
 8005430:	b29b      	uxth	r3, r3
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800543e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005466:	b480      	push	{r7}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80054b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054de:	b480      	push	{r7}
 80054e0:	b087      	sub	sp, #28
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800550a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800551c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	031b      	lsls	r3, r3, #12
 8005522:	b29b      	uxth	r3, r3
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005530:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	031b      	lsls	r3, r3, #12
 8005536:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e04f      	b.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a21      	ldr	r2, [pc, #132]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a14      	ldr	r2, [pc, #80]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d8:	d004      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a10      	ldr	r2, [pc, #64]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10c      	bne.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40014000 	.word	0x40014000

08005624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e040      	b.n	80056b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fb fe70 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	@ 0x24
 8005650:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fb0c 	bl	8005c88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f8af 	bl	80057d4 <UART_SetConfig>
 8005676:	4603      	mov	r3, r0
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e01b      	b.n	80056b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800568e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800569e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fb8b 	bl	8005dcc <UART_CheckIdleState>
 80056b6:	4603      	mov	r3, r0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	@ 0x28
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d177      	bne.n	80057c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_UART_Transmit+0x24>
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e070      	b.n	80057ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2221      	movs	r2, #33	@ 0x21
 80056f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056f6:	f7fc f94b 	bl	8001990 <HAL_GetTick>
 80056fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005714:	d108      	bne.n	8005728 <HAL_UART_Transmit+0x68>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	e003      	b.n	8005730 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005730:	e02f      	b.n	8005792 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	2180      	movs	r1, #128	@ 0x80
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fbed 	bl	8005f1c <UART_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e03b      	b.n	80057ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	881a      	ldrh	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005764:	b292      	uxth	r2, r2
 8005766:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	3302      	adds	r3, #2
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	e007      	b.n	8005780 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3301      	adds	r3, #1
 800577e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1c9      	bne.n	8005732 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2140      	movs	r1, #64	@ 0x40
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fbb7 	bl	8005f1c <UART_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e005      	b.n	80057ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e000      	b.n	80057ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
  }
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d8:	b08a      	sub	sp, #40	@ 0x28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b9e      	ldr	r3, [pc, #632]	@ (8005a7c <UART_SetConfig+0x2a8>)
 8005804:	4013      	ands	r3, r2
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	6812      	ldr	r2, [r2, #0]
 800580a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800580c:	430b      	orrs	r3, r1
 800580e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a93      	ldr	r2, [pc, #588]	@ (8005a80 <UART_SetConfig+0x2ac>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800583c:	4313      	orrs	r3, r2
 800583e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005850:	430a      	orrs	r2, r1
 8005852:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a8a      	ldr	r2, [pc, #552]	@ (8005a84 <UART_SetConfig+0x2b0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d126      	bne.n	80058ac <UART_SetConfig+0xd8>
 800585e:	4b8a      	ldr	r3, [pc, #552]	@ (8005a88 <UART_SetConfig+0x2b4>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b03      	cmp	r3, #3
 800586a:	d81b      	bhi.n	80058a4 <UART_SetConfig+0xd0>
 800586c:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <UART_SetConfig+0xa0>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005885 	.word	0x08005885
 8005878:	08005895 	.word	0x08005895
 800587c:	0800588d 	.word	0x0800588d
 8005880:	0800589d 	.word	0x0800589d
 8005884:	2301      	movs	r3, #1
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800588a:	e0ab      	b.n	80059e4 <UART_SetConfig+0x210>
 800588c:	2302      	movs	r3, #2
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005892:	e0a7      	b.n	80059e4 <UART_SetConfig+0x210>
 8005894:	2304      	movs	r3, #4
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800589a:	e0a3      	b.n	80059e4 <UART_SetConfig+0x210>
 800589c:	2308      	movs	r3, #8
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058a2:	e09f      	b.n	80059e4 <UART_SetConfig+0x210>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058aa:	e09b      	b.n	80059e4 <UART_SetConfig+0x210>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a76      	ldr	r2, [pc, #472]	@ (8005a8c <UART_SetConfig+0x2b8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d138      	bne.n	8005928 <UART_SetConfig+0x154>
 80058b6:	4b74      	ldr	r3, [pc, #464]	@ (8005a88 <UART_SetConfig+0x2b4>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d82d      	bhi.n	8005920 <UART_SetConfig+0x14c>
 80058c4:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <UART_SetConfig+0xf8>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	08005901 	.word	0x08005901
 80058d0:	08005921 	.word	0x08005921
 80058d4:	08005921 	.word	0x08005921
 80058d8:	08005921 	.word	0x08005921
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005921 	.word	0x08005921
 80058e4:	08005921 	.word	0x08005921
 80058e8:	08005921 	.word	0x08005921
 80058ec:	08005909 	.word	0x08005909
 80058f0:	08005921 	.word	0x08005921
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005919 	.word	0x08005919
 8005900:	2300      	movs	r3, #0
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005906:	e06d      	b.n	80059e4 <UART_SetConfig+0x210>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800590e:	e069      	b.n	80059e4 <UART_SetConfig+0x210>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005916:	e065      	b.n	80059e4 <UART_SetConfig+0x210>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800591e:	e061      	b.n	80059e4 <UART_SetConfig+0x210>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005926:	e05d      	b.n	80059e4 <UART_SetConfig+0x210>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a58      	ldr	r2, [pc, #352]	@ (8005a90 <UART_SetConfig+0x2bc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d125      	bne.n	800597e <UART_SetConfig+0x1aa>
 8005932:	4b55      	ldr	r3, [pc, #340]	@ (8005a88 <UART_SetConfig+0x2b4>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005938:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800593c:	2b30      	cmp	r3, #48	@ 0x30
 800593e:	d016      	beq.n	800596e <UART_SetConfig+0x19a>
 8005940:	2b30      	cmp	r3, #48	@ 0x30
 8005942:	d818      	bhi.n	8005976 <UART_SetConfig+0x1a2>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d00a      	beq.n	800595e <UART_SetConfig+0x18a>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d814      	bhi.n	8005976 <UART_SetConfig+0x1a2>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <UART_SetConfig+0x182>
 8005950:	2b10      	cmp	r3, #16
 8005952:	d008      	beq.n	8005966 <UART_SetConfig+0x192>
 8005954:	e00f      	b.n	8005976 <UART_SetConfig+0x1a2>
 8005956:	2300      	movs	r3, #0
 8005958:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800595c:	e042      	b.n	80059e4 <UART_SetConfig+0x210>
 800595e:	2302      	movs	r3, #2
 8005960:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005964:	e03e      	b.n	80059e4 <UART_SetConfig+0x210>
 8005966:	2304      	movs	r3, #4
 8005968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800596c:	e03a      	b.n	80059e4 <UART_SetConfig+0x210>
 800596e:	2308      	movs	r3, #8
 8005970:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005974:	e036      	b.n	80059e4 <UART_SetConfig+0x210>
 8005976:	2310      	movs	r3, #16
 8005978:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597c:	e032      	b.n	80059e4 <UART_SetConfig+0x210>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a3f      	ldr	r2, [pc, #252]	@ (8005a80 <UART_SetConfig+0x2ac>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d12a      	bne.n	80059de <UART_SetConfig+0x20a>
 8005988:	4b3f      	ldr	r3, [pc, #252]	@ (8005a88 <UART_SetConfig+0x2b4>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005992:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005996:	d01a      	beq.n	80059ce <UART_SetConfig+0x1fa>
 8005998:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800599c:	d81b      	bhi.n	80059d6 <UART_SetConfig+0x202>
 800599e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059a2:	d00c      	beq.n	80059be <UART_SetConfig+0x1ea>
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059a8:	d815      	bhi.n	80059d6 <UART_SetConfig+0x202>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <UART_SetConfig+0x1e2>
 80059ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b2:	d008      	beq.n	80059c6 <UART_SetConfig+0x1f2>
 80059b4:	e00f      	b.n	80059d6 <UART_SetConfig+0x202>
 80059b6:	2300      	movs	r3, #0
 80059b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059bc:	e012      	b.n	80059e4 <UART_SetConfig+0x210>
 80059be:	2302      	movs	r3, #2
 80059c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c4:	e00e      	b.n	80059e4 <UART_SetConfig+0x210>
 80059c6:	2304      	movs	r3, #4
 80059c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059cc:	e00a      	b.n	80059e4 <UART_SetConfig+0x210>
 80059ce:	2308      	movs	r3, #8
 80059d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d4:	e006      	b.n	80059e4 <UART_SetConfig+0x210>
 80059d6:	2310      	movs	r3, #16
 80059d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059dc:	e002      	b.n	80059e4 <UART_SetConfig+0x210>
 80059de:	2310      	movs	r3, #16
 80059e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a25      	ldr	r2, [pc, #148]	@ (8005a80 <UART_SetConfig+0x2ac>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	f040 808a 	bne.w	8005b04 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d824      	bhi.n	8005a42 <UART_SetConfig+0x26e>
 80059f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005a00 <UART_SetConfig+0x22c>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a43 	.word	0x08005a43
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a43 	.word	0x08005a43
 8005a10:	08005a33 	.word	0x08005a33
 8005a14:	08005a43 	.word	0x08005a43
 8005a18:	08005a43 	.word	0x08005a43
 8005a1c:	08005a43 	.word	0x08005a43
 8005a20:	08005a3b 	.word	0x08005a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a24:	f7fe fe56 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8005a28:	61f8      	str	r0, [r7, #28]
        break;
 8005a2a:	e010      	b.n	8005a4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a2c:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <UART_SetConfig+0x2c0>)
 8005a2e:	61fb      	str	r3, [r7, #28]
        break;
 8005a30:	e00d      	b.n	8005a4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a32:	f7fe fdb7 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8005a36:	61f8      	str	r0, [r7, #28]
        break;
 8005a38:	e009      	b.n	8005a4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a3e:	61fb      	str	r3, [r7, #28]
        break;
 8005a40:	e005      	b.n	8005a4e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8109 	beq.w	8005c68 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	4413      	add	r3, r2
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d305      	bcc.n	8005a72 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d912      	bls.n	8005a98 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a78:	e0f6      	b.n	8005c68 <UART_SetConfig+0x494>
 8005a7a:	bf00      	nop
 8005a7c:	efff69f3 	.word	0xefff69f3
 8005a80:	40008000 	.word	0x40008000
 8005a84:	40013800 	.word	0x40013800
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40004400 	.word	0x40004400
 8005a90:	40004800 	.word	0x40004800
 8005a94:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	461c      	mov	r4, r3
 8005a9e:	4615      	mov	r5, r2
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	022b      	lsls	r3, r5, #8
 8005aaa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005aae:	0222      	lsls	r2, r4, #8
 8005ab0:	68f9      	ldr	r1, [r7, #12]
 8005ab2:	6849      	ldr	r1, [r1, #4]
 8005ab4:	0849      	lsrs	r1, r1, #1
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	4688      	mov	r8, r1
 8005aba:	4681      	mov	r9, r0
 8005abc:	eb12 0a08 	adds.w	sl, r2, r8
 8005ac0:	eb43 0b09 	adc.w	fp, r3, r9
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad2:	4650      	mov	r0, sl
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	f7fa fbb3 	bl	8000240 <__aeabi_uldivmod>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4613      	mov	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae8:	d308      	bcc.n	8005afc <UART_SetConfig+0x328>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005af0:	d204      	bcs.n	8005afc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	e0b5      	b.n	8005c68 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b02:	e0b1      	b.n	8005c68 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b0c:	d15d      	bne.n	8005bca <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d827      	bhi.n	8005b66 <UART_SetConfig+0x392>
 8005b16:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <UART_SetConfig+0x348>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	08005b67 	.word	0x08005b67
 8005b2c:	08005b57 	.word	0x08005b57
 8005b30:	08005b67 	.word	0x08005b67
 8005b34:	08005b67 	.word	0x08005b67
 8005b38:	08005b67 	.word	0x08005b67
 8005b3c:	08005b5f 	.word	0x08005b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b40:	f7fe fdc8 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8005b44:	61f8      	str	r0, [r7, #28]
        break;
 8005b46:	e014      	b.n	8005b72 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b48:	f7fe fdda 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8005b4c:	61f8      	str	r0, [r7, #28]
        break;
 8005b4e:	e010      	b.n	8005b72 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b50:	4b4c      	ldr	r3, [pc, #304]	@ (8005c84 <UART_SetConfig+0x4b0>)
 8005b52:	61fb      	str	r3, [r7, #28]
        break;
 8005b54:	e00d      	b.n	8005b72 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b56:	f7fe fd25 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8005b5a:	61f8      	str	r0, [r7, #28]
        break;
 8005b5c:	e009      	b.n	8005b72 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b62:	61fb      	str	r3, [r7, #28]
        break;
 8005b64:	e005      	b.n	8005b72 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d077      	beq.n	8005c68 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	005a      	lsls	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	441a      	add	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b0f      	cmp	r3, #15
 8005b92:	d916      	bls.n	8005bc2 <UART_SetConfig+0x3ee>
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b9a:	d212      	bcs.n	8005bc2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f023 030f 	bic.w	r3, r3, #15
 8005ba4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	8afb      	ldrh	r3, [r7, #22]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	8afa      	ldrh	r2, [r7, #22]
 8005bbe:	60da      	str	r2, [r3, #12]
 8005bc0:	e052      	b.n	8005c68 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005bc8:	e04e      	b.n	8005c68 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d827      	bhi.n	8005c22 <UART_SetConfig+0x44e>
 8005bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <UART_SetConfig+0x404>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	08005c23 	.word	0x08005c23
 8005be8:	08005c13 	.word	0x08005c13
 8005bec:	08005c23 	.word	0x08005c23
 8005bf0:	08005c23 	.word	0x08005c23
 8005bf4:	08005c23 	.word	0x08005c23
 8005bf8:	08005c1b 	.word	0x08005c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfc:	f7fe fd6a 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8005c00:	61f8      	str	r0, [r7, #28]
        break;
 8005c02:	e014      	b.n	8005c2e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c04:	f7fe fd7c 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8005c08:	61f8      	str	r0, [r7, #28]
        break;
 8005c0a:	e010      	b.n	8005c2e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <UART_SetConfig+0x4b0>)
 8005c0e:	61fb      	str	r3, [r7, #28]
        break;
 8005c10:	e00d      	b.n	8005c2e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c12:	f7fe fcc7 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8005c16:	61f8      	str	r0, [r7, #28]
        break;
 8005c18:	e009      	b.n	8005c2e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c1e:	61fb      	str	r3, [r7, #28]
        break;
 8005c20:	e005      	b.n	8005c2e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c2c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d019      	beq.n	8005c68 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	085a      	lsrs	r2, r3, #1
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	441a      	add	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	d909      	bls.n	8005c62 <UART_SetConfig+0x48e>
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c54:	d205      	bcs.n	8005c62 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60da      	str	r2, [r3, #12]
 8005c60:	e002      	b.n	8005c68 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3728      	adds	r7, #40	@ 0x28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c82:	bf00      	nop
 8005c84:	00f42400 	.word	0x00f42400

08005c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01a      	beq.n	8005d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d86:	d10a      	bne.n	8005d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b098      	sub	sp, #96	@ 0x60
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ddc:	f7fb fdd8 	bl	8001990 <HAL_GetTick>
 8005de0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d12e      	bne.n	8005e4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f88c 	bl	8005f1c <UART_WaitOnFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d021      	beq.n	8005e4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e2a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e6      	bne.n	8005e0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e062      	b.n	8005f14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d149      	bne.n	8005ef0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e64:	2200      	movs	r2, #0
 8005e66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f856 	bl	8005f1c <UART_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d03c      	beq.n	8005ef0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	623b      	str	r3, [r7, #32]
   return(result);
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e6      	bne.n	8005e76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ec8:	61fa      	str	r2, [r7, #28]
 8005eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	69b9      	ldr	r1, [r7, #24]
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e011      	b.n	8005f14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3758      	adds	r7, #88	@ 0x58
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2c:	e04f      	b.n	8005fce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f34:	d04b      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f36:	f7fb fd2b 	bl	8001990 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e04e      	b.n	8005fee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d037      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b80      	cmp	r3, #128	@ 0x80
 8005f62:	d034      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b40      	cmp	r3, #64	@ 0x40
 8005f68:	d031      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d110      	bne.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f838 	bl	8005ff6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e029      	b.n	8005fee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fa8:	d111      	bne.n	8005fce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f81e 	bl	8005ff6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e00f      	b.n	8005fee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	bf0c      	ite	eq
 8005fde:	2301      	moveq	r3, #1
 8005fe0:	2300      	movne	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d0a0      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b095      	sub	sp, #84	@ 0x54
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800601c:	643b      	str	r3, [r7, #64]	@ 0x40
 800601e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006022:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800602a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006050:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006052:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006068:	2b01      	cmp	r3, #1
 800606a:	d118      	bne.n	800609e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60bb      	str	r3, [r7, #8]
   return(result);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f023 0310 	bic.w	r3, r3, #16
 8006080:	647b      	str	r3, [r7, #68]	@ 0x44
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6979      	ldr	r1, [r7, #20]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	613b      	str	r3, [r7, #16]
   return(result);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80060b2:	bf00      	nop
 80060b4:	3754      	adds	r7, #84	@ 0x54
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <siprintf>:
 80060c0:	b40e      	push	{r1, r2, r3}
 80060c2:	b510      	push	{r4, lr}
 80060c4:	b09d      	sub	sp, #116	@ 0x74
 80060c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80060c8:	9002      	str	r0, [sp, #8]
 80060ca:	9006      	str	r0, [sp, #24]
 80060cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060d0:	480a      	ldr	r0, [pc, #40]	@ (80060fc <siprintf+0x3c>)
 80060d2:	9107      	str	r1, [sp, #28]
 80060d4:	9104      	str	r1, [sp, #16]
 80060d6:	490a      	ldr	r1, [pc, #40]	@ (8006100 <siprintf+0x40>)
 80060d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060dc:	9105      	str	r1, [sp, #20]
 80060de:	2400      	movs	r4, #0
 80060e0:	a902      	add	r1, sp, #8
 80060e2:	6800      	ldr	r0, [r0, #0]
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80060e8:	f000 f8a0 	bl	800622c <_svfiprintf_r>
 80060ec:	9b02      	ldr	r3, [sp, #8]
 80060ee:	701c      	strb	r4, [r3, #0]
 80060f0:	b01d      	add	sp, #116	@ 0x74
 80060f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f6:	b003      	add	sp, #12
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	2000002c 	.word	0x2000002c
 8006100:	ffff0208 	.word	0xffff0208

08006104 <memset>:
 8006104:	4402      	add	r2, r0
 8006106:	4603      	mov	r3, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	f803 1b01 	strb.w	r1, [r3], #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <__errno>:
 8006114:	4b01      	ldr	r3, [pc, #4]	@ (800611c <__errno+0x8>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	2000002c 	.word	0x2000002c

08006120 <__libc_init_array>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <__libc_init_array+0x38>)
 8006124:	4d0d      	ldr	r5, [pc, #52]	@ (800615c <__libc_init_array+0x3c>)
 8006126:	1b5b      	subs	r3, r3, r5
 8006128:	109c      	asrs	r4, r3, #2
 800612a:	2600      	movs	r6, #0
 800612c:	42a6      	cmp	r6, r4
 800612e:	d109      	bne.n	8006144 <__libc_init_array+0x24>
 8006130:	f000 fde8 	bl	8006d04 <_init>
 8006134:	4d0a      	ldr	r5, [pc, #40]	@ (8006160 <__libc_init_array+0x40>)
 8006136:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <__libc_init_array+0x44>)
 8006138:	1b5b      	subs	r3, r3, r5
 800613a:	109c      	asrs	r4, r3, #2
 800613c:	2600      	movs	r6, #0
 800613e:	42a6      	cmp	r6, r4
 8006140:	d105      	bne.n	800614e <__libc_init_array+0x2e>
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	f855 3b04 	ldr.w	r3, [r5], #4
 8006148:	4798      	blx	r3
 800614a:	3601      	adds	r6, #1
 800614c:	e7ee      	b.n	800612c <__libc_init_array+0xc>
 800614e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006152:	4798      	blx	r3
 8006154:	3601      	adds	r6, #1
 8006156:	e7f2      	b.n	800613e <__libc_init_array+0x1e>
 8006158:	08006e1c 	.word	0x08006e1c
 800615c:	08006e1c 	.word	0x08006e1c
 8006160:	08006e1c 	.word	0x08006e1c
 8006164:	08006e20 	.word	0x08006e20

08006168 <__retarget_lock_acquire_recursive>:
 8006168:	4770      	bx	lr

0800616a <__retarget_lock_release_recursive>:
 800616a:	4770      	bx	lr

0800616c <__ssputs_r>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	688e      	ldr	r6, [r1, #8]
 8006172:	461f      	mov	r7, r3
 8006174:	42be      	cmp	r6, r7
 8006176:	4682      	mov	sl, r0
 8006178:	460c      	mov	r4, r1
 800617a:	4690      	mov	r8, r2
 800617c:	4633      	mov	r3, r6
 800617e:	d853      	bhi.n	8006228 <__ssputs_r+0xbc>
 8006180:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8006184:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8006188:	d02b      	beq.n	80061e2 <__ssputs_r+0x76>
 800618a:	6965      	ldr	r5, [r4, #20]
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	6909      	ldr	r1, [r1, #16]
 8006190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006194:	eba3 0901 	sub.w	r9, r3, r1
 8006198:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800619c:	1c7b      	adds	r3, r7, #1
 800619e:	106d      	asrs	r5, r5, #1
 80061a0:	444b      	add	r3, r9
 80061a2:	42ab      	cmp	r3, r5
 80061a4:	462a      	mov	r2, r5
 80061a6:	bf84      	itt	hi
 80061a8:	461d      	movhi	r5, r3
 80061aa:	462a      	movhi	r2, r5
 80061ac:	0543      	lsls	r3, r0, #21
 80061ae:	d527      	bpl.n	8006200 <__ssputs_r+0x94>
 80061b0:	4611      	mov	r1, r2
 80061b2:	4650      	mov	r0, sl
 80061b4:	f000 f958 	bl	8006468 <_malloc_r>
 80061b8:	4606      	mov	r6, r0
 80061ba:	b358      	cbz	r0, 8006214 <__ssputs_r+0xa8>
 80061bc:	6921      	ldr	r1, [r4, #16]
 80061be:	464a      	mov	r2, r9
 80061c0:	f000 fbc4 	bl	800694c <memcpy>
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	6126      	str	r6, [r4, #16]
 80061d2:	6165      	str	r5, [r4, #20]
 80061d4:	444e      	add	r6, r9
 80061d6:	eba5 0509 	sub.w	r5, r5, r9
 80061da:	6026      	str	r6, [r4, #0]
 80061dc:	60a5      	str	r5, [r4, #8]
 80061de:	463e      	mov	r6, r7
 80061e0:	463b      	mov	r3, r7
 80061e2:	461f      	mov	r7, r3
 80061e4:	6820      	ldr	r0, [r4, #0]
 80061e6:	463a      	mov	r2, r7
 80061e8:	4641      	mov	r1, r8
 80061ea:	f000 fb85 	bl	80068f8 <memmove>
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	1b9b      	subs	r3, r3, r6
 80061f2:	60a3      	str	r3, [r4, #8]
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	443b      	add	r3, r7
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	2000      	movs	r0, #0
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	4650      	mov	r0, sl
 8006202:	f000 fb4b 	bl	800689c <_realloc_r>
 8006206:	4606      	mov	r6, r0
 8006208:	2800      	cmp	r0, #0
 800620a:	d1e1      	bne.n	80061d0 <__ssputs_r+0x64>
 800620c:	6921      	ldr	r1, [r4, #16]
 800620e:	4650      	mov	r0, sl
 8006210:	f000 fbaa 	bl	8006968 <_free_r>
 8006214:	230c      	movs	r3, #12
 8006216:	f8ca 3000 	str.w	r3, [sl]
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006220:	81a3      	strh	r3, [r4, #12]
 8006222:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006226:	e7e9      	b.n	80061fc <__ssputs_r+0x90>
 8006228:	463e      	mov	r6, r7
 800622a:	e7db      	b.n	80061e4 <__ssputs_r+0x78>

0800622c <_svfiprintf_r>:
 800622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	4698      	mov	r8, r3
 8006232:	898b      	ldrh	r3, [r1, #12]
 8006234:	061b      	lsls	r3, r3, #24
 8006236:	b09d      	sub	sp, #116	@ 0x74
 8006238:	4607      	mov	r7, r0
 800623a:	460d      	mov	r5, r1
 800623c:	4614      	mov	r4, r2
 800623e:	d510      	bpl.n	8006262 <_svfiprintf_r+0x36>
 8006240:	690b      	ldr	r3, [r1, #16]
 8006242:	b973      	cbnz	r3, 8006262 <_svfiprintf_r+0x36>
 8006244:	2140      	movs	r1, #64	@ 0x40
 8006246:	f000 f90f 	bl	8006468 <_malloc_r>
 800624a:	6028      	str	r0, [r5, #0]
 800624c:	6128      	str	r0, [r5, #16]
 800624e:	b930      	cbnz	r0, 800625e <_svfiprintf_r+0x32>
 8006250:	230c      	movs	r3, #12
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006258:	b01d      	add	sp, #116	@ 0x74
 800625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625e:	2340      	movs	r3, #64	@ 0x40
 8006260:	616b      	str	r3, [r5, #20]
 8006262:	2300      	movs	r3, #0
 8006264:	9309      	str	r3, [sp, #36]	@ 0x24
 8006266:	2320      	movs	r3, #32
 8006268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800626c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006270:	2330      	movs	r3, #48	@ 0x30
 8006272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006410 <_svfiprintf_r+0x1e4>
 8006276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800627a:	f04f 0901 	mov.w	r9, #1
 800627e:	4623      	mov	r3, r4
 8006280:	469a      	mov	sl, r3
 8006282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006286:	b10a      	cbz	r2, 800628c <_svfiprintf_r+0x60>
 8006288:	2a25      	cmp	r2, #37	@ 0x25
 800628a:	d1f9      	bne.n	8006280 <_svfiprintf_r+0x54>
 800628c:	ebba 0b04 	subs.w	fp, sl, r4
 8006290:	d00b      	beq.n	80062aa <_svfiprintf_r+0x7e>
 8006292:	465b      	mov	r3, fp
 8006294:	4622      	mov	r2, r4
 8006296:	4629      	mov	r1, r5
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff ff67 	bl	800616c <__ssputs_r>
 800629e:	3001      	adds	r0, #1
 80062a0:	f000 80a7 	beq.w	80063f2 <_svfiprintf_r+0x1c6>
 80062a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062a6:	445a      	add	r2, fp
 80062a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80062aa:	f89a 3000 	ldrb.w	r3, [sl]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 809f 	beq.w	80063f2 <_svfiprintf_r+0x1c6>
 80062b4:	2300      	movs	r3, #0
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062be:	f10a 0a01 	add.w	sl, sl, #1
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	9307      	str	r3, [sp, #28]
 80062c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80062cc:	4654      	mov	r4, sl
 80062ce:	2205      	movs	r2, #5
 80062d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d4:	484e      	ldr	r0, [pc, #312]	@ (8006410 <_svfiprintf_r+0x1e4>)
 80062d6:	f7f9 ff63 	bl	80001a0 <memchr>
 80062da:	9a04      	ldr	r2, [sp, #16]
 80062dc:	b9d8      	cbnz	r0, 8006316 <_svfiprintf_r+0xea>
 80062de:	06d0      	lsls	r0, r2, #27
 80062e0:	bf44      	itt	mi
 80062e2:	2320      	movmi	r3, #32
 80062e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062e8:	0711      	lsls	r1, r2, #28
 80062ea:	bf44      	itt	mi
 80062ec:	232b      	movmi	r3, #43	@ 0x2b
 80062ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062f2:	f89a 3000 	ldrb.w	r3, [sl]
 80062f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f8:	d015      	beq.n	8006326 <_svfiprintf_r+0xfa>
 80062fa:	9a07      	ldr	r2, [sp, #28]
 80062fc:	4654      	mov	r4, sl
 80062fe:	2000      	movs	r0, #0
 8006300:	f04f 0c0a 	mov.w	ip, #10
 8006304:	4621      	mov	r1, r4
 8006306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800630a:	3b30      	subs	r3, #48	@ 0x30
 800630c:	2b09      	cmp	r3, #9
 800630e:	d94b      	bls.n	80063a8 <_svfiprintf_r+0x17c>
 8006310:	b1b0      	cbz	r0, 8006340 <_svfiprintf_r+0x114>
 8006312:	9207      	str	r2, [sp, #28]
 8006314:	e014      	b.n	8006340 <_svfiprintf_r+0x114>
 8006316:	eba0 0308 	sub.w	r3, r0, r8
 800631a:	fa09 f303 	lsl.w	r3, r9, r3
 800631e:	4313      	orrs	r3, r2
 8006320:	9304      	str	r3, [sp, #16]
 8006322:	46a2      	mov	sl, r4
 8006324:	e7d2      	b.n	80062cc <_svfiprintf_r+0xa0>
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	1d19      	adds	r1, r3, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	9103      	str	r1, [sp, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfbb      	ittet	lt
 8006332:	425b      	neglt	r3, r3
 8006334:	f042 0202 	orrlt.w	r2, r2, #2
 8006338:	9307      	strge	r3, [sp, #28]
 800633a:	9307      	strlt	r3, [sp, #28]
 800633c:	bfb8      	it	lt
 800633e:	9204      	strlt	r2, [sp, #16]
 8006340:	7823      	ldrb	r3, [r4, #0]
 8006342:	2b2e      	cmp	r3, #46	@ 0x2e
 8006344:	d10a      	bne.n	800635c <_svfiprintf_r+0x130>
 8006346:	7863      	ldrb	r3, [r4, #1]
 8006348:	2b2a      	cmp	r3, #42	@ 0x2a
 800634a:	d132      	bne.n	80063b2 <_svfiprintf_r+0x186>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	1d1a      	adds	r2, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	9203      	str	r2, [sp, #12]
 8006354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006358:	3402      	adds	r4, #2
 800635a:	9305      	str	r3, [sp, #20]
 800635c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006420 <_svfiprintf_r+0x1f4>
 8006360:	7821      	ldrb	r1, [r4, #0]
 8006362:	2203      	movs	r2, #3
 8006364:	4650      	mov	r0, sl
 8006366:	f7f9 ff1b 	bl	80001a0 <memchr>
 800636a:	b138      	cbz	r0, 800637c <_svfiprintf_r+0x150>
 800636c:	9b04      	ldr	r3, [sp, #16]
 800636e:	eba0 000a 	sub.w	r0, r0, sl
 8006372:	2240      	movs	r2, #64	@ 0x40
 8006374:	4082      	lsls	r2, r0
 8006376:	4313      	orrs	r3, r2
 8006378:	3401      	adds	r4, #1
 800637a:	9304      	str	r3, [sp, #16]
 800637c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006380:	4824      	ldr	r0, [pc, #144]	@ (8006414 <_svfiprintf_r+0x1e8>)
 8006382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006386:	2206      	movs	r2, #6
 8006388:	f7f9 ff0a 	bl	80001a0 <memchr>
 800638c:	2800      	cmp	r0, #0
 800638e:	d036      	beq.n	80063fe <_svfiprintf_r+0x1d2>
 8006390:	4b21      	ldr	r3, [pc, #132]	@ (8006418 <_svfiprintf_r+0x1ec>)
 8006392:	bb1b      	cbnz	r3, 80063dc <_svfiprintf_r+0x1b0>
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	3307      	adds	r3, #7
 8006398:	f023 0307 	bic.w	r3, r3, #7
 800639c:	3308      	adds	r3, #8
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a2:	4433      	add	r3, r6
 80063a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063a6:	e76a      	b.n	800627e <_svfiprintf_r+0x52>
 80063a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ac:	460c      	mov	r4, r1
 80063ae:	2001      	movs	r0, #1
 80063b0:	e7a8      	b.n	8006304 <_svfiprintf_r+0xd8>
 80063b2:	2300      	movs	r3, #0
 80063b4:	3401      	adds	r4, #1
 80063b6:	9305      	str	r3, [sp, #20]
 80063b8:	4619      	mov	r1, r3
 80063ba:	f04f 0c0a 	mov.w	ip, #10
 80063be:	4620      	mov	r0, r4
 80063c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c4:	3a30      	subs	r2, #48	@ 0x30
 80063c6:	2a09      	cmp	r2, #9
 80063c8:	d903      	bls.n	80063d2 <_svfiprintf_r+0x1a6>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0c6      	beq.n	800635c <_svfiprintf_r+0x130>
 80063ce:	9105      	str	r1, [sp, #20]
 80063d0:	e7c4      	b.n	800635c <_svfiprintf_r+0x130>
 80063d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063d6:	4604      	mov	r4, r0
 80063d8:	2301      	movs	r3, #1
 80063da:	e7f0      	b.n	80063be <_svfiprintf_r+0x192>
 80063dc:	ab03      	add	r3, sp, #12
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	462a      	mov	r2, r5
 80063e2:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <_svfiprintf_r+0x1f0>)
 80063e4:	a904      	add	r1, sp, #16
 80063e6:	4638      	mov	r0, r7
 80063e8:	f3af 8000 	nop.w
 80063ec:	1c42      	adds	r2, r0, #1
 80063ee:	4606      	mov	r6, r0
 80063f0:	d1d6      	bne.n	80063a0 <_svfiprintf_r+0x174>
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	065b      	lsls	r3, r3, #25
 80063f6:	f53f af2d 	bmi.w	8006254 <_svfiprintf_r+0x28>
 80063fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063fc:	e72c      	b.n	8006258 <_svfiprintf_r+0x2c>
 80063fe:	ab03      	add	r3, sp, #12
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	462a      	mov	r2, r5
 8006404:	4b05      	ldr	r3, [pc, #20]	@ (800641c <_svfiprintf_r+0x1f0>)
 8006406:	a904      	add	r1, sp, #16
 8006408:	4638      	mov	r0, r7
 800640a:	f000 f91b 	bl	8006644 <_printf_i>
 800640e:	e7ed      	b.n	80063ec <_svfiprintf_r+0x1c0>
 8006410:	08006de0 	.word	0x08006de0
 8006414:	08006dea 	.word	0x08006dea
 8006418:	00000000 	.word	0x00000000
 800641c:	0800616d 	.word	0x0800616d
 8006420:	08006de6 	.word	0x08006de6

08006424 <sbrk_aligned>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	4e0f      	ldr	r6, [pc, #60]	@ (8006464 <sbrk_aligned+0x40>)
 8006428:	460c      	mov	r4, r1
 800642a:	6831      	ldr	r1, [r6, #0]
 800642c:	4605      	mov	r5, r0
 800642e:	b911      	cbnz	r1, 8006436 <sbrk_aligned+0x12>
 8006430:	f000 fa7c 	bl	800692c <_sbrk_r>
 8006434:	6030      	str	r0, [r6, #0]
 8006436:	4621      	mov	r1, r4
 8006438:	4628      	mov	r0, r5
 800643a:	f000 fa77 	bl	800692c <_sbrk_r>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d103      	bne.n	800644a <sbrk_aligned+0x26>
 8006442:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006446:	4620      	mov	r0, r4
 8006448:	bd70      	pop	{r4, r5, r6, pc}
 800644a:	1cc4      	adds	r4, r0, #3
 800644c:	f024 0403 	bic.w	r4, r4, #3
 8006450:	42a0      	cmp	r0, r4
 8006452:	d0f8      	beq.n	8006446 <sbrk_aligned+0x22>
 8006454:	1a21      	subs	r1, r4, r0
 8006456:	4628      	mov	r0, r5
 8006458:	f000 fa68 	bl	800692c <_sbrk_r>
 800645c:	3001      	adds	r0, #1
 800645e:	d1f2      	bne.n	8006446 <sbrk_aligned+0x22>
 8006460:	e7ef      	b.n	8006442 <sbrk_aligned+0x1e>
 8006462:	bf00      	nop
 8006464:	20000640 	.word	0x20000640

08006468 <_malloc_r>:
 8006468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800646c:	1ccd      	adds	r5, r1, #3
 800646e:	f025 0503 	bic.w	r5, r5, #3
 8006472:	3508      	adds	r5, #8
 8006474:	2d0c      	cmp	r5, #12
 8006476:	bf38      	it	cc
 8006478:	250c      	movcc	r5, #12
 800647a:	2d00      	cmp	r5, #0
 800647c:	4606      	mov	r6, r0
 800647e:	db01      	blt.n	8006484 <_malloc_r+0x1c>
 8006480:	42a9      	cmp	r1, r5
 8006482:	d904      	bls.n	800648e <_malloc_r+0x26>
 8006484:	230c      	movs	r3, #12
 8006486:	6033      	str	r3, [r6, #0]
 8006488:	2000      	movs	r0, #0
 800648a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800648e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006564 <_malloc_r+0xfc>
 8006492:	f000 f9f7 	bl	8006884 <__malloc_lock>
 8006496:	f8d8 3000 	ldr.w	r3, [r8]
 800649a:	461c      	mov	r4, r3
 800649c:	bb44      	cbnz	r4, 80064f0 <_malloc_r+0x88>
 800649e:	4629      	mov	r1, r5
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff ffbf 	bl	8006424 <sbrk_aligned>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	4604      	mov	r4, r0
 80064aa:	d158      	bne.n	800655e <_malloc_r+0xf6>
 80064ac:	f8d8 4000 	ldr.w	r4, [r8]
 80064b0:	4627      	mov	r7, r4
 80064b2:	2f00      	cmp	r7, #0
 80064b4:	d143      	bne.n	800653e <_malloc_r+0xd6>
 80064b6:	2c00      	cmp	r4, #0
 80064b8:	d04b      	beq.n	8006552 <_malloc_r+0xea>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	4639      	mov	r1, r7
 80064be:	4630      	mov	r0, r6
 80064c0:	eb04 0903 	add.w	r9, r4, r3
 80064c4:	f000 fa32 	bl	800692c <_sbrk_r>
 80064c8:	4581      	cmp	r9, r0
 80064ca:	d142      	bne.n	8006552 <_malloc_r+0xea>
 80064cc:	6821      	ldr	r1, [r4, #0]
 80064ce:	1a6d      	subs	r5, r5, r1
 80064d0:	4629      	mov	r1, r5
 80064d2:	4630      	mov	r0, r6
 80064d4:	f7ff ffa6 	bl	8006424 <sbrk_aligned>
 80064d8:	3001      	adds	r0, #1
 80064da:	d03a      	beq.n	8006552 <_malloc_r+0xea>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	442b      	add	r3, r5
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	f8d8 3000 	ldr.w	r3, [r8]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	bb62      	cbnz	r2, 8006544 <_malloc_r+0xdc>
 80064ea:	f8c8 7000 	str.w	r7, [r8]
 80064ee:	e00f      	b.n	8006510 <_malloc_r+0xa8>
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	1b52      	subs	r2, r2, r5
 80064f4:	d420      	bmi.n	8006538 <_malloc_r+0xd0>
 80064f6:	2a0b      	cmp	r2, #11
 80064f8:	d917      	bls.n	800652a <_malloc_r+0xc2>
 80064fa:	1961      	adds	r1, r4, r5
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	6025      	str	r5, [r4, #0]
 8006500:	bf18      	it	ne
 8006502:	6059      	strne	r1, [r3, #4]
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	bf08      	it	eq
 8006508:	f8c8 1000 	streq.w	r1, [r8]
 800650c:	5162      	str	r2, [r4, r5]
 800650e:	604b      	str	r3, [r1, #4]
 8006510:	4630      	mov	r0, r6
 8006512:	f000 f9bd 	bl	8006890 <__malloc_unlock>
 8006516:	f104 000b 	add.w	r0, r4, #11
 800651a:	1d23      	adds	r3, r4, #4
 800651c:	f020 0007 	bic.w	r0, r0, #7
 8006520:	1ac2      	subs	r2, r0, r3
 8006522:	bf1c      	itt	ne
 8006524:	1a1b      	subne	r3, r3, r0
 8006526:	50a3      	strne	r3, [r4, r2]
 8006528:	e7af      	b.n	800648a <_malloc_r+0x22>
 800652a:	6862      	ldr	r2, [r4, #4]
 800652c:	42a3      	cmp	r3, r4
 800652e:	bf0c      	ite	eq
 8006530:	f8c8 2000 	streq.w	r2, [r8]
 8006534:	605a      	strne	r2, [r3, #4]
 8006536:	e7eb      	b.n	8006510 <_malloc_r+0xa8>
 8006538:	4623      	mov	r3, r4
 800653a:	6864      	ldr	r4, [r4, #4]
 800653c:	e7ae      	b.n	800649c <_malloc_r+0x34>
 800653e:	463c      	mov	r4, r7
 8006540:	687f      	ldr	r7, [r7, #4]
 8006542:	e7b6      	b.n	80064b2 <_malloc_r+0x4a>
 8006544:	461a      	mov	r2, r3
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	42a3      	cmp	r3, r4
 800654a:	d1fb      	bne.n	8006544 <_malloc_r+0xdc>
 800654c:	2300      	movs	r3, #0
 800654e:	6053      	str	r3, [r2, #4]
 8006550:	e7de      	b.n	8006510 <_malloc_r+0xa8>
 8006552:	230c      	movs	r3, #12
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	4630      	mov	r0, r6
 8006558:	f000 f99a 	bl	8006890 <__malloc_unlock>
 800655c:	e794      	b.n	8006488 <_malloc_r+0x20>
 800655e:	6005      	str	r5, [r0, #0]
 8006560:	e7d6      	b.n	8006510 <_malloc_r+0xa8>
 8006562:	bf00      	nop
 8006564:	20000644 	.word	0x20000644

08006568 <_printf_common>:
 8006568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800656c:	4616      	mov	r6, r2
 800656e:	4698      	mov	r8, r3
 8006570:	688a      	ldr	r2, [r1, #8]
 8006572:	690b      	ldr	r3, [r1, #16]
 8006574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006578:	4293      	cmp	r3, r2
 800657a:	bfb8      	it	lt
 800657c:	4613      	movlt	r3, r2
 800657e:	6033      	str	r3, [r6, #0]
 8006580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006584:	4607      	mov	r7, r0
 8006586:	460c      	mov	r4, r1
 8006588:	b10a      	cbz	r2, 800658e <_printf_common+0x26>
 800658a:	3301      	adds	r3, #1
 800658c:	6033      	str	r3, [r6, #0]
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	0699      	lsls	r1, r3, #26
 8006592:	bf42      	ittt	mi
 8006594:	6833      	ldrmi	r3, [r6, #0]
 8006596:	3302      	addmi	r3, #2
 8006598:	6033      	strmi	r3, [r6, #0]
 800659a:	6825      	ldr	r5, [r4, #0]
 800659c:	f015 0506 	ands.w	r5, r5, #6
 80065a0:	d106      	bne.n	80065b0 <_printf_common+0x48>
 80065a2:	f104 0a19 	add.w	sl, r4, #25
 80065a6:	68e3      	ldr	r3, [r4, #12]
 80065a8:	6832      	ldr	r2, [r6, #0]
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	42ab      	cmp	r3, r5
 80065ae:	dc26      	bgt.n	80065fe <_printf_common+0x96>
 80065b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	3b00      	subs	r3, #0
 80065b8:	bf18      	it	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	0692      	lsls	r2, r2, #26
 80065be:	d42b      	bmi.n	8006618 <_printf_common+0xb0>
 80065c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065c4:	4641      	mov	r1, r8
 80065c6:	4638      	mov	r0, r7
 80065c8:	47c8      	blx	r9
 80065ca:	3001      	adds	r0, #1
 80065cc:	d01e      	beq.n	800660c <_printf_common+0xa4>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	f003 0306 	and.w	r3, r3, #6
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	bf02      	ittt	eq
 80065da:	68e5      	ldreq	r5, [r4, #12]
 80065dc:	6833      	ldreq	r3, [r6, #0]
 80065de:	1aed      	subeq	r5, r5, r3
 80065e0:	68a3      	ldr	r3, [r4, #8]
 80065e2:	bf0c      	ite	eq
 80065e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065e8:	2500      	movne	r5, #0
 80065ea:	4293      	cmp	r3, r2
 80065ec:	bfc4      	itt	gt
 80065ee:	1a9b      	subgt	r3, r3, r2
 80065f0:	18ed      	addgt	r5, r5, r3
 80065f2:	2600      	movs	r6, #0
 80065f4:	341a      	adds	r4, #26
 80065f6:	42b5      	cmp	r5, r6
 80065f8:	d11a      	bne.n	8006630 <_printf_common+0xc8>
 80065fa:	2000      	movs	r0, #0
 80065fc:	e008      	b.n	8006610 <_printf_common+0xa8>
 80065fe:	2301      	movs	r3, #1
 8006600:	4652      	mov	r2, sl
 8006602:	4641      	mov	r1, r8
 8006604:	4638      	mov	r0, r7
 8006606:	47c8      	blx	r9
 8006608:	3001      	adds	r0, #1
 800660a:	d103      	bne.n	8006614 <_printf_common+0xac>
 800660c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006614:	3501      	adds	r5, #1
 8006616:	e7c6      	b.n	80065a6 <_printf_common+0x3e>
 8006618:	18e1      	adds	r1, r4, r3
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	2030      	movs	r0, #48	@ 0x30
 800661e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006622:	4422      	add	r2, r4
 8006624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800662c:	3302      	adds	r3, #2
 800662e:	e7c7      	b.n	80065c0 <_printf_common+0x58>
 8006630:	2301      	movs	r3, #1
 8006632:	4622      	mov	r2, r4
 8006634:	4641      	mov	r1, r8
 8006636:	4638      	mov	r0, r7
 8006638:	47c8      	blx	r9
 800663a:	3001      	adds	r0, #1
 800663c:	d0e6      	beq.n	800660c <_printf_common+0xa4>
 800663e:	3601      	adds	r6, #1
 8006640:	e7d9      	b.n	80065f6 <_printf_common+0x8e>
	...

08006644 <_printf_i>:
 8006644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	7e0f      	ldrb	r7, [r1, #24]
 800664a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800664c:	2f78      	cmp	r7, #120	@ 0x78
 800664e:	4691      	mov	r9, r2
 8006650:	4680      	mov	r8, r0
 8006652:	460c      	mov	r4, r1
 8006654:	469a      	mov	sl, r3
 8006656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800665a:	d807      	bhi.n	800666c <_printf_i+0x28>
 800665c:	2f62      	cmp	r7, #98	@ 0x62
 800665e:	d80a      	bhi.n	8006676 <_printf_i+0x32>
 8006660:	2f00      	cmp	r7, #0
 8006662:	f000 80d2 	beq.w	800680a <_printf_i+0x1c6>
 8006666:	2f58      	cmp	r7, #88	@ 0x58
 8006668:	f000 80b7 	beq.w	80067da <_printf_i+0x196>
 800666c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006674:	e03a      	b.n	80066ec <_printf_i+0xa8>
 8006676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800667a:	2b15      	cmp	r3, #21
 800667c:	d8f6      	bhi.n	800666c <_printf_i+0x28>
 800667e:	a101      	add	r1, pc, #4	@ (adr r1, 8006684 <_printf_i+0x40>)
 8006680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006684:	080066dd 	.word	0x080066dd
 8006688:	080066f1 	.word	0x080066f1
 800668c:	0800666d 	.word	0x0800666d
 8006690:	0800666d 	.word	0x0800666d
 8006694:	0800666d 	.word	0x0800666d
 8006698:	0800666d 	.word	0x0800666d
 800669c:	080066f1 	.word	0x080066f1
 80066a0:	0800666d 	.word	0x0800666d
 80066a4:	0800666d 	.word	0x0800666d
 80066a8:	0800666d 	.word	0x0800666d
 80066ac:	0800666d 	.word	0x0800666d
 80066b0:	080067f1 	.word	0x080067f1
 80066b4:	0800671b 	.word	0x0800671b
 80066b8:	080067a7 	.word	0x080067a7
 80066bc:	0800666d 	.word	0x0800666d
 80066c0:	0800666d 	.word	0x0800666d
 80066c4:	08006813 	.word	0x08006813
 80066c8:	0800666d 	.word	0x0800666d
 80066cc:	0800671b 	.word	0x0800671b
 80066d0:	0800666d 	.word	0x0800666d
 80066d4:	0800666d 	.word	0x0800666d
 80066d8:	080067af 	.word	0x080067af
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	1d1a      	adds	r2, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6032      	str	r2, [r6, #0]
 80066e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066ec:	2301      	movs	r3, #1
 80066ee:	e09d      	b.n	800682c <_printf_i+0x1e8>
 80066f0:	6833      	ldr	r3, [r6, #0]
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	1d19      	adds	r1, r3, #4
 80066f6:	6031      	str	r1, [r6, #0]
 80066f8:	0606      	lsls	r6, r0, #24
 80066fa:	d501      	bpl.n	8006700 <_printf_i+0xbc>
 80066fc:	681d      	ldr	r5, [r3, #0]
 80066fe:	e003      	b.n	8006708 <_printf_i+0xc4>
 8006700:	0645      	lsls	r5, r0, #25
 8006702:	d5fb      	bpl.n	80066fc <_printf_i+0xb8>
 8006704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006708:	2d00      	cmp	r5, #0
 800670a:	da03      	bge.n	8006714 <_printf_i+0xd0>
 800670c:	232d      	movs	r3, #45	@ 0x2d
 800670e:	426d      	negs	r5, r5
 8006710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006714:	4859      	ldr	r0, [pc, #356]	@ (800687c <_printf_i+0x238>)
 8006716:	230a      	movs	r3, #10
 8006718:	e010      	b.n	800673c <_printf_i+0xf8>
 800671a:	6821      	ldr	r1, [r4, #0]
 800671c:	6833      	ldr	r3, [r6, #0]
 800671e:	0608      	lsls	r0, r1, #24
 8006720:	f853 5b04 	ldr.w	r5, [r3], #4
 8006724:	d402      	bmi.n	800672c <_printf_i+0xe8>
 8006726:	0649      	lsls	r1, r1, #25
 8006728:	bf48      	it	mi
 800672a:	b2ad      	uxthmi	r5, r5
 800672c:	2f6f      	cmp	r7, #111	@ 0x6f
 800672e:	4853      	ldr	r0, [pc, #332]	@ (800687c <_printf_i+0x238>)
 8006730:	6033      	str	r3, [r6, #0]
 8006732:	d159      	bne.n	80067e8 <_printf_i+0x1a4>
 8006734:	2308      	movs	r3, #8
 8006736:	2100      	movs	r1, #0
 8006738:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800673c:	6866      	ldr	r6, [r4, #4]
 800673e:	60a6      	str	r6, [r4, #8]
 8006740:	2e00      	cmp	r6, #0
 8006742:	db05      	blt.n	8006750 <_printf_i+0x10c>
 8006744:	6821      	ldr	r1, [r4, #0]
 8006746:	432e      	orrs	r6, r5
 8006748:	f021 0104 	bic.w	r1, r1, #4
 800674c:	6021      	str	r1, [r4, #0]
 800674e:	d04d      	beq.n	80067ec <_printf_i+0x1a8>
 8006750:	4616      	mov	r6, r2
 8006752:	fbb5 f1f3 	udiv	r1, r5, r3
 8006756:	fb03 5711 	mls	r7, r3, r1, r5
 800675a:	5dc7      	ldrb	r7, [r0, r7]
 800675c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006760:	462f      	mov	r7, r5
 8006762:	42bb      	cmp	r3, r7
 8006764:	460d      	mov	r5, r1
 8006766:	d9f4      	bls.n	8006752 <_printf_i+0x10e>
 8006768:	2b08      	cmp	r3, #8
 800676a:	d10b      	bne.n	8006784 <_printf_i+0x140>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	07df      	lsls	r7, r3, #31
 8006770:	d508      	bpl.n	8006784 <_printf_i+0x140>
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	6861      	ldr	r1, [r4, #4]
 8006776:	4299      	cmp	r1, r3
 8006778:	bfde      	ittt	le
 800677a:	2330      	movle	r3, #48	@ 0x30
 800677c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006780:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006784:	1b92      	subs	r2, r2, r6
 8006786:	6122      	str	r2, [r4, #16]
 8006788:	f8cd a000 	str.w	sl, [sp]
 800678c:	464b      	mov	r3, r9
 800678e:	aa03      	add	r2, sp, #12
 8006790:	4621      	mov	r1, r4
 8006792:	4640      	mov	r0, r8
 8006794:	f7ff fee8 	bl	8006568 <_printf_common>
 8006798:	3001      	adds	r0, #1
 800679a:	d14c      	bne.n	8006836 <_printf_i+0x1f2>
 800679c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067a0:	b004      	add	sp, #16
 80067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	f043 0320 	orr.w	r3, r3, #32
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	4834      	ldr	r0, [pc, #208]	@ (8006880 <_printf_i+0x23c>)
 80067b0:	2778      	movs	r7, #120	@ 0x78
 80067b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	6831      	ldr	r1, [r6, #0]
 80067ba:	061f      	lsls	r7, r3, #24
 80067bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80067c0:	d402      	bmi.n	80067c8 <_printf_i+0x184>
 80067c2:	065f      	lsls	r7, r3, #25
 80067c4:	bf48      	it	mi
 80067c6:	b2ad      	uxthmi	r5, r5
 80067c8:	6031      	str	r1, [r6, #0]
 80067ca:	07d9      	lsls	r1, r3, #31
 80067cc:	bf44      	itt	mi
 80067ce:	f043 0320 	orrmi.w	r3, r3, #32
 80067d2:	6023      	strmi	r3, [r4, #0]
 80067d4:	b11d      	cbz	r5, 80067de <_printf_i+0x19a>
 80067d6:	2310      	movs	r3, #16
 80067d8:	e7ad      	b.n	8006736 <_printf_i+0xf2>
 80067da:	4828      	ldr	r0, [pc, #160]	@ (800687c <_printf_i+0x238>)
 80067dc:	e7e9      	b.n	80067b2 <_printf_i+0x16e>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	f023 0320 	bic.w	r3, r3, #32
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	e7f6      	b.n	80067d6 <_printf_i+0x192>
 80067e8:	230a      	movs	r3, #10
 80067ea:	e7a4      	b.n	8006736 <_printf_i+0xf2>
 80067ec:	4616      	mov	r6, r2
 80067ee:	e7bb      	b.n	8006768 <_printf_i+0x124>
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	6825      	ldr	r5, [r4, #0]
 80067f4:	6961      	ldr	r1, [r4, #20]
 80067f6:	1d18      	adds	r0, r3, #4
 80067f8:	6030      	str	r0, [r6, #0]
 80067fa:	062e      	lsls	r6, r5, #24
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	d501      	bpl.n	8006804 <_printf_i+0x1c0>
 8006800:	6019      	str	r1, [r3, #0]
 8006802:	e002      	b.n	800680a <_printf_i+0x1c6>
 8006804:	0668      	lsls	r0, r5, #25
 8006806:	d5fb      	bpl.n	8006800 <_printf_i+0x1bc>
 8006808:	8019      	strh	r1, [r3, #0]
 800680a:	2300      	movs	r3, #0
 800680c:	6123      	str	r3, [r4, #16]
 800680e:	4616      	mov	r6, r2
 8006810:	e7ba      	b.n	8006788 <_printf_i+0x144>
 8006812:	6833      	ldr	r3, [r6, #0]
 8006814:	1d1a      	adds	r2, r3, #4
 8006816:	6032      	str	r2, [r6, #0]
 8006818:	681e      	ldr	r6, [r3, #0]
 800681a:	6862      	ldr	r2, [r4, #4]
 800681c:	2100      	movs	r1, #0
 800681e:	4630      	mov	r0, r6
 8006820:	f7f9 fcbe 	bl	80001a0 <memchr>
 8006824:	b108      	cbz	r0, 800682a <_printf_i+0x1e6>
 8006826:	1b80      	subs	r0, r0, r6
 8006828:	6060      	str	r0, [r4, #4]
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	2300      	movs	r3, #0
 8006830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006834:	e7a8      	b.n	8006788 <_printf_i+0x144>
 8006836:	6923      	ldr	r3, [r4, #16]
 8006838:	4632      	mov	r2, r6
 800683a:	4649      	mov	r1, r9
 800683c:	4640      	mov	r0, r8
 800683e:	47d0      	blx	sl
 8006840:	3001      	adds	r0, #1
 8006842:	d0ab      	beq.n	800679c <_printf_i+0x158>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	079b      	lsls	r3, r3, #30
 8006848:	d413      	bmi.n	8006872 <_printf_i+0x22e>
 800684a:	68e0      	ldr	r0, [r4, #12]
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	4298      	cmp	r0, r3
 8006850:	bfb8      	it	lt
 8006852:	4618      	movlt	r0, r3
 8006854:	e7a4      	b.n	80067a0 <_printf_i+0x15c>
 8006856:	2301      	movs	r3, #1
 8006858:	4632      	mov	r2, r6
 800685a:	4649      	mov	r1, r9
 800685c:	4640      	mov	r0, r8
 800685e:	47d0      	blx	sl
 8006860:	3001      	adds	r0, #1
 8006862:	d09b      	beq.n	800679c <_printf_i+0x158>
 8006864:	3501      	adds	r5, #1
 8006866:	68e3      	ldr	r3, [r4, #12]
 8006868:	9903      	ldr	r1, [sp, #12]
 800686a:	1a5b      	subs	r3, r3, r1
 800686c:	42ab      	cmp	r3, r5
 800686e:	dcf2      	bgt.n	8006856 <_printf_i+0x212>
 8006870:	e7eb      	b.n	800684a <_printf_i+0x206>
 8006872:	2500      	movs	r5, #0
 8006874:	f104 0619 	add.w	r6, r4, #25
 8006878:	e7f5      	b.n	8006866 <_printf_i+0x222>
 800687a:	bf00      	nop
 800687c:	08006df1 	.word	0x08006df1
 8006880:	08006e02 	.word	0x08006e02

08006884 <__malloc_lock>:
 8006884:	4801      	ldr	r0, [pc, #4]	@ (800688c <__malloc_lock+0x8>)
 8006886:	f7ff bc6f 	b.w	8006168 <__retarget_lock_acquire_recursive>
 800688a:	bf00      	nop
 800688c:	2000063c 	.word	0x2000063c

08006890 <__malloc_unlock>:
 8006890:	4801      	ldr	r0, [pc, #4]	@ (8006898 <__malloc_unlock+0x8>)
 8006892:	f7ff bc6a 	b.w	800616a <__retarget_lock_release_recursive>
 8006896:	bf00      	nop
 8006898:	2000063c 	.word	0x2000063c

0800689c <_realloc_r>:
 800689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a0:	4607      	mov	r7, r0
 80068a2:	4614      	mov	r4, r2
 80068a4:	460d      	mov	r5, r1
 80068a6:	b921      	cbnz	r1, 80068b2 <_realloc_r+0x16>
 80068a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ac:	4611      	mov	r1, r2
 80068ae:	f7ff bddb 	b.w	8006468 <_malloc_r>
 80068b2:	b92a      	cbnz	r2, 80068c0 <_realloc_r+0x24>
 80068b4:	f000 f858 	bl	8006968 <_free_r>
 80068b8:	4625      	mov	r5, r4
 80068ba:	4628      	mov	r0, r5
 80068bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c0:	f000 f89c 	bl	80069fc <_malloc_usable_size_r>
 80068c4:	4284      	cmp	r4, r0
 80068c6:	4606      	mov	r6, r0
 80068c8:	d802      	bhi.n	80068d0 <_realloc_r+0x34>
 80068ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068ce:	d8f4      	bhi.n	80068ba <_realloc_r+0x1e>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4638      	mov	r0, r7
 80068d4:	f7ff fdc8 	bl	8006468 <_malloc_r>
 80068d8:	4680      	mov	r8, r0
 80068da:	b908      	cbnz	r0, 80068e0 <_realloc_r+0x44>
 80068dc:	4645      	mov	r5, r8
 80068de:	e7ec      	b.n	80068ba <_realloc_r+0x1e>
 80068e0:	42b4      	cmp	r4, r6
 80068e2:	4622      	mov	r2, r4
 80068e4:	4629      	mov	r1, r5
 80068e6:	bf28      	it	cs
 80068e8:	4632      	movcs	r2, r6
 80068ea:	f000 f82f 	bl	800694c <memcpy>
 80068ee:	4629      	mov	r1, r5
 80068f0:	4638      	mov	r0, r7
 80068f2:	f000 f839 	bl	8006968 <_free_r>
 80068f6:	e7f1      	b.n	80068dc <_realloc_r+0x40>

080068f8 <memmove>:
 80068f8:	4288      	cmp	r0, r1
 80068fa:	b510      	push	{r4, lr}
 80068fc:	eb01 0402 	add.w	r4, r1, r2
 8006900:	d902      	bls.n	8006908 <memmove+0x10>
 8006902:	4284      	cmp	r4, r0
 8006904:	4623      	mov	r3, r4
 8006906:	d807      	bhi.n	8006918 <memmove+0x20>
 8006908:	1e43      	subs	r3, r0, #1
 800690a:	42a1      	cmp	r1, r4
 800690c:	d007      	beq.n	800691e <memmove+0x26>
 800690e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006916:	e7f8      	b.n	800690a <memmove+0x12>
 8006918:	4402      	add	r2, r0
 800691a:	4282      	cmp	r2, r0
 800691c:	d100      	bne.n	8006920 <memmove+0x28>
 800691e:	bd10      	pop	{r4, pc}
 8006920:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006924:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006928:	e7f7      	b.n	800691a <memmove+0x22>
	...

0800692c <_sbrk_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d06      	ldr	r5, [pc, #24]	@ (8006948 <_sbrk_r+0x1c>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fa ff40 	bl	80017bc <_sbrk>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_sbrk_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_sbrk_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20000648 	.word	0x20000648

0800694c <memcpy>:
 800694c:	440a      	add	r2, r1
 800694e:	4291      	cmp	r1, r2
 8006950:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006954:	d100      	bne.n	8006958 <memcpy+0xc>
 8006956:	4770      	bx	lr
 8006958:	b510      	push	{r4, lr}
 800695a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800695e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006962:	4291      	cmp	r1, r2
 8006964:	d1f9      	bne.n	800695a <memcpy+0xe>
 8006966:	bd10      	pop	{r4, pc}

08006968 <_free_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4605      	mov	r5, r0
 800696c:	2900      	cmp	r1, #0
 800696e:	d041      	beq.n	80069f4 <_free_r+0x8c>
 8006970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006974:	1f0c      	subs	r4, r1, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	bfb8      	it	lt
 800697a:	18e4      	addlt	r4, r4, r3
 800697c:	f7ff ff82 	bl	8006884 <__malloc_lock>
 8006980:	4a1d      	ldr	r2, [pc, #116]	@ (80069f8 <_free_r+0x90>)
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	b933      	cbnz	r3, 8006994 <_free_r+0x2c>
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	6014      	str	r4, [r2, #0]
 800698a:	4628      	mov	r0, r5
 800698c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006990:	f7ff bf7e 	b.w	8006890 <__malloc_unlock>
 8006994:	42a3      	cmp	r3, r4
 8006996:	d908      	bls.n	80069aa <_free_r+0x42>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	1821      	adds	r1, r4, r0
 800699c:	428b      	cmp	r3, r1
 800699e:	bf01      	itttt	eq
 80069a0:	6819      	ldreq	r1, [r3, #0]
 80069a2:	685b      	ldreq	r3, [r3, #4]
 80069a4:	1809      	addeq	r1, r1, r0
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	e7ed      	b.n	8006986 <_free_r+0x1e>
 80069aa:	461a      	mov	r2, r3
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b10b      	cbz	r3, 80069b4 <_free_r+0x4c>
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	d9fa      	bls.n	80069aa <_free_r+0x42>
 80069b4:	6811      	ldr	r1, [r2, #0]
 80069b6:	1850      	adds	r0, r2, r1
 80069b8:	42a0      	cmp	r0, r4
 80069ba:	d10b      	bne.n	80069d4 <_free_r+0x6c>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	4401      	add	r1, r0
 80069c0:	1850      	adds	r0, r2, r1
 80069c2:	4283      	cmp	r3, r0
 80069c4:	6011      	str	r1, [r2, #0]
 80069c6:	d1e0      	bne.n	800698a <_free_r+0x22>
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	6053      	str	r3, [r2, #4]
 80069ce:	4408      	add	r0, r1
 80069d0:	6010      	str	r0, [r2, #0]
 80069d2:	e7da      	b.n	800698a <_free_r+0x22>
 80069d4:	d902      	bls.n	80069dc <_free_r+0x74>
 80069d6:	230c      	movs	r3, #12
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	e7d6      	b.n	800698a <_free_r+0x22>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	1821      	adds	r1, r4, r0
 80069e0:	428b      	cmp	r3, r1
 80069e2:	bf04      	itt	eq
 80069e4:	6819      	ldreq	r1, [r3, #0]
 80069e6:	685b      	ldreq	r3, [r3, #4]
 80069e8:	6063      	str	r3, [r4, #4]
 80069ea:	bf04      	itt	eq
 80069ec:	1809      	addeq	r1, r1, r0
 80069ee:	6021      	streq	r1, [r4, #0]
 80069f0:	6054      	str	r4, [r2, #4]
 80069f2:	e7ca      	b.n	800698a <_free_r+0x22>
 80069f4:	bd38      	pop	{r3, r4, r5, pc}
 80069f6:	bf00      	nop
 80069f8:	20000644 	.word	0x20000644

080069fc <_malloc_usable_size_r>:
 80069fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a00:	1f18      	subs	r0, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bfbc      	itt	lt
 8006a06:	580b      	ldrlt	r3, [r1, r0]
 8006a08:	18c0      	addlt	r0, r0, r3
 8006a0a:	4770      	bx	lr

08006a0c <__udivmoddi4>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	9d08      	ldr	r5, [sp, #32]
 8006a12:	460f      	mov	r7, r1
 8006a14:	4604      	mov	r4, r0
 8006a16:	468c      	mov	ip, r1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d148      	bne.n	8006aae <__udivmoddi4+0xa2>
 8006a1c:	428a      	cmp	r2, r1
 8006a1e:	4616      	mov	r6, r2
 8006a20:	d961      	bls.n	8006ae6 <__udivmoddi4+0xda>
 8006a22:	fab2 f382 	clz	r3, r2
 8006a26:	b14b      	cbz	r3, 8006a3c <__udivmoddi4+0x30>
 8006a28:	f1c3 0220 	rsb	r2, r3, #32
 8006a2c:	fa01 fc03 	lsl.w	ip, r1, r3
 8006a30:	fa20 f202 	lsr.w	r2, r0, r2
 8006a34:	409e      	lsls	r6, r3
 8006a36:	ea42 0c0c 	orr.w	ip, r2, ip
 8006a3a:	409c      	lsls	r4, r3
 8006a3c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006a40:	b2b7      	uxth	r7, r6
 8006a42:	fbbc f1fe 	udiv	r1, ip, lr
 8006a46:	0c22      	lsrs	r2, r4, #16
 8006a48:	fb0e cc11 	mls	ip, lr, r1, ip
 8006a4c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8006a50:	fb01 f007 	mul.w	r0, r1, r7
 8006a54:	4290      	cmp	r0, r2
 8006a56:	d909      	bls.n	8006a6c <__udivmoddi4+0x60>
 8006a58:	18b2      	adds	r2, r6, r2
 8006a5a:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 8006a5e:	f080 80ee 	bcs.w	8006c3e <__udivmoddi4+0x232>
 8006a62:	4290      	cmp	r0, r2
 8006a64:	f240 80eb 	bls.w	8006c3e <__udivmoddi4+0x232>
 8006a68:	3902      	subs	r1, #2
 8006a6a:	4432      	add	r2, r6
 8006a6c:	1a12      	subs	r2, r2, r0
 8006a6e:	b2a4      	uxth	r4, r4
 8006a70:	fbb2 f0fe 	udiv	r0, r2, lr
 8006a74:	fb0e 2210 	mls	r2, lr, r0, r2
 8006a78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006a7c:	fb00 f707 	mul.w	r7, r0, r7
 8006a80:	42a7      	cmp	r7, r4
 8006a82:	d909      	bls.n	8006a98 <__udivmoddi4+0x8c>
 8006a84:	1934      	adds	r4, r6, r4
 8006a86:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8006a8a:	f080 80da 	bcs.w	8006c42 <__udivmoddi4+0x236>
 8006a8e:	42a7      	cmp	r7, r4
 8006a90:	f240 80d7 	bls.w	8006c42 <__udivmoddi4+0x236>
 8006a94:	4434      	add	r4, r6
 8006a96:	3802      	subs	r0, #2
 8006a98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006a9c:	1be4      	subs	r4, r4, r7
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	b11d      	cbz	r5, 8006aaa <__udivmoddi4+0x9e>
 8006aa2:	40dc      	lsrs	r4, r3
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e9c5 4300 	strd	r4, r3, [r5]
 8006aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aae:	428b      	cmp	r3, r1
 8006ab0:	d906      	bls.n	8006ac0 <__udivmoddi4+0xb4>
 8006ab2:	b10d      	cbz	r5, 8006ab8 <__udivmoddi4+0xac>
 8006ab4:	e9c5 0100 	strd	r0, r1, [r5]
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4608      	mov	r0, r1
 8006abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac0:	fab3 f183 	clz	r1, r3
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	d148      	bne.n	8006b5a <__udivmoddi4+0x14e>
 8006ac8:	42bb      	cmp	r3, r7
 8006aca:	d302      	bcc.n	8006ad2 <__udivmoddi4+0xc6>
 8006acc:	4282      	cmp	r2, r0
 8006ace:	f200 8107 	bhi.w	8006ce0 <__udivmoddi4+0x2d4>
 8006ad2:	1a84      	subs	r4, r0, r2
 8006ad4:	eb67 0203 	sbc.w	r2, r7, r3
 8006ad8:	2001      	movs	r0, #1
 8006ada:	4694      	mov	ip, r2
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	d0e4      	beq.n	8006aaa <__udivmoddi4+0x9e>
 8006ae0:	e9c5 4c00 	strd	r4, ip, [r5]
 8006ae4:	e7e1      	b.n	8006aaa <__udivmoddi4+0x9e>
 8006ae6:	2a00      	cmp	r2, #0
 8006ae8:	f000 8092 	beq.w	8006c10 <__udivmoddi4+0x204>
 8006aec:	fab2 f382 	clz	r3, r2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 80a8 	bne.w	8006c46 <__udivmoddi4+0x23a>
 8006af6:	1a8a      	subs	r2, r1, r2
 8006af8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006afc:	fa1f fc86 	uxth.w	ip, r6
 8006b00:	2101      	movs	r1, #1
 8006b02:	0c20      	lsrs	r0, r4, #16
 8006b04:	fbb2 f7fe 	udiv	r7, r2, lr
 8006b08:	fb0e 2217 	mls	r2, lr, r7, r2
 8006b0c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8006b10:	fb0c f007 	mul.w	r0, ip, r7
 8006b14:	4290      	cmp	r0, r2
 8006b16:	d907      	bls.n	8006b28 <__udivmoddi4+0x11c>
 8006b18:	18b2      	adds	r2, r6, r2
 8006b1a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006b1e:	d202      	bcs.n	8006b26 <__udivmoddi4+0x11a>
 8006b20:	4290      	cmp	r0, r2
 8006b22:	f200 80e2 	bhi.w	8006cea <__udivmoddi4+0x2de>
 8006b26:	4647      	mov	r7, r8
 8006b28:	1a12      	subs	r2, r2, r0
 8006b2a:	b2a4      	uxth	r4, r4
 8006b2c:	fbb2 f0fe 	udiv	r0, r2, lr
 8006b30:	fb0e 2210 	mls	r2, lr, r0, r2
 8006b34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006b38:	fb0c fc00 	mul.w	ip, ip, r0
 8006b3c:	45a4      	cmp	ip, r4
 8006b3e:	d907      	bls.n	8006b50 <__udivmoddi4+0x144>
 8006b40:	1934      	adds	r4, r6, r4
 8006b42:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8006b46:	d202      	bcs.n	8006b4e <__udivmoddi4+0x142>
 8006b48:	45a4      	cmp	ip, r4
 8006b4a:	f200 80cb 	bhi.w	8006ce4 <__udivmoddi4+0x2d8>
 8006b4e:	4610      	mov	r0, r2
 8006b50:	eba4 040c 	sub.w	r4, r4, ip
 8006b54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006b58:	e7a2      	b.n	8006aa0 <__udivmoddi4+0x94>
 8006b5a:	f1c1 0620 	rsb	r6, r1, #32
 8006b5e:	408b      	lsls	r3, r1
 8006b60:	fa22 fc06 	lsr.w	ip, r2, r6
 8006b64:	ea4c 0c03 	orr.w	ip, ip, r3
 8006b68:	fa07 f401 	lsl.w	r4, r7, r1
 8006b6c:	fa20 f306 	lsr.w	r3, r0, r6
 8006b70:	40f7      	lsrs	r7, r6
 8006b72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006b76:	4323      	orrs	r3, r4
 8006b78:	fa00 f801 	lsl.w	r8, r0, r1
 8006b7c:	fa1f fe8c 	uxth.w	lr, ip
 8006b80:	fbb7 f0f9 	udiv	r0, r7, r9
 8006b84:	0c1c      	lsrs	r4, r3, #16
 8006b86:	fb09 7710 	mls	r7, r9, r0, r7
 8006b8a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8006b8e:	fb00 f70e 	mul.w	r7, r0, lr
 8006b92:	42a7      	cmp	r7, r4
 8006b94:	fa02 f201 	lsl.w	r2, r2, r1
 8006b98:	d90a      	bls.n	8006bb0 <__udivmoddi4+0x1a4>
 8006b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8006b9e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8006ba2:	f080 809b 	bcs.w	8006cdc <__udivmoddi4+0x2d0>
 8006ba6:	42a7      	cmp	r7, r4
 8006ba8:	f240 8098 	bls.w	8006cdc <__udivmoddi4+0x2d0>
 8006bac:	3802      	subs	r0, #2
 8006bae:	4464      	add	r4, ip
 8006bb0:	1be4      	subs	r4, r4, r7
 8006bb2:	b29f      	uxth	r7, r3
 8006bb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8006bb8:	fb09 4413 	mls	r4, r9, r3, r4
 8006bbc:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8006bc0:	fb03 fe0e 	mul.w	lr, r3, lr
 8006bc4:	45a6      	cmp	lr, r4
 8006bc6:	d909      	bls.n	8006bdc <__udivmoddi4+0x1d0>
 8006bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8006bcc:	f103 37ff 	add.w	r7, r3, #4294967295	@ 0xffffffff
 8006bd0:	f080 8082 	bcs.w	8006cd8 <__udivmoddi4+0x2cc>
 8006bd4:	45a6      	cmp	lr, r4
 8006bd6:	d97f      	bls.n	8006cd8 <__udivmoddi4+0x2cc>
 8006bd8:	3b02      	subs	r3, #2
 8006bda:	4464      	add	r4, ip
 8006bdc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006be0:	eba4 040e 	sub.w	r4, r4, lr
 8006be4:	fba0 e702 	umull	lr, r7, r0, r2
 8006be8:	42bc      	cmp	r4, r7
 8006bea:	4673      	mov	r3, lr
 8006bec:	46b9      	mov	r9, r7
 8006bee:	d363      	bcc.n	8006cb8 <__udivmoddi4+0x2ac>
 8006bf0:	d060      	beq.n	8006cb4 <__udivmoddi4+0x2a8>
 8006bf2:	b15d      	cbz	r5, 8006c0c <__udivmoddi4+0x200>
 8006bf4:	ebb8 0203 	subs.w	r2, r8, r3
 8006bf8:	eb64 0409 	sbc.w	r4, r4, r9
 8006bfc:	fa04 f606 	lsl.w	r6, r4, r6
 8006c00:	fa22 f301 	lsr.w	r3, r2, r1
 8006c04:	431e      	orrs	r6, r3
 8006c06:	40cc      	lsrs	r4, r1
 8006c08:	e9c5 6400 	strd	r6, r4, [r5]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	e74c      	b.n	8006aaa <__udivmoddi4+0x9e>
 8006c10:	0862      	lsrs	r2, r4, #1
 8006c12:	0848      	lsrs	r0, r1, #1
 8006c14:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8006c18:	0c0b      	lsrs	r3, r1, #16
 8006c1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c1e:	b28a      	uxth	r2, r1
 8006c20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c24:	fbb3 f1f6 	udiv	r1, r3, r6
 8006c28:	07e4      	lsls	r4, r4, #31
 8006c2a:	46b4      	mov	ip, r6
 8006c2c:	4637      	mov	r7, r6
 8006c2e:	46b6      	mov	lr, r6
 8006c30:	231f      	movs	r3, #31
 8006c32:	fbb0 f0f6 	udiv	r0, r0, r6
 8006c36:	1bd2      	subs	r2, r2, r7
 8006c38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c3c:	e761      	b.n	8006b02 <__udivmoddi4+0xf6>
 8006c3e:	4661      	mov	r1, ip
 8006c40:	e714      	b.n	8006a6c <__udivmoddi4+0x60>
 8006c42:	4610      	mov	r0, r2
 8006c44:	e728      	b.n	8006a98 <__udivmoddi4+0x8c>
 8006c46:	f1c3 0120 	rsb	r1, r3, #32
 8006c4a:	fa20 f201 	lsr.w	r2, r0, r1
 8006c4e:	409e      	lsls	r6, r3
 8006c50:	fa27 f101 	lsr.w	r1, r7, r1
 8006c54:	409f      	lsls	r7, r3
 8006c56:	433a      	orrs	r2, r7
 8006c58:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006c5c:	fa1f fc86 	uxth.w	ip, r6
 8006c60:	fbb1 f7fe 	udiv	r7, r1, lr
 8006c64:	fb0e 1017 	mls	r0, lr, r7, r1
 8006c68:	0c11      	lsrs	r1, r2, #16
 8006c6a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c6e:	fb07 f80c 	mul.w	r8, r7, ip
 8006c72:	4588      	cmp	r8, r1
 8006c74:	fa04 f403 	lsl.w	r4, r4, r3
 8006c78:	d93a      	bls.n	8006cf0 <__udivmoddi4+0x2e4>
 8006c7a:	1871      	adds	r1, r6, r1
 8006c7c:	f107 30ff 	add.w	r0, r7, #4294967295	@ 0xffffffff
 8006c80:	d201      	bcs.n	8006c86 <__udivmoddi4+0x27a>
 8006c82:	4588      	cmp	r8, r1
 8006c84:	d81f      	bhi.n	8006cc6 <__udivmoddi4+0x2ba>
 8006c86:	eba1 0108 	sub.w	r1, r1, r8
 8006c8a:	fbb1 f8fe 	udiv	r8, r1, lr
 8006c8e:	fb08 f70c 	mul.w	r7, r8, ip
 8006c92:	fb0e 1118 	mls	r1, lr, r8, r1
 8006c96:	b292      	uxth	r2, r2
 8006c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006c9c:	42ba      	cmp	r2, r7
 8006c9e:	d22f      	bcs.n	8006d00 <__udivmoddi4+0x2f4>
 8006ca0:	18b2      	adds	r2, r6, r2
 8006ca2:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8006ca6:	d2c6      	bcs.n	8006c36 <__udivmoddi4+0x22a>
 8006ca8:	42ba      	cmp	r2, r7
 8006caa:	d2c4      	bcs.n	8006c36 <__udivmoddi4+0x22a>
 8006cac:	f1a8 0102 	sub.w	r1, r8, #2
 8006cb0:	4432      	add	r2, r6
 8006cb2:	e7c0      	b.n	8006c36 <__udivmoddi4+0x22a>
 8006cb4:	45f0      	cmp	r8, lr
 8006cb6:	d29c      	bcs.n	8006bf2 <__udivmoddi4+0x1e6>
 8006cb8:	ebbe 0302 	subs.w	r3, lr, r2
 8006cbc:	eb67 070c 	sbc.w	r7, r7, ip
 8006cc0:	3801      	subs	r0, #1
 8006cc2:	46b9      	mov	r9, r7
 8006cc4:	e795      	b.n	8006bf2 <__udivmoddi4+0x1e6>
 8006cc6:	eba6 0808 	sub.w	r8, r6, r8
 8006cca:	4441      	add	r1, r8
 8006ccc:	1eb8      	subs	r0, r7, #2
 8006cce:	fbb1 f8fe 	udiv	r8, r1, lr
 8006cd2:	fb08 f70c 	mul.w	r7, r8, ip
 8006cd6:	e7dc      	b.n	8006c92 <__udivmoddi4+0x286>
 8006cd8:	463b      	mov	r3, r7
 8006cda:	e77f      	b.n	8006bdc <__udivmoddi4+0x1d0>
 8006cdc:	4650      	mov	r0, sl
 8006cde:	e767      	b.n	8006bb0 <__udivmoddi4+0x1a4>
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	e6fb      	b.n	8006adc <__udivmoddi4+0xd0>
 8006ce4:	4434      	add	r4, r6
 8006ce6:	3802      	subs	r0, #2
 8006ce8:	e732      	b.n	8006b50 <__udivmoddi4+0x144>
 8006cea:	3f02      	subs	r7, #2
 8006cec:	4432      	add	r2, r6
 8006cee:	e71b      	b.n	8006b28 <__udivmoddi4+0x11c>
 8006cf0:	eba1 0108 	sub.w	r1, r1, r8
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	fbb1 f8fe 	udiv	r8, r1, lr
 8006cfa:	fb08 f70c 	mul.w	r7, r8, ip
 8006cfe:	e7c8      	b.n	8006c92 <__udivmoddi4+0x286>
 8006d00:	4641      	mov	r1, r8
 8006d02:	e798      	b.n	8006c36 <__udivmoddi4+0x22a>

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
